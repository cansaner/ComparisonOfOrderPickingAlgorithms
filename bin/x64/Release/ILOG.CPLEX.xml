<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILOG.CPLEX</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CpxCallback.GetCplexTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CpxCallback.GetStartTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CpxCallback.GetStartDetTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CpxCallback.GetEndTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CpxCallback.GetEndDetTime" -->
        <member name="T:ILOG.CPLEX.CouldNotInstallColumnException">
            <summary>
            Exception thrown when installing a new variable according to a
            <c>Column</c> object fails.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CouldNotInstallColumnException.GetColumn">
            <summary>
            Return the <c>Column</c> object that gave rise to this exception.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CouldNotInstallColumnException.GetNumVar">
            <summary>
            Return the <c>INumVar</c> object for which the installation failed.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CouldNotInstallColumnException.ToString">
            <summary>
            Convert exception into human-readable message.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex">
             <summary>
             <c>Cplex</c> is the class used to create and solve
             a large variety of Mathematical Programming models.
             </summary>
            <remarks>  Such models include:
             <ul>
             <li>LP (linear programming) models, </li>
             <li>QP (programs with quadratic terms in the objective function), </li>
             <li>QCP (quadratically constrained programming) models, including
             the special case of SOCP (second order cone programming), and </li>
             <li>MIP (mixed integer programming) models. </li>
             </ul>
             <p>This class implements the modeling interface
             <c>IMPModeler</c> and its base interfaces.  See the
             <em>CPLEX User's Manual</em> for more information about modeling.</p>
             <p>
             Models to be solved by
             <c>Cplex</c>
             should be built by the
             <c>IMPModeler</c>
             (and base interface) methods to construct
             objects from the following list:</p>
             <ul>
             <li> <b>variables:</b> objects of type <c>INumVar</c> and its
                  extensions <c>IIntVar</c>, <c>IloBoolVar</c>,
                   and <c>ISemiContVar</c></li>
             <li> <b>range constraints:</b> objects of type <c>IRange</c>
                  with (piecewise) linear or quadratic expressions</li>
             <li> <b>other relational constraints:</b> objects of type
                  <c>IConstraint</c> of the form
                  <em>expr1</em> relation <em>expr2</em>,
                  where both expressions are linear or quadratic and may optionally
                  contain piecewise linear terms.</li>
             <li> <b>LP matrices:</b> objects of type <c>ILPMatrix</c></li>
             <li> <b>a linear, piecewise linear, or quadratic objective:</b>
                  an object of type <c>IObjective</c> with a (piecewise) linear
                  and/or quadratic expressions</li>
             <li> <b>variable type conversions:</b> objects of type
                  <c>IConversion</c></li>
             <li> <b>special ordered sets:</b> objects of type <c>ISOS1</c> or
                  <c>ISOS2</c></li>
             </ul>
             <p><c>Cplex</c> stores such models internally in the standard
             math programming matrix representation:</p>
             <pre>
                Minimize (or Maximize)   c'x + x'Qx
                subject to               L &lt;= Ax &lt;= U
                                 a_i'x + x'Q_i x &lt;= r_i, for i = 1, ..., q
                                         l &lt;=  x &lt;= u.
             </pre>
             <p>Thus A is the matrix of linear constraint coefficients,
             and L and U are the vectors of lower and upper bounds on the
             vector of variables, x.  The Q matrix must
             be positive semi-definite (or negative semi-definite in the maximization
             case) and represents the quadratic terms of the objective function.
             The matrices Q_i must be positive semi-definite and represent the quadratic
             terms of the i-th quadratic constraint, and the a_i are vectors containing
             the corresponding linear terms.
             For more about the Q_i, see the chapter about QCP in
             the <em>CPLEX User's Manual</em>.</p>
             <p>
             If the model contains integer, Boolean, or semi-continuous variables,
             or if the model has special ordered sets (SOSs), the model is referred to
             as a <em>mixed integer program</em> (MIP). You can query whether the
             active model is a MIP with the method
             
              <c>Cplex.IsMIP</c>. 
             </p><p>
             A model with quadratic terms in the objective is referred to as
             a <em>mixed integer quadratic program</em> (MIQP) if it is also a MIP,
             and a <em>quadratic program</em> (QP) otherwise.
             You can query whether the active model has a quadratic objective
             by calling method
             
              <c>Cplex.IsQO</c>. 
             </p>
             <p>
             A model with quadratic constraints is referred to as a <em>quadratically
             constrained program</em> (MIQCP) if it is also a MIP, and as QCP otherwise.
             You can query whether the active model is
             quadratically constrained by calling the method
             
              <c>Cplex.IsQC</c>. 
             A QCP may or may not have a quadratic objective; that is, a given problem
             may be both QP and QCP.  Likewise, a MIQCP may
             or may not have a quadratic objective; that is, a given problem may be
             both MIQP and MIQCP.
             </p>
             <p>
             If there are no quadratic terms in the objective, no integer constraints,
             and the problem is not quadratically constrained, it is called a
             <em>linear program</em> (LP).
             </p>
             <p>If there are no quadratic terms in the objective,
             and the problem is not quadratically constrained, but there are integer
             variables, it is called a <em>mixed integer linear program</em> (MILP).
             </p>
             <p>Special ordered sets (SOS)
             fall outside the conventional representation in terms of A and Q matrices
             and are stored separately.</p>
             <p>
             Information related to the matrix representation of the model
             can be queried through these methods:</p>
             <ul>
             <li>
             
              <c>Cplex.GetNcols</c> 
             for querying the number of columns of A,</li>
             <li>
             
              <c>Cplex.GetNrows</c> 
             for querying the number of rows of A; that is,
             the number of linear constraints,</li>
             <li>
             
              <c>Cplex.GetNQCs</c> 
             for querying the number of quadratic constraints,</li>
             <li>
             
              <c>Cplex.GetNNZs</c> 
             for querying the number of nonzero elements in A, and </li>
             <li>
             
              <c>Cplex.GetNSOSs</c> 
             for querying the number of <c>SOS</c>s.</li>
             </ul>
             <p>Additional information about the active model can be obtained through
             enumerators defined on the different types of modeling objects.</p>
             <p>
             <c>Cplex</c> effectively treats all models as MIQCP models.
             That is, it allows the most general case, although the solution algorithms
             make efficient use of special cases, such as the absence of quadratic
             terms in the formulation.</p>
             <p>
             The method
             
              <c>Cplex.Solve</c> 
             is used to solve the
             active model.  It begins by solving the <em>root relaxation</em> of the
             MIQCP model, where all integrality constraints and SOSs are ignored.  If
             the model has no integrality constraints or SOSs, then the optimization
             is complete once the root relaxation is solved.  Otherwise,
             <c>Cplex</c> uses a branch and cut procedure to reintroduce
             the integrality constraints and SOS constraints.  See the
             <em>CPLEX User's Manual</em> for more information
             about branch and cut.</p>
             <p>
             Most users can simply call the method
             
              <c>Cplex.Solve</c> 
             to solve their models.
             However, several parameters are available for users who require more
             control.
             Perhaps the most important one is <c>Cplex.IntParam.RootAlg</c>,
             which determines the algorithm used to solve the root relaxation.
             Possible settings, as defined in <c>Cplex.Algorithm</c>, are:</p>
             <ul>
             <li><c>Cplex.Algorithm.Auto</c><br />
                 <c>Cplex</c> automatically selects an algorithm. This is the
                 default setting.</li>
             <li><c>Cplex.Algorithm.Primal</c><br />
                 Use the primal simplex algorithm.</li>
             <li><c>Cplex.Algorithm.Dual</c><br />
                 Use the dual simplex algorithm.</li>
             <li><c>Cplex.Algorithm.Network</c><br />
                 Use network simplex on the embedded network part of the model,
                 followed by dual simplex on the entire model.</li>
             <li><c>Cplex.Algorithm.Barrier</c><br />
                 Use the barrier algorithm.</li>
             <li><c>Cplex.Algorithm.Sifting</c><br />
                 Use the sifting algorithm. This option is not available for quadratic
                 problems. If selected nonetheless, <c>Cplex</c> defaults to
                 the <c>Cplex.Algorithm.Auto</c> setting.</li>
             <li><c>Cplex.Algorithm.Concurrent</c><br />
                 Use several algorithms concurrently. This option is not available
                 for quadratic problems. If selected nonetheless, <c>Cplex</c>
                 defaults to the <c>Cplex.Algorithm.Auto</c> setting.</li>
             </ul>
             <p>Numerous other parameters allow you to control algorithmic aspects of
             the optimizer.  See
             
              <c>Cplex.IntParam</c>, 
             
              <c>Cplex.LongParam</c>, 
             
              <c>Cplex.DoubleParam</c>, 
             
              <c>Cplex.BooleanParam</c>, and 
             
              <c>Cplex.StringParam</c> 
             for further information.
             Parameters are set with the method
             
              <c>Cplex.SetParam</c>. 
             </p><p>
             Even higher levels of control can be achieved through the use of goals
             (see
             
              <c>Cplex.Goal</c>) 
             or callbacks (see
             
              <c>Cplex.Callback</c> 
             and its extensions).</p>
             <p>
             The <c>solve</c> method returns a Boolean value reporting whether
             (<c>true</c>) or not
             (<c>false</c>) a solution (not necessarily the optimal one) has been
             found. Further information about the solution can be queried with the method
             <c>getStatus</c>.  The return code of type
             <c>Cplex.Status</c> reports whether the
             solution is feasible, bounded, or optimal,
             or whether the model has been proven
             to be infeasible or unbounded.  See
             
              <c>Cplex.Status</c> 
             for more information.</p>
             <p>
             The method
             
              <c>Cplex.GetCplexStatus</c> 
             provides more detailed information about the status of the optimizer after
             
              <c>Cplex.Solve</c> 
             returns. For example, it can provide
             information about why the optimizer terminated prematurely (time limit,
             iteration limit, or other limits).  The methods
             
              <c>Cplex.IsPrimalFeasible</c> 
             and
             
              <c>Cplex.IsDualFeasible</c> 
             determine whether a primal or dual feasible solution has been found
             and can be queried.</p>
             <p>
             The most important solution information computed by <c>Cplex</c>
             are usually the solution vector and the objective function value.
             The method
             
              <c>Cplex.GetValue</c> 
             queries the solution vector and
             
              <c>Cplex.GetObjValue</c> 
             queries the value of the objective function.
             Most optimizers also compute additional solution information.
             (for example, dual values, reduced costs, simplex bases, etc.)  This
             additional information can also be queried through various methods of
             <c>Cplex</c>.  If you attempt to retrieve solution information
             that is not available from a particular optimizer, <c>Cplex</c>
             will throw an exception.</p>
             <p>
             If you are solving an LP and a basis is available, the solution can be
             further analyzed by performing sensitivity analysis. This information tells  *  you how sensitive the solution is with respect to changes in
             variable bounds, constraint bounds, or objective coefficients.
             The information is computed and accessed with the methods
             
              <c>Cplex.GetBoundSA</c>, 
             
              <c>Cplex.GetRangeSA</c>, 
             
              <c>Cplex.GetRHSSA</c>, and 
             
              <c>Cplex.GetObjSA</c>. 
             </p>
             <p>
             An important consideration when you access solution information is the
             numeric quality of the solution.
             Since <c>Cplex</c> performs arithmetic operations using
             finite precision, solutions are always subject to numeric errors.
             For most problems, numeric errors are well within reasonable tolerances.
             However, for numerically difficult models, you
             are advised to verify the quality of the solution using the method
             
              <c>Cplex.GetQuality</c> 
             which offers a variety of quality measures.</p></remarks>
        </member>
        <member name="T:ILOG.Concert.IMPModeler">
              <summary>
              <c>IMPModeler</c> is an extension of the <c>IModeler</c>
              modeling interface for mathematical programming (MP).
              </summary>
             <remarks>  <p>It adds support for several modeling object interfaces specific to
              mathematical programming, including LP
              matrices, semi-continuous variables, and special ordered sets (SOSs).  It
              extends the functionality of <c>IModeler</c> to column-wise
              modeling and supports modification of variable types and expressions of
              ranged constraints and objective functions.  This interface is implemented
              by the <c>Cplex</c> optimizer class.</p>
            
              
              </remarks>
              <see cref="T:ILOG.Concert.IModeler"/><see cref="T:ILOG.CPLEX.Cplex"/>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.GetModel">
             <summary>
             Returns the active model.
             </summary>
            <returns>The active model.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetModel(ILOG.Concert.IModel)">
             <summary>
             Sets <c>model</c> as the active model.
             </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Delete(ILOG.Concert.ICopyable)">
              <summary>
              Deletes an object from a model.
              </summary>
             <remarks>  <p>After you call this method, the modeling object <c>obj</c> is no
              longer in the model. If the modeling object is referenced multiple
              times in a model (for example, a variable used by multiple constraints), 
              then that object is removed from all places.  In particular, 
              when you delete a variable from a
              model, the variable is removed from all the other modeling objects in the
              model. Modeling objects that are variables are not of type
              <c>IAddable</c>. In fact, the type of the removed object is
              <c>ICopyable</c>, a common base interface of both
              <c>IAddable</c> and <c>INumVar</c>.</p>
            
              </remarks>
              <param name="obj">The modeling object to be deleted from the invoking
                                model.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Delete(ILOG.Concert.ICopyable[])">
              <summary>
              Deletes the modeling objects in an array <c>obj</c> from the
              invoking model.
              </summary>
             <remarks>
              <p>After you call this method, the
              deleted objects are no longer in the model. If a modeling object is
              referenced multiple times in a model (for example, a variable used by
              multiple constraints), the object is removed from all places.  
              When you delete
              variables from a model, they are removed from all other modeling
              objects in the model.</p>
            
              </remarks>
              <param name="obj">The array of modeling objects to be deleted from the
                                invoking model.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Delete(ILOG.Concert.ICopyable[],System.Int32,System.Int32)">
              <summary>
              Deletes the modeling objects in <c>obj[start]</c> through
              <c>obj[start+num-1]</c> from a model.
              </summary>
             <remarks>Modeling objects
              <c>obj[start]</c> through <c>obj[start+num-1]</c> are
              deleted from the invoking model.  
              After you call this
              method, the deleted objects will no longer be in the model.  If a
              modeling object is referenced multiple times in a model 
              (for example, a variable used by multiple constraints), 
              the object is removed from all places.  Thus,
              when you delete variables from a model, they are removed from all
              other modeling objects in the model.
            
              
            
             </remarks>
             <param name="obj">An array containing the modeling objects to be deleted
                                from the invoking model.
              </param>
              <param name="start">The index of the first modeling object in
                                <c>obj</c> to be deleted from the invoking
                                model.
              </param>
              <param name="num">The number of modeling objects in <c>obj</c> to
                                be deleted from the invoking model.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.QuadIntExpr">
            <summary>
            Creates and returns an integer quadratic expression.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.QuadNumExpr">
            <summary>
            Creates and returns a quadratic expression.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.LqIntExpr">
            <summary>
            Creates and returns an integer quadratic expression.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.LqNumExpr">
            <summary>
            Creates and returns a quadratic expression.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Minimize">
              <summary>
              Creates and returns an empty minimization objective function.
              </summary>
             <remarks>
              <p>This method creates and returns an <c>IObjective</c> object
              representing a minimization objective function with a zero expression.
              This method is typically used in an application that 
              applies column-wise modeling
              to fill in the objective function while creating the variables.
              </p>
            
              </remarks>
              <returns>The new zero minimization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Minimize(System.String)">
              <summary>
              Creates and returns an empty minimization objective function.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object
              representing a minimization objective function with a zero expression.
              The new <c>IObjective</c> object is assigned 
              <c>name</c> as its name.  This method is typically 
              used in an application that applies 
              column-wise modeling to fill in the objective function while creating the
              variables.
              </p>
            
              
             </remarks>
             <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero minimization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Maximize">
              <summary>
              Creates and returns an empty maximization objective function.
              </summary>
             <remarks>  This method creates an <c>IObjective</c> object representing a
              maximization objective function with a zero expression.  This method is
              typically used in an application that applies column-wise modeling to fill
              in the objective function while creating the variables.
            
              </remarks>
              <returns>The new zero maximization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Maximize(System.String)">
              <summary>
              Creates and returns an empty maximization objective function.
              </summary>
             <remarks>  This method creates an <c>IObjective</c> object representing a
              maximization objective function with a zero expression.  The new
              <c>IObjective</c> object is assigned <c>name</c>
              as its name.  This method is typically used in an application that 
              applies column-wise modeling
              to fill in the objective function while creating the variables.
            
              
             </remarks>
             <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero maximization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Objective(ILOG.Concert.ObjectiveSense)">
              <summary>
              Creates and returns an empty objective function with the sense
              specified by <c>sense</c>.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object with
              a zero expression and the specified optimization sense. This 
              method is typically
              used in an application that uses column-wise modeling to fill in the
              objective function while creating the variables.
              </p>
            
              
             </remarks>
             <param name="sense">The optimization sense of the new objective.
              </param>
              <returns>The new zero objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Objective(ILOG.Concert.ObjectiveSense,System.String)">
              <summary>
              Creates and returns an empty objective function with the sense
              specified by <c>sense</c> and with the name specified by
              <c>name</c>.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object with
              a zero  expression and the specified optimization sense.  The new
              <c>IObjective</c> object is assigned <c>name</c> 
              as its name.  This method is typically used in an application that 
              applies column-wise modeling
              to fill in the objective function while creating the variables.
              </p>
            
              
            
             </remarks>
             <param name="sense">The optimization sense of the new objective.
              </param>
              <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddMinimize">
              <summary>
              Creates and returns an empty minimization objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object
              representing a minimization objective function with a zero expression.
              The new <c>IObjective</c> object is added to the invoking
              model. This method is typically used in an application
              that applies column-wise modeling to fill in the objective function while
              creating the variables.
              </p>
            
              </remarks>
              <returns>The new zero minimization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddMinimize(System.String)">
              <summary>
              Creates and returns an empty minimization objective function 
              with the specified <c>name</c> 
              and adds the empty objective to the invoking model.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object
              representing a minimization objective function with a zero expression.
              The new <c>IObjective</c> object is assigned the name
              <c>name</c> and added to the invoking model.
              This method is typically used in an application that applies column-wise
              modeling to fill in the objective function while creating the variables.
              </p>
            
              
             </remarks>
             <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero minimization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddMaximize">
              <summary>
              Creates and returns an empty maximization objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object
              representing a maximization objective function with a zero expression.
              The new <c>IObjective</c> object is added to the invoking
              model. This method is typically used in an application
              that applies column-wise modeling to fill in the objective function while
              creating the variables.
              </p>
            
              </remarks>
              <returns>The new zero maximization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddMaximize(System.String)">
              <summary>
              Creates and returns an empty maximization objective function 
              with the specified <c>name</c> and adds it to the invoking
              model.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object
              representing a maximization objective function with a zero expression.
              The new <c>IObjective</c> object is assigned 
              <c>name</c> as its name 
              and added to the invoking model. This method 
              is typically used in an application that applies column-wise modeling to
              fill in the objective function while creating the variables.
              </p>
            
              
             </remarks>
             <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero maximization objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddObjective(ILOG.Concert.ObjectiveSense)">
              <summary>
              Creates and returns
              an empty objective function with the sense 
              specified by <c>sense</c> and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              This method creates and returns an <c>IObjective</c> object with
              a zero expression and the specified optimization sense.  The new
              <c>IObjective</c> object is added to the invoking
              model. This method is typically used in an application
              that applies column-wise modeling to fill in the objective function while
              creating the variables.
              </p>
            
              
             </remarks>
             <param name="sense">The optimization sense of the new objective.
              </param>
              <returns>The new zero objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddObjective(ILOG.Concert.ObjectiveSense,System.String)">
              <summary>
              Creates and returns
              an empty objective function with the 
              specified <c>name</c> and with the specified 
              <c>sense</c> and adds it to the invoking model.
              </summary>
             <remarks>  <p>
              This method creates and returns an <c>IObjective</c> object with
              a zero expression and the specified optimization sense. The new
              <c>IObjective</c> object is assigned <c>name</c> as
              its name and
              added to the invoking model. This method is typically
              used in an application that applies column-wise modeling to fill in the
              objective function while creating the variables.
              </p>
            
              
            
             </remarks>
             <param name="sense">The optimization sense of the new objective.
              </param>
              <param name="name">The name assigned to the new objective.
              </param>
              <returns>The new zero objective.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddRange(System.Double,System.Double)">
              <summary>
              Creates, returns, and adds to the invoking model
              an empty <c>IRange</c> object.
              </summary>
             <remarks> 
              <p>The new
              <c>IRange</c> object is initialized
              to represent the constraint <c>lb &lt;= 0 &lt;= ub</c>,
              and is added to the invoking model. 
              This method is typically used in an application that applies column-wise
              modeling to fill in the expression for the ranged constraint while
              creating the variables.
              </p>
            
              
            
             </remarks>
             <param name="lb">The lower bound of the new <c>IRange</c> constraint.
              </param>
              <param name="ub">The upper bound of the new <c>IRange</c> constraint.
              </param>
              <returns>A new <c>IRange</c> object initialized to represent
                         the constraint <c>lb &lt;= 0 &lt;= ub</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IMPModeler.AddRange(System.Double,System.Double,System.String)" -->
        <member name="M:ILOG.Concert.IMPModeler.Range(System.Double,System.Double)">
              <summary>
              Creates and returns an empty <c>IRange</c> object with
              the specified upper and lower bound.
              </summary>
             <remarks> 
             
              <p>The new
              <c>IRange</c> object is
              initialized to represent the constraint <c>lb &lt;= 0 &lt;= ub</c>.
              This method is typically used in an application that applies column-wise
              modeling to fill in the expression for the ranged constraint while
              creating the variables.
              </p>
            
              
            
             </remarks>
             <param name="lb">The lower bound of the new <c>IRange</c> constraint.
              </param>
              <param name="ub">The upper bound of the new <c>IRange</c> constraint.
              </param>
              <returns>A new <c>IRange</c> object initialized to represent
                          the constraint <c>lb &lt;= 0 &lt;= ub</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Range(System.Double,System.Double,System.String)">
              <summary>
              Creates and returns an empty <c>IRange</c> object with the
              specified <c>name</c> and upper and lower bounds.
              </summary>
             <remarks>
              <p>The new
              <c>IRange</c> object is initialized to represent the constraint
              <c>lb &lt;= 0 &lt;= ub</c>. The new <c>IRange</c> object is
              assigned <c>name</c> as its name. 
              This method is typically used in an application that applies 
              column-wise modeling to fill in the expression for
              the ranged constraint while creating the variables.
              </p>
            
              
            
            
             </remarks>
             <param name="lb">The lower bound of the new <c>IRange</c> constraint.
              </param>
              <param name="ub">The upper bound of the new <c>IRange</c> constraint.
              </param>
              <param name="name">The name assigned to the new <c>IRange</c> constraint.
              </param>
              <returns>A new <c>IRange</c> object initialized to represent
                          the constraint <c>lb &lt;= 0 &lt;= ub</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a new modeling variable with the 
              specified <c>name</c>, type, lower bound, and upper bound
              for column-wise modeling in the target <c>column</c>.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new modeling variable with
              the specified bounds, type, and name. The newly created variable is then
              installed in existing modeling objects, as defined by the
              <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="column">The column object defining where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <param name="name">The name of the new modeling variable.
             
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a new modeling variable for column-wise modeling.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new modeling variable with
              the specified bounds and type. The newly created variable is then
              installed in existing modeling objects, as defined by the
              <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="column">The column object defining where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
              <summary>
              Creates and returns an array of modeling variables with distinctive
              names, all with the same lower bound, and all with the same upper
              bound, as specified, for column-wise modeling.
              </summary>
             <remarks>
             <p>
              This method creates new modeling variables, each with the same specified
              bounds and type, and returns them in an array. The number of new variables
              is determined by the size of the <c>ColumnArray</c> argument
              <c>cols</c>. Each new variable is assigned a separate name, with
              the variable <c>i</c> assigned <c>name[i]</c>. The new
              variables are then installed in existing modeling objects, as defined 
              by the <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining where
                                to install the new variables.
              </param>
              <param name="lb">The lower bound of the new modeling variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns modeling variables, all of the same specified 
              <c>type</c>, all with same upper bound, all with the same 
              lower bound, as specified,  for column-wise modeling.
              </summary>
             <remarks>  
              <p>
              This method creates new modeling variables, each with the same specified
              bounds and type, and returns them in an array. The number of new variables
              is determined by the size of the <c>ColumnArray</c> argument
              <c>cols</c>. The new variables are then installed in existing
              modeling objects, as defined by the <c>ColumnArray</c>
              argument <c>cols</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="lb">The lower bound of the new modeling variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
              <summary>
              Creates and returns modeling variables with the individual
              type specified by the corresponding entry in the array 
              <c>type</c>, and individual upper and lower bounds as specified
              in those arrays, for column-wise modeling.
              </summary>
             <remarks>  
              <p>
              This method creates new modeling variables, each with its own bounds and
              type, and returns them in an array.  The number of new variables is
              determined by the size of the <c>ColumnArray</c> argument
              <c>cols</c>.  The new variable <c>i</c> is constructed
              with bounds <c>lb[i]</c> and <c>ub[i]</c> and type
              <c>type[i]</c>. The new variables are installed in existing
              modeling objects, as defined by the <c>cols</c> argument.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining where
                                to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables.  Variable
                                <c>i</c> is constructed with a type of
                                <c>type[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
              <summary>
              Creates and returns modeling variables with the individual
              type specified by the corresponding entry in the array 
              <c>type</c>, with individual upper and lower bounds as specified
              in those arrays, with the name specified individually by the
              corresponding entry in the array <c>name</c>,  
              for column-wise modeling.
              </summary>
             <remarks>  
              <p>
              This method creates new modeling variables, each with its own bounds and
              type, and returns them in an array.  The number of new variables is
              determined by the size of the <c>ColumnArray</c> argument
              <c>cols</c>.  Variable <c>i</c> is constructed with
              bounds <c>lb[i]</c> and <c>ub[i]</c> and type
              <c>type[i]</c>, and it is assigned <c>name[i]</c>. The
              new variables are installed in existing modeling objects, as defined
              by the <c>cols</c> argument.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining where
                                to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                upper bound of <c>lb[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables. Variable
                                <c>i</c> is 
                                constructed with a type of <c>type[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,System.String)">
              <summary>
              Creates a continuous modeling variable, of type <c>Float</c>
              with upper bound, lower bound, and name as specified,
              for column-wise modeling.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new modeling variable of type
              <c>NumVarType.Float</c> with the specified bounds and name.
              The newly created variable is then installed in existing modeling objects
              as defined by the <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="name">The name of the new modeling variable.
              </param>
              <returns>The new continuous modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double)">
              <summary>
              Creates a continuous modeling variable, of type <c>Float</c>
              with upper bound and lower bound as specified,
              for column-wise modeling.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new modeling variable of type
              <c>NumVarType.Float</c> with the specified bounds.  The newly
              created variable
              is then installed in existing modeling objects as defined by the
              <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <returns>The new continuous modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,System.String[])">
              <summary>
              Creates and returns continuous modeling variables, all of type 
              <c>Float</c>, with the same specified bounds, but with
              individually specified names, for column-wise modeling.
              </summary>
             <remarks>
             
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Float</c>, each with the same specified bounds, and
              returns them in an array.  The number of new variables is determined by
              the size of the <c>ColumnArray</c> argument <c>cols</c>.
              Each new variable is assigned a separate name,  where variable
              <c>i</c> is assigned <c>name[i]</c>.  The new variables
              are then installed in existing modeling objects as describe by the
              <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is assigned lower bound
                                <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is assigned upper bound
                                <c>ub[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new continuous modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double)">
              <summary>
              Creates and returns continuous modeling variables, all of type
              <c>Float</c>, all with same upper bound,  all with the same  
              lower bound, for column-wise modeling.
              </summary>
             <remarks> 
            
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Float</c>, each with the same specified bounds, and
              returns them in an array.  The number of new variables is determined by
              the size of the <c>ColumnArray</c> argument <c>cols</c>.
              The new variables are then installed in existing modeling objects as
              defined by the <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bound of the new modeling variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <returns>The array of new continuous modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[])">
              <summary>
              Creates and returns continuous modeling variables, all of the same
              type <c>Float</c> with individually specified upper bound, and
              individually specified lower bound, for column-wise modeling.
              </summary>
             <remarks> 
            
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Float</c>, each with its own bounds, and returns
              them in an array.  The number of new variables is determined by the size
              of the <c>ColumnArray</c> argument <c>cols</c>.
              Variable <c>i</c> is constructed with bounds <c>lb[i]</c>
              and <c>ub[i]</c>.  The new variables are installed in existing
              modeling objects as defined by the <c>cols</c> argument.
              </p>
            
              
            
            
             </remarks>
             <param name="cols"><c>ColumnArray</c> object defining  where to
                                install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <returns>The array of new continuous modeling variables</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],System.String[])">
              <summary>
              Creates and returns continuous modeling variables, all of type
              <c>Float</c> with individually
              specified upper bound, lower bound, and name, for column-wise
              modeling.
              </summary>
             <remarks> 
            
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Float</c>, each with its own bounds, and returns
              them in an array.  The number of new variables is determined by the size
              of the <c>ColumnArray</c> argument <c>cols</c>.
              Variable <c>i</c> is constructed with bounds
              <c>lb[i]</c> and <c>ub[i]</c>. and it is assigned 
              <c>name[i]</c>. The new variables are installed in existing
              modeling objects as defined by the <c>cols</c> argument.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new continuous modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVar(ILOG.Concert.Column,System.Int32,System.Int32,System.String)">
              <summary>
              Creates an integer modeling variable with specified
              upper bound, lower bound, and name for column-wise modeling.
              </summary>
             <remarks> 
            
              <p>
              This
              method returns an object representing a new modeling variable of type
              <c>NumVarType.Int</c> with the specified bounds and name. The
              newly created variable is then installed in existing modeling objects as
              defined by the <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="name">The name of the new modeling variable.
              </param>
              <returns>The new integer modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVar(ILOG.Concert.Column,System.Int32,System.Int32)">
              <summary>
              Creates an integer modeling variable, with specified upper and lower
              bound, for column-wise modeling.
              </summary>
             <remarks>
              
              <p>
              This
              method returns an object representing a new modeling variable of type
              <c>NumVarType.Int</c> with the specified bounds. The newly
              created variable is then installed in existing modeling objects as
              defined by the <c>Column</c> argument <c>column</c>.
              </p>
            
              
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="lb">The lower bound of the new modeling variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <returns>The new integer modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32,System.Int32,System.String[])">
              <summary>
              Creates and returns integer modeling variables, all with the same
              specified upper bound and lower bound, with individually specified
              names, for column-wise modeling.
              </summary>
             <remarks> 
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Int</c>, each with the same specified bounds, and
              returns them in an array.  The number of new variables is determined by
              the size of the <c>ColumnArray</c> argument <c>cols</c>.
              Each new variable is assigned a separate name, with variable
              <c>i</c> being assigned <c>name[i]</c>. The new variables
              are then installed in existing modeling objects as defined by the
              <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bound of the new modeling variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="name">The names of the new modeling variables.  Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new integer modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32,System.Int32)">
              <summary>
              Creates and returns integer modeling variables,
              all with the same upper bound and with the same lower bound,
               for column-wise modeling.
               </summary>
             <remarks>  
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Int</c>, each with the same specified bounds, and
              returns them in an array.  The number of new variables is determined by
              the size of the <c>ColumnArray</c> argument <c>cols</c>.
              The new variables are then installed in  existing modeling objects as
              defined by the <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bound of the new modeling variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <returns>The array of new integer modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32[],System.Int32[])">
              <summary>
              Creates and returns integer modeling variables,
              with individually specified upper bound, lower bound, and name,
              for column-wise modeling.
              </summary>
             <remarks>
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Int</c>, each with its own bounds, and returns
              them in an array.  The number of new variables is determined by the size
              of the <c>ColumnArray</c> argument <c>cols</c>. Variable
              <c>i</c> is constructed with bounds <c>lb[i]</c> and
              <c>ub[i]</c>.  The new variables are installed in existing
              modeling objects as defined by the <c>cols</c> argument.
              </p>
            
              
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                upper bound of <c>ub[i]</c>.
              </param>
              <returns>The array of new integer modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32[],System.Int32[],System.String[])">
              <summary>
              Creates and returns integer modeling variables, each with individually
              specified upper bound, lower bound, and name, for column-wise modeling.
              </summary>
             <remarks>  
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Int</c>, each with its own bounds, and returns
              them in an array.  The number of new variables is determined by the size
              of the <c>ColumnArray</c> argument <c>cols</c>. Variable
              <c>i</c> is constructed with bounds <c>lb[i]</c> and
              <c>ub[i]</c> and is assigned <c>name[i]</c>.  The
              new variables are installed in existing modeling objects as defined
              by the <c>cols</c> argument.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="lb">The lower bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with a
                                lower bound of <c>lb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variable.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables.  Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new integer modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.BoolVar(ILOG.Concert.Column)">
              <summary>
              Creates a new Boolean (or binary) modeling variable for column-wise
              modeling.
              </summary>
             <remarks> 
              
              <p>
              This method returns an object representing a new modeling
              variable of type <c>NumVarType.Bool</c>.  The newly created
              variable is then installed in existing modeling objects as defined
              by the <c>Column</c> argument <c>column</c>.
              </p>
            
              
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <returns>The new Boolean modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.BoolVar(ILOG.Concert.Column,System.String)">
              <summary>
              Creates a new Boolean (or binary) modeling variable, with
              the specified name, for column-wise modeling.
              </summary>
             <remarks> 
            
              <p>
              This method returns an object representing a new modeling
              variable of type <c>NumVarType.Bool</c> with the specified
              name.  The newly created variable is then installed in existing
              modeling objects as defined by the <c>Column</c> argument
              <c>column</c>.
             </p>
            
              
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="name">The name of the new modeling variable.
              </param>
              <returns>The new Boolean modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.BoolVarArray(ILOG.Concert.ColumnArray)">
              <summary>
              Creates and returns an array of Boolean (or binary) 
              modeling variables for column-wise modeling.
              </summary>
             <remarks> 
            
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Bool</c> and returns them in an array.  The number
              of new variables is determined by the size of the
              <c>ColumnArray</c> argument <c>cols</c>. The new
              variables are installed in existing modeling objects as defined by
              the <c>cols</c> argument.
              </p>
            
              
             </remarks>
             <param name="cols">The <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <returns>The array of new Boolean modeling variables</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.BoolVarArray(ILOG.Concert.ColumnArray,System.String[])">
              <summary>
              Creates and returns an array of Boolean (or binary) 
              modeling variables with names for column-wise modeling.
              </summary>
             <remarks> 
             
              <p>
              This method creates new modeling variables of type
              <c>NumVarType.Bool</c> and returns them in an array.  The number
              of new variables is determined by the size of the
              <c>ColumnArray</c> argument <c>cols</c>. Variable
              <c>i</c> will  be assigned <c>name[i]</c>.  The new
              variables are installed in existing modeling objects as defined by
              the <c>cols</c> argument.
              </p>
            
              
            
             </remarks>
             <param name="cols">The <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="name">The names of the new modeling variables.  Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new Boolean modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVar(System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a new semi-continuous modeling variable with
              a specified semi-continuous lower bound, upper bound, and type.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new semi-continuous modeling
              variable with the specified bounds and type.
              </p>
            
              
            
            
             </remarks>
             <param name="sclb">The semi-continuous lower bound of the new modeling
                                variable
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVar(System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a new semi-continuous modeling variable with
              specified bounds, type, and name.
              </summary>
             <remarks>
              <p>
              This method returns an object representing a new semi-continuous modeling
              variable with the specified bounds, type, and name.
              </p>
            
              
            
            
            
             </remarks>
             <param name="sclb">The semi-continuous lower bound of the new modeling
                                variable
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <param name="name">The name of the new modeling variable.
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a new semi-continuous modeling variable 
              with specified type and bounds, for column-wise modeling.
              </summary>
             <remarks>
              
              <p>
              This method returns an object representing a new
              semi-continuous modeling variable with the specified bounds and type.
              The newly created variable is then installed in existing modeling
              objects as defined by the <c>Column</c> argument
              <c>column</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a new semi-continuous modeling variable, with
              specified bounds, type, and name, for column-wise modeling.
              </summary>
             <remarks>
              
              <p>
              This method returns an object representing a new
              semi-continuous modeling variable with the specified bounds, type, and
              name. The newly created variable is then installed in existing modeling
              objects as defined by the <c>Column</c> argument
              <c>column</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="column">The column object defining  where to install the new
                                variable.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variable.
              </param>
              <param name="ub">The upper bound of the new modeling variable.
              </param>
              <param name="type">The type of the new modeling variable.
              </param>
              <param name="name">The name of the new modeling variable.
              </param>
              <returns>The new modeling variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
              <summary>
              Creates and returns <c>n</c> semi-continuous modeling variables,
              all with the same type, semi-continuous lower bound, and upper bound, 
              but with individually specified names.
              </summary>
             <remarks>
              <p>
              This method creates <c>n</c> new semi-continuous modeling
              variables, each with the same specified bounds and type, and returns them
              in an array. Each new variable is assigned a separate name, with variable
              <c>i</c> assigned <c>name[i]</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="n">The number of new semi-continuous variables to create.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns <c>n</c> semi-continuous modeling variables,
              all of the same type, with the same semi-continuous lower bound and
              upper bound.
              </summary>
             <remarks>
              <p>
              This method creates <c>n</c> new semi-continuous modeling
              variables, each with the same specified bounds and type, and returns them
              in an array.
              </p>
            
              
            
            
            
             </remarks>
             <param name="n">The number of new semi-continuous variables to create.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
              <summary>
              Creates and returns <c>n</c> semi-continuous modeling variables,
              all of the same type, with the same semi-continuous lower bound and
              upper bound, and individually specified names.
              </summary>
             <remarks>
              <p>
              This method creates new semi-continuous modeling variables, each with
              its own bounds and type, and returns them in an array. Variable
              <c>i</c> is constructed with bounds <c>sclb[i]</c> and
              <c>ub[i]</c> and type <c>type[i]</c>, and it is assigned
              name <c>name[i]</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="n">The number of new semi-continuous variables to create.
              </param>
              <param name="sclb">The semi-continuous lower bounds of the new modeling
                                variables.
                                Variable <c>i</c> is constructed with a
                                semi-continuous lower bound of <c>sclb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables.  Variable
                                <c>i</c> is constructed with a type of
                                <c>type[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables.  Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
              <summary>
              Creates and returns <c>n</c> semi-continuous modeling variables,
              with individually specified type, semi-continuous lower bound, and 
              upper bound.
              </summary>
             <remarks>
              <p>
              This method creates new semi-continuous modeling variables, each with its
              own bounds and type, and returns them in an array.  Variable
              <c>i</c> is constructed with bounds <c>sclb[i]</c> and
              <c>ub[i]</c> and type <c>type[i]</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="n">The number of new semi-continuous variables to create.
              </param>
              <param name="sclb">The semi-continuous lower bounds of the new modeling
                                variables. Variable <c>i</c> is constructed
                                with a semi-continuous lower bound of
                                <c>sclb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables. Variable
                                <c>i</c> is constructed with a type of
                                <c>type[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
              <summary>
              Creates and returns an array of semi-continuous modeling variables 
              with individually specified type, semi-continuous lower bound, 
              upper bound, and name, for column-wise modeling.
              </summary>
             <remarks>
            
              <p>
              This method creates an array of new semi-continuous modeling variables,
              each with the same specified
              bounds and type, and returns them in an array.  The number of
              new variables is determined by the size of the <c>ColumnArray</c>
              argument <c>cols</c>. Each new variable is assigned a separate
              name, where variable <c>i</c> is assigned <c>name[i]</c>.
              The new variables are then installed in existing modeling objects as
              described by the <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <param name="name">The names of the new modeling variables. Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns an array of semi-continuous modeling variables, 
              all with the same type and bounds, for column-wise modeling.
              </summary>
             <remarks>
            
              <p>
              This method creates new semi-continuous modeling variables,
              each with the same specified bounds and type, and returns them in an
              array.  The number of new variables is determined by the size of the
              <c>ColumnArray</c> argument <c>cols</c>. The new
              variables are then installed in existing modeling objects as defined
              by the <c>ColumnArray</c> argument <c>cols</c>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="sclb">The semi-continuous lower bound of the new modeling
                                variables.
              </param>
              <param name="ub">The upper bound of the new modeling variables.
              </param>
              <param name="type">The type of the new modeling variables.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
              <summary>
              Creates and returns an array of semi-continuous modeling variables,
              with individually specified type, semi-continuous lower bound,
              and upper bound, for column-wise modeling.
              </summary>
             <remarks>
             
              <p>
              This method creates new semi-continuous modeling variables,
              each with its own bounds and type, and returns them in an array.  The
              number of new variables is determined by the size of the
              <c>ColumnArray</c> argument <c>cols</c>.  Variable
              <c>i</c> is  constructed with bounds <c>sclb[i]</c> and
              <c>ub[i]</c> and type <c>type[i]</c>. The new variables will
              be installed in existing modeling objects as defined by the
              <c>cols</c> argument.
              </p>
            
              
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining  where
                                to install the new variables.
              </param>
              <param name="sclb">The semi-continuous lower bounds of the new modeling
                                variables. Variable <c>i</c> is constructed
                                with a semi-continuous lower bound of
                                <c>sclb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables.  Variable
                                <c>i</c> is constructed with a type of
                                <c>type[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
              <summary>
              Creates and returns an array of semi-continuous modeling variables,
              with individually specified type, semi-continuous lower bound,
              upper bound, and name, for column-wise modeling.
              </summary>
             <remarks>
             
              <p> 
              This method creates new semi-continuous modeling variables,
              each with its own bounds and type, and returns them in an array.  The
              number of new variables is determined by the size of the
              <c>ColumnArray</c> argument <c>cols</c>.  Variable
              <c>i</c> is  constructed with bounds <c>sclb[i]</c> and
              <c>ub[i]</c> and type <c>type[i]</c>, and it is assigned 
              <c>name[i]</c>. The new variables are installed in existing
              modeling objects as defined by the <c>cols</c> argument.
              </p>
            
              
            
            
            
            
             </remarks>
             <param name="cols">An <c>ColumnArray</c> object defining 
                                where to install the new variables.
              </param>
              <param name="sclb">The semi-continuous lower bounds of the new modeling
                                variables. Variable <c>i</c> is constructed
                                with a semi-continuous lower bound of
                                <c>sclb[i]</c>.
              </param>
              <param name="ub">The upper bounds of the new modeling variables.
                                Variable <c>i</c> is constructed with an
                                upper bound of <c>ub[i]</c>.
              </param>
              <param name="type">The types of the new modeling variables.  Variable
                                <c>i</c> is constructed with a type of
                                <c>type[i]</c>.
              </param>
              <param name="name">The names of the new modeling variables.  Variable
                                <c>i</c> is assigned <c>name[i]</c>.
              </param>
              <returns>The array of new modeling variables.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double[],System.Double[],System.Double,System.Double)">
              <summary>
              Creates an expression node that
              represents a continuous or discontinuous piecewise linear function.
              </summary>
             <remarks>  <p>The piecewise linear function is evaluated at <c>expr</c> and is
              defined by the remaining arguments.  The array <c>points</c>
              contains the n breakpoints for i=1, ... , n-1. The 
              array <c>slopes</c> contains the value of the slope 
              for each piece defined
              by the breakpoints.  The slope of the function for values less than
              <c>points[0]</c> is <c>slopes[0]</c>. Similarly,
              <c>slopes[i]</c> specifies the slope between
              <c>points[i-1]</c> and <c>points[i]</c>.  Thus the array 
              <c>slope</c>
              must have one more element than the array <c>points</c>.</p>
              <p>
              By setting <c>points[i-1] == points[i]</c>, you can
              represent a discontinuous
              piecewise linear function.  In this case, 
              the function will
              make a step of height <c>slopes[i]</c> at position
              <c>points[i-1]</c> to reach <c>point[i]</c>.
              </p><p>
              The values <c>a</c> and <c>fa</c> define the x- and y-
              coordinates of one point of the piecewise linear function.  This point is
              referred to as the anchor point.</p>
            
              
            
            
            
            
             </remarks>
             <param name="expr">An expression specifying where to evaluate the
                                piecewise linear function.
              </param>
              <param name="points">An array of breakpoints for the piecewise linear
                                function.
              </param>
              <param name="slopes">An array of slopes for the piecewise linear function.
              </param>
              <param name="a">First coordinate of the anchor point of the piecewise
                                linear function.
              </param>
              <param name="fa">Second coordinate of the anchor point of the
                                piecewise linear function.
              </param>
              <returns>A piecewise linear function of <c>expr</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double,System.Double)">
              <summary>
              Creates an expression node to represent
              a continuous or discontinuous piecewise linear function.
              </summary>
             <remarks>  <p>The piecewise linear function is evaluated at <c>expr</c> and is
              defined by the remaining arguments.  The array <c>points</c>
              contains breakpoints such that <c>points[i-1]</c> is
              less than or equal to <c> points[i]</c>.
              Only <c>num</c> elements starting with element
              <c>startPoints</c> are considered.  The array <c>slopes</c>
              contains the slope for each piece defined by the breakpoints.  Only
              <c>num+1</c> elements starting with element
              <c>startSlopes</c> are considered.  
              The element <c>slopes[startSlopes]</c>
              specifies the slope of the piecewise linear function for values less than
              <c>points[startPoints]</c>, 
              and <c>slopes[startSlopes+num]</c>
              specifies the slope of the piecewise linear function for values greater
              than <c>points[startPoints+num-1]</c>.  For elements in between,
              <c>slopes[startSlopes+i]</c> specifies the slope between
              <c>points[startPoints+i-1]</c> and
              <c>points[startPoints+i]</c>.</p>
              <p>
              By selecting 
              <c>points[startPoints+i-1] == points[startPoints+i]</c>,
              you can represent 
              a discontinuous piecewise linear function.  At
              <c>points[startPoints+i-1]</c>, it will make a step of height 
              <c>slope[startSlopes+i]</c> to reach points[startPoints+i].
              </p><p>
              The values <c>a</c> and <c>fa</c> define the x and y
              coordinates of one point of the piecewise linear function.  This point is
              referred to as the anchor point.</p>
            
              
            
            
            
            
            
            
            
             </remarks>
             <param name="expr">An expression indicating where to evaluate the
                                piecewise linear function.
              </param>
              <param name="points">An array containing breakpoints that define the
                                piecewise linear function.
              </param>
              <param name="startPoints">An integer indicating the first element in array
                                <c>points</c> to use for the definition
                                of the breakpoints of the piecewise linear function.
              </param>
              <param name="num">The number of breakpoints to use from the array
                                <c>points</c>.  Thus <c>num+1</c> elements
                                of array <c>slopes</c> are used.
              </param>
              <param name="slopes">An array containing the slopes that define the
                                piecewise linear function.
              </param>
              <param name="startSlopes">The first element in array <c>slopes</c> to use
                                for the definition of the slopes of the piecewise
                                linear function.
              </param>
              <param name="a">The first coordinate of the anchor point of the
                                piecewise linear function.
              </param>
              <param name="fa">The second coordinate of the anchor point of the
                                piecewise linear function.
              </param>
              <returns>A piecewise linear function of <c>expr</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double,System.Double[],System.Double[],System.Double)">
              <summary>
              Creates and returns a numeric expression representing 
              a piecewise linear function based on the slope of the 
              first and last segment as well as the coordinates of
              breakpoints.
              </summary>
             <remarks>
              <p>
              This method creates and returns an expression  
              to represent a continuous or discontinuous piecewise linear function. 
              To specify a piecewise linear function, this method supplies the 
              slope of the first segment of the PWL function, the x- and y-coordinates
              of the breakpoints, the slope of the last segment of the PWL function.
              </p>
              <p>
              For samples of piecewise linear functions with images of their graphs, see
              the topic <em>Syntax of piecewise linear functions</em> in the
              <em>CPLEX User's Manual</em>.
              </p>
            
              
            
            
            
             </remarks>
             <param name="expr">An expression indicating where to evaluate 
                                 the piecewise linear function.
              </param>
              <param name="firstSlope">Specifies the slope of the first segment 
                                 of the piecewise linear function.
              </param>
              <param name="points">Array specifying the x-coordinate of each breakpoint.
              </param>
              <param name="values">Array specifying the corresponding y-coordinates of the
                                 breakpoints in the piecewise linear function. 
              </param>
              <param name="lastSlope">Specifies the slope of the last segment of the 
                                 piecewise linear function.</param> 
        </member>
        <member name="M:ILOG.Concert.IMPModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double)">
              <summary>
              Creates and returns a numeric expression representing 
              a piecewise linear function from a range of breakpoints
              specified by their x-coordinate and the slope of the segment.
              </summary>
             <remarks>
              <p>
              This method creates and returns an expression  
              to represent a continuous or discontinuous piecewise linear function
              when only a range of the available breakpoints and segments are needed. 
              </p>
            
             
            
            
            
            
            
            
             </remarks>
             <param name="firstSlope">Specifies the slope of the first segment of the 
                                PWL function. 
             </param>
             <param name="points">An array of the x-coordinates of the breakpoints 
                                of the PWL function.
             </param>
             <param name="startPoints">Specifies the index in the array of 
                                x-coordinates where the relevant breakpoints 
                                begin and in the array of slopes where the
                                relevant slopes begin.
             </param>
             <param name="num">Number of indices to consider in the arrays of 
                                x-coordinates of breakpoints and slopes of segments.
             </param>
             <param name="values">Specifies the slopes of the segments. 
             </param>
             <param name="startSlopes">Specifies the index of the slope to begin.
             </param>
             <param name="lastSlope">Specifies the slope of the last segment of 
                                the PWL function.
             </param>
             <returns>A numeric expression representing the PWL function.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Abs(ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the absolute value of its argument, 
             the expression specified by <c>expr</c>.
             </summary>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar,ILOG.Concert.NumVarType)">
             <summary>
             Creates and returns an <c>IConversion</c> object for converting
             the type of a variable in a model.
             </summary>
            <param name="var">The variable the type of which is to be converted.
             </param>
             <param name="type">The converted type for variable <c>var</c>.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar,ILOG.Concert.NumVarType,System.String)">
             <summary>
             Creates and returns an <c>IConversion</c> object, with
             the specified name, for converting the type of a variable in a model.
             </summary>
            <param name="var">The variable the type of which is to be converted.
             </param>
             <param name="type">The converted type for variable <c>var</c>.
             </param>
             <param name="name">The name of the new <c>IConversion</c> object.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType)">
             <summary>
             Creates and returns an <c>IConversion</c> object for converting
             the type of the variables in array <c>var</c> in a model.
             </summary>
            <param name="var">The array of variables the types of which are to be
                            converted.
             </param>
             <param name="type">The converted type for all variables in <c>var</c>.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType,System.String)">
             <summary>
             Creates and returns an <c>IConversion</c> object with
             the specified type and name, for converting
             the type of the variables in array <c>var</c> in a model.
             </summary>
            <param name="var">The array of variables the types of which are to be
                            converted.
             </param>
             <param name="type">The converted type for all variables in <c>var</c>.
             </param>
             <param name="name">The name of the new <c>IConversion</c> object.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType[])">
             <summary>
             Creates and returns an <c>IConversion</c> object for converting
             the type of the variables in the array <c>var</c> in a model.
             </summary>
            <param name="var">The array of variables the types of which are to be
                            converted.
             </param>
             <param name="type">An array of variable types containing the types to which
                            the variables are converted. The type of variable
                            <c>var[i]</c> is converted to <c>type[i]</c>.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType[],System.String)">
             <summary>
             Creates and returns an <c>IConversion</c> object,
             with the specified name, for converting
             the type of the variables in array <c>var</c> in a model.
             </summary>
            <param name="var">The array of variables the types of which are to be
                            converted.
             </param>
             <param name="type">An array of variable types containing the types to which
                            the variables are converted. The type of variable
                            <c>var[i]</c> is converted to
                            <c>type[i]</c>.
             </param>
             <param name="name">The name of the new <c>IConversion</c> object.
             </param>
             <returns>The new <c>IConversion</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddLPMatrix">
              <summary>
              Creates, returns, and adds to the invoking model
              an empty <c>ILPMatrix</c> object.
              </summary>
             <remarks>  
              <p>
              The new <c>ILPMatrix</c> object is initialized to
              <c>0</c> columns and <c>0</c> rows. It can be populated later
              by the <c>ILPMatrix</c> manipulation API.  The new
              <c>ILPMatrix</c> object is added to the invoking model.
              </p>
            
              </remarks>
              <returns>The new <c>ILPMatrix</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddLPMatrix(System.String)">
              <summary>
              Creates, returns, and adds an empty <c>ILPMatrix</c> object,
              with the specified name, to the invoking model.
              </summary>
             <remarks> 
              <p>
              The new <c>ILPMatrix</c> object is initialized to
              <c>0</c> columns and <c>0</c> rows. It can be populated later
              using the <c>ILPMatrix</c> manipulation API.  The new
              <c>ILPMatrix</c> object is added to the invoking model.
              The new <c>ILPMatrix</c> object is
              assigned <c>name</c>.
              </p>
            
              
             </remarks>
             <param name="name">The name for the new <c>ILPMatrix</c> object.
              </param>
              <returns>The new <c>ILPMatrix</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.LPMatrix">
              <summary>
              Creates and returns an empty <c>ILPMatrix</c> object.
              </summary>
             <remarks>  <p>
              The new <c>ILPMatrix</c> object is initialized to
              0 (zero) columns and 0 (zero) rows. It can be populated
              later by the <c>ILPMatrix</c> manipulation API.
              </p>
            
              </remarks>
              <returns>The new <c>ILPMatrix</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.LPMatrix(System.String)">
              <summary>
              Creates and returns an empty <c>ILPMatrix</c> object with
              the specified name.
              </summary>
             <remarks>
              <p>
              The new <c>ILPMatrix</c> object is initialized to
              0 (zero) columns and 0(zero) rows. It can be populated
              later using the <c>ILPMatrix</c> manipulation API.  The new
              <c>ILPMatrix</c> object is assigned the <c>name</c>.
              </p>
            
              
             </remarks>
             <param name="name">The name for the new <c>ILPMatrix</c> object.
              </param>
              <returns>The new <c>ILPMatrix</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates an SOS of type 1 with the specified variables and weights
             and adds it to the invoking model.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an SOS of type 1 with <c>num</c> of 
             the specified variables and weights, 
             starting from the index specified by <c>start</c>,
             and adds the SOS to the invoking model.
             </summary>
            <param name="var">The array containing the variables in the new SOS.
             </param>
             <param name="val">The array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates an SOS of type 1 with the specified variables, weights,
             and name, and adds the SOS to the invoking model.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates an SOS of type 1 with the <c>num</c> 
             specified variables, weights, and names, starting from the index
             specified by <c>start</c>, and adds the SOS to the invoking mode.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates an SOS of type 2 with the specified variables and weights
             and adds the new SOS to the invoking model.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an SOS of type 2 with <c>num</c> of the 
             specified variables and weights, starting from the index
             specified by <c>start</c>, and adds the SOS to the 
             invoking model.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates an SOS of type 2 with the specified variables, weights, 
             and name, and adds the new SOS to the invoking model.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates an SOS of type 2 with <c>num</c> of the specified 
             variables and weights, starting from the index specified by
             <c>start</c>, and adds the new SOS along with its name
             to the invoking model.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS1(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates an SOS of type 1 with the specified variables and weights.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an SOS of type 1 with the <c>num</c> 
             specified variables and weights, starting from the index specified
             by <c>start</c>.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates an SOS of type 1 with the specified variables and weights
             and names the new SOS.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates an SOS of type 1 with the <c>num</c> 
             specified variables and weights, starting from the index specified
             by <c>start</c>, and assigns the new SOS a name.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS1</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS2(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates an SOS of type 2 with the specified variables and weights.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an SOS of type 2 with the <c>num</c> 
             specified variables and weights, starting from the index specified
             by <c>start</c>.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates an SOS of type 2 with the specified variables and weights, and
             assigns the new SOS its <c>name</c>.
             </summary>
            <param name="var">The variables in the new SOS.
             </param>
             <param name="val">The weight values for the variables in the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates an SOS of type 2 with the <c>num</c> 
             specified variables and weights, starting from the index specified by
             <c>start</c>, and assigns 
             the new SOS its <c>name</c>.
             </summary>
            <param name="var">An array containing the variables in the new SOS.
             </param>
             <param name="val">An array containing the weight values for the variables
                               in the new SOS.
             </param>
             <param name="start">The first element in <c>var</c> and
                               <c>val</c> to use for the new SOS.
             </param>
             <param name="num">The number of consecutive elements in <c>var</c> 
                               and <c>val</c> to use for the new SOS.
             </param>
             <param name="name">The name of the new SOS.
             </param>
             <returns>The new <c>ISOS2</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.IRange,System.Double)">
             <summary>
             Creates an <c>Column</c> object suitable for adding a new
             variable to
             constraint <c>rng</c> as a linear term with coefficient
             <c>val</c>.
             </summary>
            <param name="rng">The range constraint for which to create the column
                               term.
             </param>
             <param name="val">The linear coefficient the new <c>Column</c>
                               will use for adding a new variable to <c>rng</c>.
             </param>
             <returns>The new <c>Column</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IRange,System.Double[])">
             <summary>
             Creates an <c>ColumnArray</c> suitable for adding new variables
             to constraint <c>rng</c> as linear terms with coefficients specified
             in <c>val</c>.
             </summary>
            <param name="rng">The range constraint for which to create the column
                               array term.
             </param>
             <param name="val">The linear coefficient the <c>ColumnArray</c>
                               will use for adding new variables to <c>rng</c>.
             </param>
             <returns>The new <c>ColumnArray</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IRange,System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an <c>ColumnArray</c> suitable for adding
             <c>num</c> new variables to constraint <c>IRange</c> as
             linear terms with coefficients specified in <c>val</c>.
             </summary>
            <param name="rng">The range constraint for which to create the column
                               array term.
             </param>
             <param name="val">An array containing the linear coefficients the
                               <c>ColumnArray</c> will use for adding new
                               variables to <c>rng</c>.
             </param>
             <param name="start">The first element in <c>val</c> to use.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> 
                               to use.
             </param>
             <returns>The new <c>ColumnArray</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.IObjective,System.Double)">
             <summary>
             Creates an <c>Column</c> object suitable for adding a new
             variable to the objective <c>obj</c> as a linear term with
             coefficient <c>val</c>.
             </summary>
            <param name="obj">The objective for which to create the column term.
             </param>
             <param name="val">The linear coefficient the new <c>Column</c>
                               will use for adding a new variable to <c>obj</c>.
             </param>
             <returns>The new <c>Column</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IObjective,System.Double[])">
             <summary>
             Creates an <c>ColumnArray</c> object suitable for adding new
             variables to the objective <c>obj</c> as linear terms with
             coefficients specified in <c>val</c>.
             </summary>
            <param name="obj">The objective for which to create the column array term.
             </param>
             <param name="val">The linear coefficients the <c>ColumnArray</c>
                               will use for adding new variables to <c>obj</c>.
             </param>
             <returns>The new <c>ColumnArray</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IObjective,System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates an <c>ColumnArray</c> object suitable for adding
             <c>num</c> new variables to the objective <c>obj</c> as
             linear terms with coefficients specified in <c>val</c>.
             </summary>
            <param name="obj">The objective for which to create the column array term.
             </param>
             <param name="val">An array containing the linear coefficients the
                               <c>ColumnArray</c> will use for adding new
                               variables to <c>obj</c>.
             </param>
             <param name="start">The first element in <c>val</c> to use.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> 
                               to use.
             </param>
             <returns>The new <c>ColumnArray</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.ILPMatrix)">
              <summary>
              Creates an <c>Column</c> object suitable for adding a new
              variable to an LP matrix as an empty column.
              </summary>
             <remarks> Note, that the column of
              the LP matrix is only created when creating a variable with the returned
              <c>Column</c> object but not when calling this method.
            
              
             </remarks>
             <param name="lp">The <c>ILPMatrix</c> object for which to create
                                the new column.
              </param>
              <returns>The new <c>Column</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.ILPMatrix,System.Int32[],System.Double[])">
              <summary>
              Creates an <c>Column</c> object suitable for adding a new
              variable to an LP matrix as a new column.
              </summary>
             <remarks> Note, that the column of the
              LP matrix is only created when creating a variable with the returned
              <c>Column</c> object but not when calling this method.
            
              
            
            
             </remarks>
             <param name="lp">The <c>ILPMatrix</c> object for which to create
                                the new column.
              </param>
              <param name="ind">An array of indices indicating the row indices of the
                                nonzeros in the new column. Indices may not occur
                                multiple times in this list and must be in the range
                                <c>0</c> through <c>lp.GetNcols()-1</c>.
              </param>
              <param name="val">An array of values indicating the value of the nonzero
                                entries for the column.
              </param>
              <returns>An <c>Column</c> object suitable for creating
                                a new column in <c>lp</c> with nonzeros as
                                specified by the arguments <c>ind</c> and
                                <c>val</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.ILPMatrix,System.Int32[],System.Double[],System.Int32,System.Int32)">
              <summary>
              Creates an <c>Column</c> object suitable for adding a new
              variable to an LP matrix as a new column.
              </summary>
             <remarks> Note, that the column of the
              LP matrix is only created when creating a variable with the returned
              <c>Column</c> object but not when calling this method.
            
              
            
            
            
            
             </remarks>
             <param name="lp">The <c>ILPMatrix</c> object for which to create
                                the new column.
              </param>
              <param name="ind">An array containing the indices indicating the row
                                indices of the nonzeros in the new column. Indices
                                may not occur multiple times in this list and must be
                                in the range <c>0</c> through
                                <c>lp.GetNcols()-1</c>.
              </param>
              <param name="val">An array containing values indicating the value of the
                                nonzero entries for the column.
              </param>
              <param name="start">The index of the first element in arrays
                                <c>ind</c> and <c>val</c> to use.
              </param>
              <param name="num">The number of consecutive elements in arrays 
                                <c>ind</c> and <c>val</c> to use.
              </param>
              <returns>An <c>Column</c> object suitable for creating
                                a new column in <c>lp</c> with nonzeros as
                                specified in arguments <c>ind</c> and
                                <c>val</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.ILPMatrix,System.Int32,System.Int32[][],System.Double[][])">
              <summary>
              Creates an <c>ColumnArray</c> object suitable for adding new
              variables to an <c>ILPMatrix</c> as columns.
              </summary>
             <remarks> The procedure is
              as follows: You create an <c>ColumnArray</c> from an
              <c>ILPMatrix</c> by calling <c>columnArray()</c> with the
              list of nonzeros for each new column given in arrays <c>ind</c> and
              <c>val</c>.  You optionally combine this column array with
              <c>ColumnArray</c> objects created for other modeling objects.
              Then you create an array of variables by passing the so constructed
              <c>ColumnArray</c> object to the appropriate method of the
              <c>IMPModeler</c> you use.
            
              
            
            
            
             </remarks>
             <param name="lp">The <c>ILPMatrix</c> object for which to create
                                the new column array term.
              </param>
              <param name="num">The size of the column array term to create or,
                                equivalently, the number of consecutive elements in
                                <c>ind</c> and <c>val</c> to use.
              </param>
              <param name="ind">An array of arrays of row indices of the nonzeros
                                for each of the new columns.  Indices may not occur
                                multiple times within one column, and they must be in
                                the range  <c>0</c> through
                                <c>lp.GetNcols()-1</c>.
              </param>
              <param name="val">An array of arrays of values of the nonzeros for each
                                of the new columns.
              </param>
              <returns>An <c>ColumnArray</c> object suitable for
                                creating new columns in the LP matrix <c>lp</c>
                                as specified by arguments <c>ind</c> and
                                <c>val</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.ILPMatrix,System.Int32)">
             <summary>
             Creates an <c>ColumnArray</c> object suitable for adding new
             variables to an <c>ILPMatrix</c> as empty columns.
             </summary>
            <param name="lp">The <c>ILPMatrix</c> object for which to create
                               the new column.
             </param>
             <param name="num">The size of the new column array term to create.
             </param>
             <returns>An <c>ColumnArray</c> object suitable for
                               creating <c>num</c> empty columns to the
                               <c>ILPMatrix</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddToExpr(ILOG.Concert.IObjective,ILOG.Concert.INumExpr)">
             <summary>
             Adds a term (which may be an expression itself)
             to the expression of the specified
             <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="expr">The new expression to add.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoef(ILOG.Concert.IObjective,System.Double,ILOG.Concert.INumVar)">
             <summary>
             Sets linear coefficient for variable <c>var</c> to <c>val</c>
             in the expression of the specified <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="val">The coefficient to set.
             </param>
             <param name="var">The variable for which to set the coefficient.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoef(ILOG.Concert.IObjective,ILOG.Concert.INumVar,System.Double)">
             <summary>
             Sets linear coefficient for variable <c>var</c> to <c>val</c>
             in the expression of the specified <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="var">The variable for which to set the coefficient.
             </param>
             <param name="val">The coefficient to set.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IObjective,System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="val">The array of linear coefficient values. The linear
                               coefficient of variable <c>var[i]</c> is set
                               to <c>val[i]</c>.
             </param>
             <param name="var">The array of variables for which to set linear
                               coefficients.  A variable may only appear once in this
                               array.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IObjective,ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="val">The array of linear coefficient values. The linear
                               coefficient of variable <c>var[i]</c> is set
                               to <c>val[i]</c>.
             </param>
             <param name="var">The array of variables for which to set linear
                               coefficients.  A variable may only appear once in this
                               array.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IObjective,System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="val">The array containing linear coefficient values.  The
                               linear coefficient of variable <c>var[i]</c> is
                               set to <c>val[i]</c>.
             </param>
             <param name="var">The array containing the variables for which to set
                               linear coefficients. A variable may only appear once
                               in this array.
             </param>
             <param name="start">The first element in <c>val</c> and
                               <c>var</c> to use for setting coefficients.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> 
                               and <c>var</c> to use for setting coefficients.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IObjective,ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="var">An array containing the variables for which to set
                               linear coefficients. A variable may only appear once
                               in this array.
             </param>
             <param name="val">An array containing linear coefficient values.  The
                               linear coefficient of variable <c>var[i]</c> is
                               set to <c>val[i]</c>.
             </param>
             <param name="start">The first element in <c>val</c> and
                               <c>var</c> to use for setting coefficients.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> 
                               and <c>var</c> to use for setting coefficients.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.AddToExpr(ILOG.Concert.IRange,ILOG.Concert.INumExpr)">
             <summary>
             Adds a term (which may be an expression itself)
             to the expression of the specified
             <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="expr">The expression to add.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoef(ILOG.Concert.IRange,System.Double,ILOG.Concert.INumVar)">
             <summary>
             Sets linear coefficient for variable <c>var</c> to <c>val</c>
             in the expression of the specified <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="val">The coefficient to set.
             </param>
             <param name="var">The variable for which to set the coefficient.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoef(ILOG.Concert.IRange,ILOG.Concert.INumVar,System.Double)">
             <summary>
             Sets linear coefficient for variable <c>var</c> to <c>val</c>
             in the expression of the specified <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="val">The coefficient to set.
             </param>
             <param name="var">The variable for which to set the coefficient.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IRange,System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="val">The array of linear coefficient values.  The linear
                           coefficient of variable <c>var[i]</c> is set
                           to <c>val[i]</c>.
             </param>
             <param name="var">The array of variables for which to set linear coefficients.
                           A variable may only appear once in this array.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IRange,ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="var">The array of variables for which to set linear coefficients.
                           A variable may only appear once in this array.
             </param>
             <param name="val">The array of linear coefficient values. The linear
                           coefficient of variable <c>var[i]</c> is set
                           to <c>val[i]</c>.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IRange,System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="val">An array containing linear coefficient values.  The linear
                           coefficient of variable <c>var[i]</c> is set to
                           <c>val[i]</c>.
             </param>
             <param name="var">An array containing the variables for which to set linear
                           coefficients. A variable may only appear once in this
                           array.
             </param>
             <param name="start">The first element in <c>val</c> and <c>var</c>
                           to use for setting coefficients.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> and
                           <c>var</c> to use for setting coefficients.</param>
        </member>
        <member name="M:ILOG.Concert.IMPModeler.SetLinearCoefs(ILOG.Concert.IRange,ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Sets linear coefficients for variables in the expression of the specified
             <c>IRange</c> object.
             </summary>
            <param name="rng">The range constraint to modify.
             </param>
             <param name="var">An array containing the variables for which to set linear
                           coefficients. A variable may only appear once in this
                           array.
             </param>
             <param name="val">An array containing linear coefficient values.  The linear
                           coefficient of variable <c>var[i]</c> is set
                           to <c>val[i]</c>.
             </param>
             <param name="start">The first element in <c>val</c> and <c>var</c>
                           to use for setting coefficients.
             </param>
             <param name="num">The number of consecutive elements in <c>val</c> and
                           <c>var</c> to use for setting coefficients.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IMPModeler.SetQuadCoef(ILOG.Concert.IObjective,System.Double,ILOG.Concert.INumVar,ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.Concert.IMPModeler.SetQuadCoef(ILOG.Concert.IObjective,ILOG.Concert.INumVar,ILOG.Concert.INumVar,System.Double)">
             <summary>
             Sets quadratic coefficient for variable <c>var1*var2</c> to <c>val</c>
             in the expression of the specified <c>IObjective</c> object.
             </summary>
            <param name="obj">The objective to modify.
             </param>
             <param name="var1">The first variable for which to set the coefficient.
             </param>
             <param name="var2">The second for which to set the coefficient.
             </param>
             <param name="val">The coefficient to set.</param>
        </member>
        <member name="T:ILOG.Concert.IloSetModeler">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSet(System.Int32,System.Int32)">
              <summary>
              Creates and returns a new integer set containing all the values
              in the <c>[min..Max]</c> interval.
              </summary>
             <remarks>  This set can then be used to create integer set variables.
              
            
             </remarks>
             <param name="min">the minimum value in the set
              </param>
              <param name="max">the maximum value in the set
              </param>
              <returns>the newly created set</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSet(System.Int32[])">
             <summary>
             Creates and returns a new integer set containing all the values
             of the supplied array of integers.
             </summary>
            <param name="values">the values of the set
             </param>
             <returns>the newly created set</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(ILOG.Concert.IloIntSet,System.String)">
             <summary>
             Creates and returns a new integer set variable
             with a possible set and a name.
             </summary>
            <param name="possible">the initial possible set of values
             </param>
             <param name="name">the name of the new variable
             </param>
             <returns>the newly created set variable</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(ILOG.Concert.IloIntSet)">
             <summary>
             Creates and returns a new integer set variable with a possible set.
             </summary>
            <param name="possible">the initial possible set of values
             </param>
             <returns>the newly created set variable</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32,System.Int32)">
             <summary>
             Creates and returns a new integer set variable with
             possible values between <c>min</c> and <c>max</c>.
             </summary>
            <param name="min">minimum of possible values
             </param>
             <param name="max">maximum of possible values
             </param>
             <returns>the newly created set variable</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32,System.Int32,System.String)">
             <summary>
             Creates and returns a new integer set variable with
             possible values between <c>min</c> and <c>max</c>.
             </summary>
            <param name="min">Minimum of possible values.
             </param>
             <param name="max">Maximum of possible values.
             </param>
             <param name="name">The name of the new variable.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32[],System.String)">
             <summary>
             Creates and returns a new integer set variable with an array of possible values and a name.
             </summary>
            <param name="possible">The array of initially possible values.
             </param>
             <param name="name">The name of the new variable.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32[])">
             <summary>
             Creates and returns a new integer set variable with an array of possible values.
             </summary>
            <param name="possible">The array of initially possible values.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSet,System.String)">
             <summary>
             Creates and returns a new integer set variable with a possible set,
             a required set and a name.
             </summary>
            <param name="possible">The initial possible set of values.
             </param>
             <param name="required">The initial required set of values.
             </param>
             <param name="name">The name of the new variable.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSet)">
             <summary>
             Creates and returns a new integer set variable with a possible set and a required set.
             </summary>
            <param name="possible">The initial possible set of values.
             </param>
             <param name="required">The initial required set of values.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32[],System.Int32[],System.String)">
             <summary>
             Creates and returns a new integer set variable with an array of possible values,
             an array of required values and a name.
             </summary>
            <param name="possibleArray">The array of initially possible values.
             </param>
             <param name="requiredArray">The array of initially required values.
             </param>
             <param name="name">The name of the new variable.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVar(System.Int32[],System.Int32[])">
             <summary>
             Creates and returns a new integer set variable with an array of possible values
             and an array of required values.
             </summary>
            <param name="possibleArray">The array of initially possible values.
             </param>
             <param name="requiredArray">The array of initially required values.
             </param>
             <returns>The newly created set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.IntSetVarArray(System.Int32)">
             <summary>
             Creates and return a new array of int set variables.
             </summary>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Intersect(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that variables <c>var1</c>
             and <c>var2</c> have a non-empty intersection.
             </summary>
            <param name="var1">The first variable.
             </param>
             <param name="var2">The second variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.NullIntersect(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the intersection between
             the two integer set variables <c>var1</c> and <c>var2</c> is
             empty.
             </summary>
            <param name="var1">The first integer set variable.
             </param>
             <param name="var2">The second integer set variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.EqUnion(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the integer set
             variable <c>union</c> is equal to the union of the other two
             integer set variables <c>var1</c> and <c>var2</c>.
             </summary>
            <param name="union">The union integer set variable.
             </param>
             <param name="var1">The first integer set variable.
             </param>
             <param name="var2">The second integer set variable.
             </param>
             <returns>The newly created constraint set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.EqIntersection(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the integer set
             variable <c>intersection</c> is equal to the intersection of the
             other two integer set variables <c>var1</c> and
             <c>var2</c>.
             </summary>
            <param name="intersection">The intersection integer set variable.
             </param>
             <param name="var1">The first integer set variable.
             </param>
             <param name="var2">The second integer set variable.
             </param>
             <returns>The newly created constraint set variable.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Member(System.Int32,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the value <c>val</c>
             is contained in the set variable.
             </summary>
            <param name="val">The value.
             </param>
             <param name="setVar">The set variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.NotMember(System.Int32,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the value <c>val</c>
             is not contained in the set variable.
             </summary>
            <param name="val">The value.
             </param>
             <param name="setVar">The set variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Eq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that variables <c>var1</c>
             and <c>var2</c> are equal, that is, they contain exactly the same elements.
             </summary>
            <param name="var1">The first variable.
             </param>
             <param name="var2">The second variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Eq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
             <summary>
             Creates and returns a constraint stating that the variable <c>var</c>
             is equal to the integer set <c>set</c>, that is, all the elements
             from the set are contained in the variable and no element not in the set
             is contained in the variable.
             </summary>
            <param name="var">The variable.
             </param>
             <param name="set">The integer set.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Eq(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the integer set <c>set</c>
             is equal to the variable <c>var</c>, that is, all the elements
             from the set are contained in the variable and no element not in the set
             is contained in the variable.
             </summary>
            <param name="set">The integer set.
             </param>
             <param name="var">The variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Neq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that variables <c>var1</c>
             and <c>var2</c> are not equal, that is, at least one of the elements
             contained in one set is not contained in the other set.
             </summary>
            <param name="var1">The first variable.
             </param>
             <param name="var2">The second variable.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Neq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
             <summary>
             Creates and returns a constraint stating that the variable <c>var</c>
             is not equal to the integer set <c>set</c>, that is, there is at least one
             element from the set that is not contained in the variable or one element
             contained in the variable that is not in the set.
             </summary>
            <param name="var">The variable.
             </param>
             <param name="set">The integer set.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Neq(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns a constraint stating that the variable <c>var</c>
             is not equal to the integer set <c>set</c>, that is, there is at least one
             element from the set that is not contained in the variable or one element
             contained in the variable that is not in the set.
             </summary>
            <param name="var">The variable.
             </param>
             <param name="set">The integer set.
             </param>
             <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.SubsetEq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <summary>
              Creates and returns a constraint stating that the variable <c>var1</c>
              is a subset of the variable <c>var2</c>.
              </summary>
             <remarks>(The variables may be equal.)
              
            
             </remarks>
             <param name="var1">The first variable.
              </param>
              <param name="var2">The second variable.
              </param>
              <returns>The newly created constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Cardinality(ILOG.Concert.IloIntSetVar)">
             <summary>
             Returns an integer expression representing the cardinality of
             the integer set variable <c>var</c>.
             </summary>
            <param name="var">the variable</param>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Max(ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns an integer expression equal to the maximum element
             contained in the integer set variable.
             </summary>
            <param name="var">The integer set variable.
             </param>
             <returns>The newly created integer expression.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Max(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
             <summary>
             Creates and returns an integer expression equal to the maximum image through
             a function of the elements contained in the integer set variable.
             </summary>
            <param name="func">The function.
             </param>
             <param name="var">The integer set variable.
             </param>
             <returns>The newly created integer expression.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Min(ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns an integer expression equal to the minimum element
             contained in the integer set variable.
             </summary>
            <param name="var">The integer set variable.
             </param>
             <returns>The newly created integer expression.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Min(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
             <summary>
             Creates and returns an integer expression equal to the minimum image through
             a function of the elements contained in the integer set variable.
             </summary>
            <param name="var">The integer set variable.
             </param>
             <param name="func">The function.
             </param>
             <returns>The newly created integer expression.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Sum(ILOG.Concert.IloIntSetVar)">
             <summary>
             Creates and returns an integer expression equal to the sum
             of the elements contained in the integer set variable.
             </summary>
            <param name="var">The integer set variable.
             </param>
             <returns>The newly created integer expression.</returns>
        </member>
        <member name="M:ILOG.Concert.IloSetModeler.Sum(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
              <summary>
              Creates and returns an integer expression
              equal to the sum of the elements of an integer set variable.
              </summary>
             <remarks>  The sum is computed after the values returned by a function
              are applied to the set variable.
             
            
             </remarks>
             <param name="var">The integer set variable.
             </param>
             <param name="func">The function.
             </param>
             <returns>The newly created finteger expression.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetModel">
             <summary>
             <p>Returns the active model.</p>
             </summary>
            <returns>The active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetModel(ILOG.Concert.IModel)">
             <summary>
             Sets <c>model</c> as the active model.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetName">
             <summary>
             Returns the name of the invoking model, if there is one.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetName(System.String)">
             <summary>
             Sets <c>str</c> as the name of the invoking model.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Add(ILOG.Concert.IAddable)">
              <summary>
              Adds <c>object</c> to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Add(ILOG.Concert.IAddable[])">
              <summary>
              Adds the array of <c>objects</c> to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Add(ILOG.Concert.IAddable[],System.Int32,System.Int32)">
              <summary>
              Adds part of the array of <c>objects</c> to the invoking model, 
              starting with the index <c>start</c> and continuing to
              the number of objects specified by <c>num</c>.
              </summary>
             <remarks>  <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Remove(ILOG.Concert.IAddable)">
             <summary>
             Removes <c>object</c> from the invoking model.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Remove(ILOG.Concert.IAddable[])">
             <summary>
             Removes the array of <c>objects</c> from the invoking model.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Remove(ILOG.Concert.IAddable[],System.Int32,System.Int32)">
             <summary>
             Removes part of the array of <c>objects</c> from the
             invoking model, starting with the index <c>start</c> and
             continuing to the number of objects specified by <c>num</c>.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetEnumerator">
              <summary>
              Returns an enumerator suitable for the invoking model.
              </summary>
             <remarks>  
              <p>
              
              </p>
            
              <p>This enumerator traverses only those objects explicitly added
              to the model. Range objects implement the interface
              
               NumVar 
              because indicator variables can be associated with a constraint.
              Consequently, this enumerator treats a range object added to a model
              as an instance of a range and an instance of a numeric variable.
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(System.Double,System.Double,ILOG.Concert.NumVarType)">
             <summary>
             Creates and returns a numeric variable with bounds and specified type.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
            <summary>
            Creates and returns a named numeric variable with bounds and specified type.
            </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType)">
             <summary>
             Creates and returns an array of numeric variables, all with same 
             specified bounds, all of the same type.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
             <summary>
             Creates and returns an array of numeric variables, all with same
             specified bounds, all with same type, and individual names.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
             <summary>
             Creates and returns an array of numeric variables with individual
             bounds and types.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
             <summary>
             Creates and returns an array of numeric variables, all with
             individual specified bounds, types, and names.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(System.Double,System.Double,System.String)">
             <summary>
             Creates and returns a numeric variable with specified bounds and name.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(System.Double,System.Double)">
             <summary>
             Creates and returns a numeric variable with specified bounds.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double,System.Double)">
             <summary>
             Creates an array of numeric variables, all with the same upper
             and lower bound.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double[],System.Double[])">
             <summary>
             Creates an array of numeric variables with individually specified upper
             and lower bounds.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double,System.Double,System.String[])">
             <summary>
             Creates an array of numeric variables, all with the same upper and
             lower bound, but with individually specified names.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(System.Int32,System.Double[],System.Double[],System.String[])">
             <summary>
             Creates an array of numeric variables, each with individually specified  
             upper bound, lower bound, and name.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVar(System.Int32,System.Int32,System.String)">
             <summary>
             Creates and returns an integer variable with specified 
             upper bound, lower bound, and name.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVar(System.Int32,System.Int32)">
             <summary>
             Creates and returns an integer variable with specified 
             upper and lower bound.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates and returns an array of integer variables with the same specified 
             upper and lower bound.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(System.Int32,System.Int32[],System.Int32[])">
             <summary>
             Creates and returns an array of integer variables with 
             individually specified upper and lower bounds.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(System.Int32,System.Int32,System.Int32,System.String[])">
             <summary>
             Creates and returns an array of integer variables all with the same
             upper and lower bound, but individually specified names.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(System.Int32,System.Int32[],System.Int32[],System.String[])">
             <summary>
             Creates and returns an array of integer variables each with 
             individually specified upper bound, lower bound, and name.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVar(System.String)">
             <summary>
             Creates and returns a new Boolean variable (domain 0,1) 
             with the specified name.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVar">
             <summary>
             Creates and returns a new Boolean variable (domain 0,1).
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CplexModeler.BoolVarArray(System.Int32)" -->
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVarArray(System.Int32,System.String[])">
             <summary>
             Creates and returns an array of n new Boolean variables (domain 0,1) 
             each with an individually specified name.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Minimize(ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns an objective to minimize the expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Maximize(ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named objective to minimize the expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Objective(ILOG.Concert.ObjectiveSense,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named objective with a sense (maximize or minimize).
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Minimize(ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns an objective from an expression.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Maximize(ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns an objective from an expression.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Objective(ILOG.Concert.ObjectiveSense,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns an objective from an expression
             to optimize in the specified sense.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddObjective(ILOG.Concert.ObjectiveSense,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns an objective to optimize the expression 
              with respect to the sense and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMinimize(ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns an objective to minimize the expression 
              and adds it to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMaximize(ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns an objective to maximize the expression 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddObjective(ILOG.Concert.ObjectiveSense,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns an objective to optimize the expression 
              in the specified sense and adds the objective to the invoking model.
              </summary>
             <remarks>
              <p>
             
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LinearNumExpr">
             <summary>
             Creates and returns a zero-valued linear expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LinearNumExpr(System.Double)">
             <summary>
             Creates and returns a linear expression initialized as the constant.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the provided values with the provided variables.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the provided variables with the provided values.
             </summary>
            <remarks> 
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the values and variables provided 
             in the specified range of indices.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the variables and values provided 
             in the specified range of indices.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Int32[],ILOG.Concert.INumVar[])">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the integer values and numeric variables provided.
             </summary>
            <remarks>
             
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],System.Int32[])">
             <summary>
             Creates and returns a linear expression representing 
             the scalar product of the numeric variables and integer values provided.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LinearIntExpr(System.Int32)">
             <summary>
             Creates and returns an integer linear expression 
             initialized as a constant.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Int32[],ILOG.Concert.IIntVar[])">
             <summary>
             Creates and returns a linear integer expression 
             representing the scalar product of the provided 
             integer values and integer variables.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.IIntVar[],System.Int32[])">
             <summary>
             Creates and returns a linear integer expression 
             representing the scalar product of the provided 
             integer variables and integer values.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Int32[],ILOG.Concert.IIntVar[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a linear integer expression 
             representing the scalar product of the provided 
             integer values and integer variables from the specified
             range of indices.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.IIntVar[],System.Int32[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a linear integer expression 
             representing the scalar product of the provided 
             integer variables and integer values from the specified
             range of indices.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[])">
            <summary>
            Creates and returns a linear expression representing the scalar product
            of the given variables.
            </summary>
            <param name="vars1">The first array of variables involved in the new scalar
                              product expression.
            </param>
            <param name="vars2">The second array of variables involved in the new scalar 
                              product expression.
            </param>
            <returns>Returns a linear expression representing a scalar product.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[],System.Int32,System.Int32)">
            <summary>
            Creates and returns a linear expression representing the scalar product
            of the given variables.
            </summary>
            <param name="vars1">The first array of variables involved in the new scalar
                              product expression.
            </param>
            <param name="vars2">The second array of variables involved in the new scalar 
                              product expression.
            </param>
            <param name="start">Index of the term to start the multiplication.
            </param>
            <param name="num">Number of consecutive terms to multiply, starting
                              from the index specified by <c>start</c>.
            </param>
            <returns>The new linear expression.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Negative(ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a new numeric expression which is the
             negation of the original expression.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns an expression representing 
             the sum of a numeric expression and a value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns an expression representing 
             the sum of two numeric expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of a value and a numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a numeric expression representing
              the sum of three numeric expressions.
              </summary>
             <remarks> 
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of four numeric expressions.
             </summary>
            <remarks> 
             
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of five numeric expressions.
             </summary>
            <remarks> 
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of six numeric expressions.
             </summary>
            <remarks> 
             
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of seven numeric expressions.
             </summary>
            <remarks> 
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing
             the sum of eight numeric expressions.
             </summary>
            <remarks> 
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(ILOG.Concert.IIntExpr,System.Int32)">
             <summary>
             Creates and returns an integer expression representing the
             difference between an integer expression and an integer value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns a numeric expression representing the
             difference between a numeric expression and a value.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing the
             difference between two numeric expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a numeric expression representing the
             difference between a value and a numeric expression.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And">
             <summary>
             Groups constraints together.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint[])">
             <summary>
             Groups constraints together.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint[],System.String)">
             <summary>
             Groups constraints together.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint[],System.Int32,System.Int32)">
             <summary>
             Groups together part of the constraints in the array <c>cons</c>
             starting with the index specified by <c>start</c> and continuing
             to the number of constraints specified by <c>num</c>.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint[],System.Int32,System.Int32,System.String)">
             <summary>
             Groups together part of the constraints from the array <c>cons</c>
             starting with the index specified by <c>start</c> and
             continuing to the number of constraints specified by <c>num</c>.
             </summary>
            <remarks> 
             <p>This method assigns the string <c>name</c> to the group.</p>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint)">
             <summary>
             Groups together the constraints specified by its arguments.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.And(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint,System.String)">
             <summary>
             Groups together the constraints specified by its arguments and
             assigns the string <c>name</c> to the group.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or">
             <summary>
             Returns a constraint that at least one and possibly more than one
             of the elements is true in its argument <c>cons</c>, an array
             of constraints.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint[])">
             <summary>
             Returns a constraint that at least one and possibly more than one
             of the elements is true in its argument <c>cons</c>, an array
             of constraints.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint[],System.String)">
             <summary>
             Returns a constraint that at least one and possibly more than one
             of the elements is true in its argument <c>cons</c>, an array
             of constraints and also assigns the string <c>name</c> as the
             name of that returned constraint.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint[],System.Int32,System.Int32)">
             <summary>
             Returns a constraint that at least one and possibly more than one
             of the elements is true in the range of indices starting at the index
             specified by <c>start</c> and continuing through the number
             of elements specified by the number <c>num</c> among the elements
             of its argument <c>cons</c>, an array of constraints.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint[],System.Int32,System.Int32,System.String)">
             <summary>
             Returns a constraint that at least one and possibly more than one
             of the elements is true in the range of indices starting at the index
             specified by <c>start</c> and continuing through the number
             of elements specified by the number <c>num</c> among the elements
             of its argument <c>cons</c>, an array of constraints;
             also assigns the string <c>name</c> as the name of
             the returned constraint.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint)">
             <summary>
             Returns a constraint that at least one and possibly both of its 
             arguments are true.
             </summary>
            <remarks>
            
             <p>
             In other words, it returns the logical-or of
             two constraints.</p>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Or(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint,System.String)">
             <summary>
             Returns a constraint that at least one and possibly both of its 
             arguments are true.
             </summary>
            <remarks>
            
             <p>In other words, it returns the logical-or of
             two constraints. It also assigns the string <c>name</c> as
             the name of that returned constraint.</p>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IfThen(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint)">
             <summary>
             Returns a constraint that if <c>con1</c> is true, then 
             <c>con2</c> must also be true.
             </summary>
            <remarks>
            
             <p>
             In other words, it returns
             a conditional constraint based on its arguments.
             </p>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IfThen(ILOG.Concert.IConstraint,ILOG.Concert.IConstraint,System.String)">
             <summary>
             Returns a constraint that if <c>con1</c> is true, then 
             <c>con2</c> must also be true.
             </summary>
            <remarks>
             
             <p>In other words, it returns
             a conditional constraint based on its arguments. Also assigns
             the string <c>name</c> as the name of the returned constraint.</p>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Not(ILOG.Concert.IConstraint)">
             <summary>
             Returns a constraint that is the logical negation of its argument.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Not(ILOG.Concert.IConstraint,System.String)">
             <summary>
             Returns a constraint that is the logical negation of its argument 
             and assigns the string <c>name</c> as the name of the
             returned constraint.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSet(System.Int32,System.Int32)">
             <summary>
             Creates and returns a set of integers in which the minimum
             element is <c>min</c>, the maximum element is 
             <c>max</c>, and all integers between <c>min</c> and
             <c>max</c> are included in the possible set.
             </summary>
             <remarks>
              <p>
             In other words, this method turns an interval of integers into a
             set of integers.
             Such a set of integers is useful, for example, in creating variables
             for which the values are sets of integers 
             (that is, integer set variables).
              </p>
            
              
            
             </remarks>
             <param name="min">The minimum possible value in the set.
              </param>
              <param name="max">The maximum possible value in the set.
              </param>
              <returns>The newly created set.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSet(System.Int32[])">
             <summary>
             Creates and returns a set of integers populated by 
             <c>values</c>, an array of integers.
             </summary>
             <remarks>
            
              <p>
             In other words, this method turns an array of integers 
             into a set of integers.
             Such a set of integers is useful, for example, in creating variables
             for which the values are sets of integers 
             (that is, integer set variables).
              </p>
             
             </remarks>
             <param name="values">The array of integers to put into the set.
             </param>
             <returns>The newly created set.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(ILOG.Concert.IloIntSet,System.String)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSet,System.String)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32[])">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32[],System.String)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32,System.Int32)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32,System.Int32,System.String)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32[],System.Int32[])">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVar(System.Int32[],System.Int32[],System.String)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntSetVarArray(System.Int32)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Member(System.Int32,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NotMember(System.Int32,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Cardinality(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Card(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqSum(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqSum(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqSum(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMin(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMin(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMin(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMax(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMax(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqMax(ILOG.Concert.IloIntSetVar,ILOG.Concert.INumVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToIntFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntToNumFunction)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Subset(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Subset(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Subset(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SubsetEq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SubsetEq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SubsetEq(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqUnion(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.EqIntersection(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NullIntersect(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Intersect(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Neq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Neq(ILOG.Concert.IloIntSetVar,ILOG.Concert.IloIntSet)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Neq(ILOG.Concert.IloIntSet,ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(System.Double,ILOG.Concert.INumVar,ILOG.Concert.INumVar)">
             <summary>
             Creates and returns an expression representing 
             the product of a value and two numeric variables.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.INumVar,System.Double,ILOG.Concert.INumVar)">
             <summary>
             Creates and returns an expression representing 
             the product of a numeric variable, a value, and another numeric variable.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.INumVar,ILOG.Concert.INumVar,System.Double)">
             <summary>
             Creates and returns an expression representing 
             the product of two numeric variables and a value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns an expression representing 
             the product of a numeric expression and a value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns an expression representing 
             the product of two numeric expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns an expression representing 
             the product of a value and a numeric expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Square(ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns an expression representing 
             the square of a numeric expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Constant(System.Double)">
             <summary>
             Creates and returns an expression representing 
             a constant term.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumExpr">
             <summary>
             Creates and returns an empty expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Negative(ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns a new integer expression representing 
             the negation of its argument.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,System.Int32)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of an integer expression and a value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(System.Int32,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of a value and an integer expression.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of two integer expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of three integer expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of four integer expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of five integer expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of six integer expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of seven integer expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the sum of eight integer expressions.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an expression representing 
             the difference between two integer expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Diff(System.Int32,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an expression representing 
             the difference between a value and an integer expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.IIntExpr,System.Int32)">
             <summary>
             Creates and returns an expression representing 
             the product of an integer expression and a value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an expression representing 
             the product of two integer expressions.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Prod(System.Int32,ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the product of a value and an integer expression.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Square(ILOG.Concert.IIntExpr)">
             <summary>
             Creates and returns an integer expression representing 
             the square of an integer expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Constant(System.Int32)">
             <summary>
             Creates and returns an integer expression representing 
             a constant integer value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntExpr">
             <summary>
             Creates and returns an empty integer expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a numeric variable representing
              a column with specified lower and upper bounds as well as type.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a named numeric variable representing
              a column with specified lower and upper bounds as well as type.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType)">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with specified lower and upper bounds 
             as well as type.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with specified lower and upper bounds 
             as well as a type and individual names.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with individually specified lower and upper bounds 
             as well as individual types.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with individually specified lower and upper bounds 
             as well as individual types and individual names.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double,System.String)">
             <summary>
             Creates and returns a named numeric variable representing 
             representing a column with a specified lower and upper bound.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double)">
             <summary>
             Creates and returns a numeric variable representing 
             a column with a specified lower and upper bound.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double)">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with a specified lower and upper bound.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with individually specified lower and upper bounds.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,System.String[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with a lower and upper bound  
             as well as individually specified names.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],System.String[])">
             <summary>
             Creates and returns an array of numeric variables representing 
             an array of columns with individually specified lower and upper bounds 
             as well as names.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVar(ILOG.Concert.Column,System.Int32,System.Int32)">
             <summary>
             Creates and returns an integer variable representing 
             a column with an integer lower and upper bound.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVar(ILOG.Concert.Column,System.Int32,System.Int32,System.String)">
              <summary>
              Creates and returns an integer variable representing 
              a column with an integer lower and upper bound as well as a name.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32,System.Int32,System.String[])">
             <summary>
             Creates and returns an array of integer variables representing 
             an array of columns with an integer lower and upper bound 
             as well as individually specified names.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32[],System.Int32[],System.String[])">
             <summary>
             Creates and returns an array of integer variables representing 
             an array of columns with individually specified integer lower 
             and upper bounds as well as individually specified names.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32,System.Int32)">
             <summary>
             Creates and returns an array of integer variables representing 
             an array of columns with an integer lower and upper bound.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32[],System.Int32[])">
             <summary>
             Creates and returns an array of integer variables representing 
             an array of columns with individually specified integer lower 
             and upper bounds.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVar(ILOG.Concert.Column,System.String)">
             <summary>
             Creates and returns a Boolean variable (domain 0, 1) 
            representing a column with a name.
            </summary>
            <remarks> 
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVar(ILOG.Concert.Column)">
             <summary>
             Creates and returns a Boolean variable (domain 0, 1) representing 
             a column.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVarArray(ILOG.Concert.ColumnArray)">
             <summary>
             Creates and returns an array of Boolean variables (domain 0, 1) 
             representing an array of columns.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.BoolVarArray(ILOG.Concert.ColumnArray,System.String[])">
             <summary>
             Creates and returns an array of Boolean variables (domain 0, 1) 
             representing an array of named columns.
             </summary>
            <remarks>
            
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double[],System.Double[],System.Double,System.Double)">
             <summary>
             Creates and returns a numeric expression representing 
             a piecewise linear function.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double,System.Double)">
             <summary>
             Creates and returns a numeric expression representing 
             a piecewise linear function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double,System.Double[],System.Double[],System.Double)">
             <summary>
             Creates and returns a numeric expression representing 
             a piecewise linear function.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.PiecewiseLinear(ILOG.Concert.INumExpr,System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double)">
             <summary>
             Creates and returns a numeric expression representing 
             a piecewise linear function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Abs(ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the absolute value of its argument, 
             the expression specified by <c>expr</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Abs(ILOG.Concert.IIntExpr)">
            <summary>
            Returns an expression representing the absolute value of its argument, 
             the expression specified by <c>expr</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.INumExpr,System.Double)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(System.Double,ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.INumExpr[])">
            <summary>
            Returns an expression representing the maximum of its argument, 
            the elements of an array.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IIntExpr,System.Int32)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(System.Int32,ILOG.Concert.IIntExpr)">
            <summary>
            Returns an expression representing the maximum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Max(ILOG.Concert.IIntExpr[])">
            <summary>
            Returns an expression representing the maximum of its argument, 
            the elements of an array.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.INumExpr,System.Double)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(System.Double,ILOG.Concert.INumExpr)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.INumExpr[])">
            <summary>
            Returns an expression representing the minimum of its argument, 
            the elements of an array.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IIntExpr,ILOG.Concert.IIntExpr)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IIntExpr,System.Int32)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(System.Int32,ILOG.Concert.IIntExpr)">
            <summary>
            Returns an expression representing the minimum of its two arguments.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Min(ILOG.Concert.IIntExpr[])">
            <summary>
            Returns an expression representing the minimum of its argument, 
            the elements of an array.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddToExpr(ILOG.Concert.IObjective,ILOG.Concert.INumExpr)">
             <summary>
             Adds a numeric experssion to an objective.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoef(ILOG.Concert.IObjective,System.Double,ILOG.Concert.INumVar)">
            <summary>
            Sets a value as the linear coefficient of the variable in the objective.
            </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoef(ILOG.Concert.IObjective,ILOG.Concert.INumVar,System.Double)">
            <summary>
            Sets a value as the linear coefficient of the variable in the objective.
            </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IObjective,System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Sets an array of values as the corresponding linear coefficients of
             an array of variables in the objective.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IObjective,ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Sets an array of values as the corresponding linear coefficients of
             an array of variables in the objective.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IObjective,System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Sets an array of values as the corresponding linear coefficients of
             an array of variables in the objective from a starting index for a 
             range of those values and variables.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IObjective,ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Sets an array of values as the corresponding linear coefficients of
             an array of variables in the objective from a starting index for a
             range of those values and variables.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVar(System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a named semi-continuous variable with
              a specified lower and upper bound and of a specified type.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVar(System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a semi-continuous variable with
              a specified lower and upper bound and of a specified type.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType,System.String)">
              <summary>
              Creates and returns a named semi-continuous variable with
              a specified lower and upper bound and of a specified type,
              representing a column.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns a semicontinuous variable with
              a specified lower and upper bound and of a specified type,
              representing a column.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns an array of semi-continuous variables with
              a specified lower and upper bound and of a specified type.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
              <summary>
              Creates and returns an array of semi-continuous variables with
              individually specified lower and upper bounds and 
              individually specified types.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(System.Int32,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
              <summary>
              Creates and returns an array of individually named
              semi-continuous variables with
              a specified lower and upper bound and of a specified type.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(System.Int32,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
              <summary>
              Creates and returns an array of individually named
              semi-continuous variables with
              individually specified lower and upper bounds and 
              individually specified types.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType)">
              <summary>
              Creates and returns an array of semi-continuous variables with
              a specified lower and upper bound and of a specified type,
              representing an array of columns.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[])">
              <summary>
              Creates and returns an array of semi-continuous variables with
              individually specified lower and upper bounds and 
              individually specified types, representing an array of columns.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double,System.Double,ILOG.Concert.NumVarType,System.String[])">
              <summary>
              Creates and returns an array of named semi-continuous variables
              with a specified lower and upper bound as well as type,
              representing an array of columns.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[],System.String[])">
              <summary>
              Creates and returns an array of named semi-continuous variables
              with individually specified lower and upper bounds, and
              individually specified type, representing an array of columns.
              </summary>
             <remarks>
              <p>The semi-continuous lower bound (sclb) must be greater 
              than or equal to 0 (zero). An attempt to use a negative value 
              for the semi-continuous lower bound (sclb) will result in that 
              bound being treated as 0 (zero). </p>
            
             
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Minimize">
             <summary>
             Creates and returns an empty minimization objective function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Maximize">
             <summary>
             Creates and returns an empty maximization objective function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Minimize(System.String)">
             <summary>
             Creates and returns a named empty minimization objective function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Maximize(System.String)">
             <summary>
             Creates and returns a named empty maximization objective function.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Objective(ILOG.Concert.ObjectiveSense)">
             <summary>
             Creates and returns an empty objective function with the specified sense.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Objective(ILOG.Concert.ObjectiveSense,System.String)">
             <summary>
             Creates and returns a named, empty objective function 
             with the specified sense.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMinimize(ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>  
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMaximize(ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMinimize">
              <summary>
              Creates and returns an empty objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMaximize">
              <summary>
              Creates and returns an empty objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddObjective(ILOG.Concert.ObjectiveSense)">
              <summary>
              Creates and returns an empty objective function 
              with the specified sense 
              and adds it to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMinimize(System.String)">
              <summary>
              Creates and returns a named objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddMaximize(System.String)">
              <summary>
              Creates and returns a named objective function 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddObjective(ILOG.Concert.ObjectiveSense,System.String)">
              <summary>
              Creates and returns a named objective function 
              with the specified sense 
              and adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar,ILOG.Concert.NumVarType,System.String)">
             <summary>
             Converts a numeric variable to the specified type and names 
             the converted variable.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar,ILOG.Concert.NumVarType)" -->
        <member name="M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType,System.String)">
             <summary>
             Converts an array of numeric variables to the specified type
             and names the conversion object.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType)">
             <summary>
             Converts an array of numeric variables to the specified type.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType[],System.String)">
             <summary>
             Converts an array of numeric variables, each one converted to the type
             corresponding to the types in an array of types, and names the 
             conversion object.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Conversion(ILOG.Concert.INumVar[],ILOG.Concert.NumVarType[])">
             <summary>
             Converts an array of numeric variables to the corresponding 
             specified types.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLPMatrix(System.String)">
              <summary>
              Creates, returns, and adds an empty LP matrix object, 
              with the specified name, to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLPMatrix">
              <summary>
              Creates, returns, and adds an empty LP matrix object  
              to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LPMatrix(System.String)">
             <summary>
             Creates and returns an empty, named LP matrix object.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LPMatrix">
             <summary>
             Creates and returns an empty LP matrix object.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddRange(System.Double,ILOG.Concert.INumExpr,System.Double,System.String)">
              <summary>
              Creates, returns, and adds to the invoking model a
              range object with the specified name, upper and lower bounds, and 
              expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddRange(System.Double,ILOG.Concert.INumExpr,System.Double)">
              <summary>
              Creates, returns, and adds to the invoking model a
              range object with the specified expression as well as 
              upper and lower bounds.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddRange(System.Double,System.Double,System.String)">
              <summary>
              Creates and returns an empty range object with the specified
              name and specified lower and upper bounds.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddRange(System.Double,System.Double)">
              <summary>
              Creates and returns an empty range object with the 
              specified lower and upper bounds.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(ILOG.Concert.INumExpr,System.Double)">
              <summary>
              Creates and returns a range initialized to represent the 
              equality of the specified expression and value.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(ILOG.Concert.INumExpr,System.Double,System.String)">
              <summary>
              Creates and returns a named range initialized to represent the 
              equality of the specified expression and value.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a constraint initialized to represent the 
              equality of the two specified expressions.
              </summary>
             <remarks>
            
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.  
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named constraint initialized to represent the 
              equality of the two specified expressions.
              </summary>
             <remarks>
             
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(System.Double,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a range initialized to represent the 
              equality of the specified value and expression.
              </summary>
             <remarks>
             
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddEq(System.Double,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named range initialized to represent the 
              equality of the specified value and expression.
              </summary>
             <remarks>
             
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(ILOG.Concert.INumExpr,System.Double)">
              <summary>
              Creates and returns a range representing the constraint
              that the specified numeric expression must be greater than or equal to
              the specified value.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(ILOG.Concert.INumExpr,System.Double,System.String)">
              <summary>
              Creates and returns a range representing the constraint
              that the specified numeric expression must be greater than or equal to
              the specified value.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a constraint that the first specified
              numeric expression must be greater than or equal to the
              second specified numeric expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named constraint that the first specified
              numeric expression must be greater than or equal to the
              second specified numeric expression.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(System.Double,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a constraint that the specified
              value must be greater than or equal to the
              specified numeric expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddGe(System.Double,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named constraint that the specified
              value must be greater than or equal to the
              specified numeric expression.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(ILOG.Concert.INumExpr,System.Double)">
              <summary>
              Creates and returns a range forcing the specified
              numeric expression to be less than than or equal to the
              specified value.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(ILOG.Concert.INumExpr,System.Double,System.String)">
              <summary>
              Creates and returns a named range forcing the specified
              numeric expression to be less than than or equal to the
              specified value.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a constraint forcing the first specified
              numeric expression to be less than than or equal to the
              second specified numeric expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named constraint forcing the first specified
              numeric expression to be less than than or equal to the
              second specified numeric expression.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(System.Double,ILOG.Concert.INumExpr)">
              <summary>
              Creates and returns a range forcing the specified
              value to be less than than or equal to the
              specified numeric expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddLe(System.Double,ILOG.Concert.INumExpr,System.String)">
              <summary>
              Creates and returns a named range forcing the specified
              value to be less than than or equal to the
              specified numeric expression.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Range(System.Double,ILOG.Concert.INumExpr,System.Double,System.String)">
             <summary>
             Creates and returns a named range with the specified lower bound,
             numeric expression, and upper bound.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Range(System.Double,ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns a range with the specified lower bound,
             numeric expression, and upper bound.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Range(System.Double,System.Double,System.String)">
             <summary>
             Creates and returns a named range with the specified lower 
             and upper bound.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Range(System.Double,System.Double)">
             <summary>
             Creates and returns a range with the specified lower 
             and upper bound.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns a range forcing the specified numeric
             expression to be equal to the specified value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.INumExpr,System.Double,System.String)">
             <summary>
             Creates and returns a named range forcing the specified numeric
             expression to be equal to the specified value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a constraint forcing the specified
             numeric expressions to be equal.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named constraint forcing the specified
             numeric expressions to be equal.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a range forcing the specified value
             to be equal to the specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Eq(System.Double,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named range forcing the specified value
             to be equal to the specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns a range forcing the specified numeric expression 
             to be greater than or equal to the specified value.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(ILOG.Concert.INumExpr,System.Double,System.String)">
             <summary>
             Creates and returns a named range forcing the 
             specified numeric expression 
             to be greater than or equal to the specified value.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a constraint forcing the 
             first specified numeric expression 
             to be greater than or equal to the second specified numeric expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named constraint forcing the 
             first specified numeric expression 
             to be greater than or equal to the second specified numeric expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a range that forces the specified
             value to be greater than or equal to the specified expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Ge(System.Double,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named range that forces the specified
             value to be greater than or equal to the specified expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(ILOG.Concert.INumExpr,System.Double)">
             <summary>
             Creates and returns a range that forces the specified
             numeric expression to be less than or equal to 
             the specified value.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(ILOG.Concert.INumExpr,System.Double,System.String)">
             <summary>
             Creates and returns a named range that forces the specified
             numeric expression to be less than or equal to 
             the specified value.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a constraint that forces the first specified
             numeric expression to be less than or equal to 
             the second specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named constraint that forces the 
             first specified numeric expression to be less than or
             equal to the second specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(System.Double,ILOG.Concert.INumExpr)">
             <summary>
             Creates and returns a range that forces the specified value
             to be less than or equal to the specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Le(System.Double,ILOG.Concert.INumExpr,System.String)">
             <summary>
             Creates and returns a named range that forces the specified value
             to be less than or equal to the specified numeric expression.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddToExpr(ILOG.Concert.IRange,ILOG.Concert.INumExpr)">
             <summary>
             Adds the specified numeric expression to the specified range.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoef(ILOG.Concert.IRange,System.Double,ILOG.Concert.INumVar)">
             <summary>
             Sets the specified value as the linear coefficient of the 
             specified variable in the specified range.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoef(ILOG.Concert.IRange,ILOG.Concert.INumVar,System.Double)">
             <summary>
             Sets the specified value as the linear coefficient of the 
             specified variable in the specified range.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IRange,System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Sets the array of specified values as the linear coefficients of the 
             specified array of variables in the specified range.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IRange,ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Sets the array of specified values as the linear coefficients of the 
             specified array of variables in the specified range.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IRange,System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Sets a number of the array of specified values, 
             from a starting index, as 
             the linear coefficients of the corresponding part of the 
             array of variables in the specified range.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SetLinearCoefs(ILOG.Concert.IRange,ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Sets a number of the array of specified values, 
             from a starting index, as 
             the linear coefficients of the corresponding part of the 
             array of variables in the specified range.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CplexModeler.SetQuadCoef(ILOG.Concert.IObjective,System.Double,ILOG.Concert.INumVar,ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CplexModeler.SetQuadCoef(ILOG.Concert.IObjective,ILOG.Concert.INumVar,ILOG.Concert.INumVar,System.Double)" -->
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[])">
              <summary>
              Creates a special ordered set (SOS) of type 1 
              with the specified variables and weights and 
              adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
              <summary>
              Creates a special ordered set (SOS) of type 1 
              with the specified variables and weights and 
              adds it to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.String)">
              <summary>
              Creates and returns a named special ordered set (SOS) of type 1 
              with the specified variables and weights, and 
              adds that SOS1 to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
              <summary>
              Creates and returns a named special ordered set (SOS) of type 1, 
              starting from the specified index and continuing through a number of 
              elements in the array of 
              specified variables and weights, and  adds that named SOS1
              to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS1(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates and returns a special ordered set (SOS) of type 1 from 
             the specified array of variables and weights.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a special ordered set (SOS) of type 1 
             consisting of a number of elements 
             from the specified starting index of 
             the specified array of variables and weights.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates and returns a named special ordered set (SOS) of type 1 
             from the specified array of variables and weights.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS1(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates and returns a named special ordered set (SOS) of type 1 
             consisting of a number of elements 
             from the specified starting index of 
             the specified array of variables and weights.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[])">
              <summary>
              Creates and returns a special ordered set (SOS) of type 2
              from the specified array of variables and weights, and adds
              that SOS2 to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
              <summary>
              Creates and returns a special ordered set (SOS) of type 2
              from a number of elements, starting at the specified index, of
              the specified array of variables and weights, and adds
              that SOS2 to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.String)">
              <summary>
              Creates and returns a named special ordered set (SOS) of type 2
              from the specified array of variables and weights, and adds
              that SOS2 to the invoking model.
              </summary>
             <remarks> 
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
              <summary>
              Creates and returns a named special ordered set (SOS) of type 2
              from a number of elements, starting at the specified index, of
              the specified array of variables and weights, and adds
              that SOS2 to the invoking model.
              </summary>
             <remarks>
              <p>
              
              </p>
            
              <p>
              Do <strong>not</strong> use this method in a callback 
              to modify the model currently being optimized.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS2(ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Creates and returns a special ordered set (SOS) of type 2
             from the specified array of variables and weights.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a special ordered set (SOS) of type 2
             consisting of a number of elements, starting at the specified 
             index, from the specified array of variables and weights.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.String)">
             <summary>
             Creates and returns a named special ordered set (SOS) of type 2
             from the specified array of variables and weights.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.SOS2(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.String)">
             <summary>
             Creates and returns a named special ordered set (SOS) of type 2
             from a number of elements, starting at the specified index,
             of the array of variables and weights.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Column(ILOG.Concert.IRange,System.Double)">
             <summary>
             Creates and returns a column from the specified range and value.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.IRange,System.Double[])">
             <summary>
             Creates and returns an array of columns from the 
             specified range and array of values.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.IRange,System.Double[],System.Int32,System.Int32)">
              <summary>
              Creates and returns an array of a number of columns,
              starting from the specified index of the 
              range and corresponding array of values.
              </summary>
             <remarks>
            
              <p>
              
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Column(ILOG.Concert.IObjective,System.Double)">
             <summary>
             Creates and returns a column from the specified objective and value.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.IObjective,System.Double[])">
             <summary>
             Creates and returns an array of columns 
             from the specified objective and array of values.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.IObjective,System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates and returns an array of a number of columns, 
             starting from the specified index, 
             of the specified objective and the corresponding array of values.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Column(ILOG.Concert.ILPMatrix)">
             <summary>
             Creates and returns a column from an LP matrix.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Column(ILOG.Concert.ILPMatrix,System.Int32[],System.Double[])">
             <summary>
             Creates and returns a column from part of an LP matrix, using
             the specified indices and values.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Column(ILOG.Concert.ILPMatrix,System.Int32[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a column suitable for adding a number of 
             variables to an LP matrix, using a number of 
             the specified indices and values, starting from the specified
             index.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.ILPMatrix,System.Int32,System.Int32[][],System.Double[][])">
             <summary>
             Creates and returns an array of columns suitable for 
             adding new variables as columns in an LP matrix.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ColumnArray(ILOG.Concert.ILPMatrix,System.Int32)">
             <summary>
             Creates and returns an array of a number of columns from an LP matrix.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Delete(ILOG.Concert.ICopyable)">
             <summary>
             Deletes a copyable object.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Delete(ILOG.Concert.ICopyable[])">
             <summary>
             Deletes an array of copyable objects.
             </summary>
            <remarks>  
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Delete(ILOG.Concert.ICopyable[],System.Int32,System.Int32)">
             <summary>
             Deletes a number of copyable objects, starting from
             the specified index, from an array of copyable objects.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(System.Int32[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a new linear expression representing the scalar
             product of the <c>num</c> values in <c>vals</c> starting
             at element <c>start</c> with the corresponding variables in
             <c>vars</c>.
             </summary>
            <param name="vals">An array containing the values to use for building the
                          scalar product.
             </param>
             <param name="vars">An array containing the variables to use for building
                          the scalar product.
             </param>
             <param name="start">The index of the first element to use in <c>vals</c>
                          and <c>vars</c>.
             </param>
             <param name="num">The number of elements to use in <c>vals</c> and
                          <c>vars</c>.
             </param>
             <returns>An expression representing the scalar product of the
                          specified values and variables.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],System.Int32[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a new linear expression representing the scalar
             product of the <c>num</c> variables in <c>vars</c> starting
             at element <c>start</c> with the corresponding values in
             <c>vals</c>.
             </summary>
            <param name="vars">An array containing the variables to use for building
                          the scalar product.
             </param>
             <param name="vals">An array containing the values to use for building the
                          scalar product.
             </param>
             <param name="start">The index of the first element to use in <c>vals</c>
                          and <c>vars</c>.
             </param>
             <param name="num">The number of elements to use in <c>vals</c> and
                          <c>vars</c>.
             </param>
             <returns>An expression representing the scalar product of the
                          specified values and variables.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],ILOG.Concert.INumVar[])">
            <summary>
            Creates and returns a linear expression representing the scalar product
            of the given variables.
            </summary>
            <param name="vars1">The first array of variables involved in the new scalar
                              product.
            </param>
            <param name="vars2">The second array of variables involved in the new scalar    *                   product.
            </param>
            <returns>The new linear expression.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.ScalProd(ILOG.Concert.INumVar[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
            <summary>
            Creates and returns a linear expression representing the scalar product
            of the given variables.
            </summary>
            <param name="vars1">The first array of variables involved in the new scalar
                              product.
            </param>
            <param name="vars2">The second array of variables involved in the new scalar    *                   product.
            </param>
            <param name="start">The index of the first element to use in the 
                              multiplication.
            </param>
            <param name="num">The number of elements to use in the multiplication,
                              starting from the element specified by 
                              <c>start</c>.
            </param>
            <returns>The new linear expression.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LinearIntExpr">
             <summary>
             Creates and returns an integer linear expression 
             initialized as 0 (zero).
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.QuadNumExpr">
             <summary>
             Creates and returns a zero-valued quadratic expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.QuadIntExpr">
             <summary>
             Creates and returns a zero-valued quadratic integer expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LqNumExpr">
             <summary>
             Creates and returns a zero-valued linear and quadratic expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.LqIntExpr">
             <summary>
             Creates and returns a zero-valued linear and quadratic expression.
             </summary>
            <remarks> 
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr[],System.Int32,System.Int32)">
             <summary>
             Creates and returns a numeric expression that is the sum of a
             number of expressions, starting from the specified index, of
             an array of numeric expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.INumExpr[])">
             <summary>
             Creates and returns a numeric expression that is the sum
             of the elements in an array of numeric expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr[],System.Int32,System.Int32)">
             <summary>
             Creates and returns an integer expression that is the sum of a
             number of expressions, starting from the specified index, of
             an array of integer expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.Sum(ILOG.Concert.IIntExpr[])">
             <summary>
             Creates and returns an integer expression that is the sum of
             the elements in an array of integer expressions.
             </summary>
            <remarks>
             <p>
             
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetLPMatrixEnumerator">
             <summary>
             Returns an enumerator over all LP matrix objects in the
             active model.
             </summary>
            <returns>An enumerator over all <c>ILPMatrix</c> objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetRangeEnumerator">
              <summary>
              Returns an enumerator over all ranges in the active model.
              </summary>
             <remarks> 
             
              <p>
              This enumerator accounts only for the <c>IRange</c>
              objects directly added to the active model and not the objects that may
              be in an instance of <c>ILPMatrix</c> and 
              have been added indirectly.
              </p>
            
              </remarks>
              <returns>An enumerator over all <c>IRange</c> objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetConversionEnumerator">
             <summary>
             Returns an enumerator over all conversion objects in the
             active model.
             </summary>
            <returns>An enumerator over all <c>IConversion</c> objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetSOS1Enumerator">
             <summary>
             Returns an enumerator over all SOS1 objects in the
             active model.
             </summary>
            <returns>An enumerator over all <c>ISOS1</c> objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetSOS2Enumerator">
             <summary>
             Returns an enumerator over all SOS2 objects in the
             active model.
             </summary>
            <returns>An enumerator over all <c>ISOS2</c> objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GcIterator">
             <summary>
             Returns an enumerator over all global constraints in the
             active model.
             </summary>
            <returns>An enumerator over all global constraint objects in the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.CplexModeler.GetObjective">
             <summary>
             Returns the <c>IObjective</c> object of the
             active model, or <c>null</c> if no <c>IObjective</c> object
             is currently in the active model.
             </summary>
            <returns>The <c>IObjective</c> object in the active
                     model, or <c>null</c> if there is no
                     <c>IObjective</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.CplexModeler.VisitChildren(ILOG.Concert.ICopyableVisitor)" -->
        <member name="M:ILOG.CPLEX.CplexModeler.MakeClone(ILOG.Concert.CloneManager)">
              <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "T:ILOG.CPLEX.CplexModeler.Exception" -->
        <member name="M:ILOG.CPLEX.CplexModeler.Exception.GetStatus">
            <summary>
            <p>Returns the error code or status that caused the exception.</p>
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.IncumbentId">
            <summary>
            This constant identifies the incumbent solution for a MIP
            in methods which require a solution index.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MakeClone(ILOG.Concert.CloneManager)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetClone(ILOG.Concert.ICopyable)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetModel(ILOG.Concert.IModel)">
             <summary>
             Sets <c>model</c> as the active model.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DeleteNames">
            <summary>
            Removes all names from the active model.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddUserCut(ILOG.Concert.IRange)">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
              <p>
              This method adds <c>cut</c> as a user cut to the
              invoking <c>Cplex</c>
              object. Unlike regular constraints that are added to the model, user
              cuts are by default left out of the optimization until they are violated.
              It is only after a node solution violates a user cut that the cut is added
              to the relaxation and will be used from then on.  Unlike lazy
              constraints, user cuts must not reduce the feasible region of the
              problem; they can only strengthen the relaxation; otherwise,
              incorrect solutions can result.</p>
              <p>
              When columns are deleted from the active model, all user cuts are
              deleted as well and need to be added again if they should be considered.
              Use <c>clearUserCuts</c> to remove all user cuts from
              the invoking <c>Cplex</c> object.</p>
              <p>
              If you do not know what type your cut is, use the method
              <c>addCut</c> rather than this method.
              </p>
            
              
             </remarks>
             <param name="cut">The user cut to be added.  The cut must be linear.
              </param>
              <returns>The added user cut.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddUserCuts(ILOG.Concert.IRange[])">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method adds the constraints in <c>cuts</c>
              as user cuts to the
              the invoking <c>Cplex</c> object.  The constraint
              <c>cut</c> is copied into the user cut pool; the object
              <c>cut</c> itself is not part of the pool, so changes
              to it after it has been copied into the user cut pool will not
              affect the user cut pool.</p>
              <p>
              Unlike regular constraints that are added to the model, user
              cuts are by default left out of the optimization until they are violated.
              It is only after a node solution violates a user cut that the cut is added
              to the relaxation and will be used from then on.  Unlike lazy
              constraints, user cuts must not reduce the feasible region of the
              problem; they can only strengthen the relaxation; otherwise,
              incorrect solutions can result.</p>
              <p>
              When columns are deleted from the active model, all user cuts are
              deleted as well and need to be added again if they should be considered.
              Otherwise, use <c>clearUserCuts</c> to remove all user cuts from
              the invoking <c>Cplex</c> object.</p>
              <p>
              If you do not know what type your cuts are, use the method
              <c>addCuts</c> rather than this method.
              </p>
            
              
             </remarks>
             <param name="cuts">An array of user cuts to be added.  All cuts must be
                                linear.
              </param>
              <returns>The array of user cuts that have been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddUserCuts(ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method adds the constraints in <c>cuts</c>
              as user cuts to the
              the invoking <c>Cplex</c> object.  The constraints in the array
              <c>cuts</c> are copied into the user cut pool; the objects in the
              array <c>cut</c> themselves are not part of the pool, so changes
              to them after they have been copied into the user cut pool will not
              affect the user cut pool.</p>
              <p>
              Unlike regular constraints that are added to the model, user
              cuts are by default left out of the optimization until they are violated.
              It is only after a node solution violates a user cut that the cut is added
              to the relaxation and will be used from then on.  Unlike lazy
              constraints, user cuts must not reduce the feasible region of the
              problem; they can only strengthen the relaxation; otherwise,
              incorrect solutions can result.</p>
              <p>
              When columns are deleted from the active model, all user cuts are
              deleted as well and need to be added again if they should be considered.
              Otherwise, use <c>clearUserCuts</c> to remove all user cuts from
              the invoking <c>Cplex</c> object.</p>
            
              
            
            
             </remarks>
             <param name="cuts">An array of user cuts to be added.  All cuts must be
                            linear.
              </param>
              <param name="start">The first element in <c>cuts</c> to be added as
                            a user cut.
              </param>
              <param name="num">The number of consecutive elements
                            in <c>cuts</c> to be added as a user cut.
              </param>
              <returns>The array <c>cuts</c> containing the user cuts
                           that have been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ClearUserCuts">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p> This method deletes user cuts. It
              deletes all user cuts that have previously been
              added to the invoking <c>Cplex</c> object with the methods
              <c>addUserCut</c> or <c>addUserCuts</c>.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddLazyConstraint(ILOG.Concert.IRange)">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method adds <c>cut</c> as a lazy constraint to the invoking
              <c>Cplex</c> object. The constraint <c>cut</c> is copied
              into the lazy constraint pool; the <c>cut</c> itself is not part
              of the pool, so changes to <c>cut</c> after it has been copied into
              the lazy constraint pool will not affect the lazy constraint pool.
              </p>
              <p>
              Lazy constraints added with <c>addLazyConstraint</c> are typically
              constraints of the model that are not expected to be violated when left
              out. The idea is that the LPs that are solved when
              the MIP is being solved
              can be kept smaller when these constraints are not included.
              <c>Cplex</c> will, however, include a lazy constraint in the LP
              as soon as the constraint is violated. In other words, the solution
              computed by <c>Cplex</c> makes sure that all the lazy constraints
              that have been added are satisfied.</p>
              <p>
              By contrast, if the constraint does not change the feasible region of the
              active model but only strengthens the formulation, it is referred to
              as a <em>user cut</em>. User cuts can be added to
              <c>Cplex</c> by <c>addLazyConstraint</c>, but it is
              generally preferable to do so with <c>addUserCuts</c>. It is an
              error, however, to add lazy constraints by means
              of <c>addUserCuts</c>.</p>
              <p>
              When columns are deleted from the active model, all lazy constraints
              are deleted as well and need to be recopied into the lazy constraint
              pool. Otherwise, use <c>clearLazyConstraints</c> to clear the
              list of lazy constraints.</p>
            
              
             </remarks>
             <param name="cut">The constraint to be added as a lazy constraint.  The
                           constraint must be linear.
              </param>
              <returns>The constraint added as a lazy constraint.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddLazyConstraints(ILOG.Concert.IRange[])">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method adds the constraints given in <c>cut</c>
              to the list of lazy constraints.
              The constraints are copied into the lazy constraint pool; the constraints
              themselves do not become part of the pool, so changes to them
              after they have been copied into the lazy constraint pool will not affect
              the lazy constraint pool. </p>
              <p>
              Lazy constraints added with <c>addLazyConstraints</c> are typically
              constraints of the model that are not expected to be violated when left
              out. The idea is that the LPs that are solved when
              the MIP is being solved
              can be kept smaller when these constraints are not included.
              <c>Cplex</c> will, however, include a lazy constraint in the LP
              as soon as the constraint is violated. In other words, the solution
              computed by <c>Cplex</c> makes sure that all the lazy constraints
              that have been added are satisfied.</p>
              <p>
              By contrast, if the constraint does not change the feasible region of the
              active model but only strengthens the formulation, it is referred to
              as a <em>user cut</em>. User cuts can be added to
              <c>Cplex</c> by <c>addLazyConstraint</c>, but it is
              generally preferable to do so with <c>addUserCuts</c>. It is an
              error, however, to add lazy constraints by means of
              <c>addUserCuts</c>.</p>
              <p>
              When columns are deleted from the active model, all lazy constraints
              are deleted as well and need to be recopied into the lazy constraint
              pool. Otherwise, use <c>clearLazyConstraints</c> to clear the
              list of lazy constraints.</p>
            
              
             </remarks>
             <param name="cut">The array of constraints to be added as lazy constraints.
                         All constraints must be linear.
              </param>
              <returns>The array of constraints added as lazy constraints.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddLazyConstraints(ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method copies constraints into the lazy constraints pool.
              <c>num</c> constraints in the array <c>cut</c> are copied
              into the lazy constraint pool, starting
              with element at the index <c>start</c>.
              The constraints themselves do not become part of the pool, so changes to
              them after they have been copied into the lazy constraint pool will not
              affect the lazy constraint pool. </p>
              <p>
              Lazy constraints added with <c>addLazyConstraints</c> are typically
              constraints of the model that are not expected to be violated when left
              out. The idea is that the LPs that are solved when
              the MIP is being solved
              can be kept smaller when these constraints are not included.
              <c>Cplex</c> will, however, include a lazy constraint in the LP
              as soon as the constraint is violated. In other words, the solution
              computed by <c>Cplex</c> makes sure that all the lazy constraints
              that have been added are satisfied.</p>
              <p>
              By contrast, if the constraint does not change the feasible region of the
              active model but only strengthens the formulation, it is referred to
              as a <em>user cut</em>. User cuts can be added to
              <c>Cplex</c> by <c>addLazyConstraint</c>, but it is
              generally preferable to do so with <c>addUserCuts</c>. It is an
              error, however, to add lazy constraints by means of
              <c>addUserCuts</c>.</p>
              <p>
              When columns are deleted from the active model, all lazy constraints
              are deleted as well and need to be recopied into the lazy constraint
              pool.  Otherwise, use <c>clearLazyConstraints</c> to clear the
              list of lazy constraints.</p>
            
              
            
            
             </remarks>
             <param name="cut">An array of constraints to be added as lazy
                                constraints.  All constraints must be linear.
              </param>
              <param name="start">The index of the first element in <c>cut</c> to
                                be added as a lazy constraint.
              </param>
              <param name="num">The number of consecutive constraints
                                in <c>cut</c> to
                                be added as lazy constraints.
              </param>
              <returns>An array containing the constraints added as lazy constraints.
                        This is the same array as <c>cut</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ClearLazyConstraints">
             <summary>
             This is an advanced method.
             </summary>
             <remarks> <p><b>Important:</b></p>
             <p>
             Advanced methods typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other methods instead.
             </p>
            
              <p>This method removes all lazy constraints
              that have been added to the invoking
              <c>Cplex</c> object with the methods
              <c>addLazyConstraint</c> and <c>addLazyConstraints</c>.
              </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddCut(ILOG.Concert.IRange)">
              <summary>
              Adds the constraint <c>cut</c> as a cut to the invoking
              <c>Cplex</c> object.
              </summary>
             <remarks>  <p>The added cut does not become part of the model;
              it is only copied when the method <c>addCut</c> is invoked. Thus,
              <c>cut</c> may be deleted or modified after <c>addCut</c> has
              been called, and the change will not affect the invoking
              <c>Cplex</c> object. You can and probably should call
              <c>cut.End</c> after <c>addCut(cut)</c>. Unlike constraints
              that are part of the model, this call of <c>cut.End</c>
              will not remove the cut from the <c>Cplex</c> object.
              </p>
              <p>
              Cuts are not part of the root problem; they are considered on an
              as-needed basis. A solution computed by <c>Cplex</c> is
              guaranteed to satisfy all cuts.</p>
              <p>
              When columns are deleted from the active model, all cuts are
              deleted as well and need to be added again if they should be considered.
              Otherwise, use <c>clearCuts</c> to clear all cuts that have been
              added.</p>
            
              
             </remarks>
             <param name="cut">The constraint to add as a cut.  It must be linear.
              </param>
              <returns>The constraint added as a cut.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddCuts(ILOG.Concert.IRange[])">
              <summary>
              Adds the constraints given in <c>cut</c> as cuts to the invoking
              <c>Cplex</c> object.
              </summary>
             <remarks>  <p>The cuts do not become part of the model;
              they are only copied when the method <c>addCuts</c>
              is invoked. Thus,
              the constraints may be deleted or modified after <c>addCuts</c>
              has been called, and the change will not affect the invoking
              <c>Cplex</c> object.
              </p>
              <p>
              Cuts are not part of the root problem; they are considered on an
              as-needed basis. A solution computed by <c>Cplex</c> is
              guaranteed to satisfy all cuts.</p>
              <p>
              When columns are deleted from the active model, all cuts are
              deleted as well and need to be added again if they should be considered.
              Otherwise, use <c>clearCuts</c> to clear all cuts that have been
              added.</p>
            
              
             </remarks>
             <param name="cut">An array of constraints to be added as a cut.
              </param>
              <returns>The array of constraints added as a cut.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddCuts(ILOG.Concert.IRange[],System.Int32,System.Int32)">
              <summary>
              Adds <c>num</c> constraints given in <c>cut</c>
              as cuts to the invoking <c>Cplex</c> object, starting
              with element <c>cut[start]</c>.
              </summary>
             <remarks>  <p>The cuts do not become part of the
              model; they are only copied when the method <c>addCuts</c>
              is invoked.
              Thus, the constraints may be deleted or modified after
              <c>addCuts</c> has been called, and the change will not affect the
              invoking <c>Cplex</c> object. </p>
              <p>
              Cuts are not part of the root problem; they are considered on an
              as-needed basis. A solution computed by <c>Cplex</c> is
              guaranteed to satisfy all cuts.</p>
              <p>
              When columns are deleted from the active model, all cuts are
              deleted as well and need to be added again if they should be considered.
              Otherwise, use <c>clearCuts</c> to clear all cuts that have been
              added.</p>
            
              
            
            
             </remarks>
             <param name="cut">An array of constraints to be added as cuts.
                                All constraints must be linear.
              </param>
              <param name="start">The index of the first constraint in <c>cut</c>
                                that is to be added as a cut.
              </param>
              <param name="num">The number of consecutive constraints in
                                <c>cut</c> that are to be added as cuts.
              </param>
              <returns>The array containing the constraints added as cuts.
                                This is array <c>cut</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ClearCuts">
             <summary>
             Deletes all cuts added by the user
             to the invoking <c>Cplex</c> object
             with the methods <c>addCut</c> and <c>addCuts</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ExportModel(System.String)">
              <summary>
              Writes the active model to the file specified by <c>filename</c>.
              </summary>
             <remarks>
              <p>The file format is determined by the extension of the filename.  The
              following extensions are recognized on most platforms: </p>
              <ul>
              <li>      .sav</li>
              <li>      .mps</li>
              <li>      .Lp</li>
              <li>      .sav.Gz (if gzip is properly installed)</li>
              <li>      .mps.Gz (if gzip is properly installed)</li>
              <li>      .Lp.Gz  (if gzip is properly installed)</li>
              <li>      .Bz2  (if bzip2 is properly installed)</li>
              </ul>
            
              <p>Microsoft Windows does not support writing gzipped files.</p>
              <p>
              If no name has been assigned to a variable or range
              (that is, <c>getName</c> returns <c>null</c> for that
              variable or range), <c>Cplex</c> uses a default name when
              it writes the model (or in the optimization log).
              Default names are of the
              form IloX<em>j</em> for variables and IloC<em>i</em>, where <em>i</em>
              and <em>j</em> are internal indices of <c>Cplex</c>. </p>
            
              </remarks>
              <param name="name">The name of the file to which the model is written.
                                The extension of the filename determines the format in
                                which to write the model file.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ImportModel(System.String)">
              <summary>
              Reads a model from the file specified by <c>name</c>
              into the active model.
              </summary>
             <remarks>  <p>The format of the file is specified by the extension of the
              filename. The following extensions are recognized on most platforms:
              </p>
              <ul>
              <li>      .sav</li>
              <li>      .mps</li>
              <li>      .Lp</li>
              <li>      .sav.Gz (if gzip is properly installed)</li>
              <li>      .mps.Gz (if gzip is properly installed)</li>
              <li>      .Lp.Gz  (if gzip is properly installed)</li>
              <li>      .Bz2  (if bzip2 is properly installed)</li>
              </ul>
              <p>Microsoft Windows does not support reading from gzipped files.</p>
              <p>When CPLEX reads a file, the existing active model is first
              cleaned out and then new modeling objects, as specified by the input file,
              are added to it.
              In particular, one <c>IObjective</c> object and one
              <c>ILPMatrix</c> object are always added to the
              active model. The <c>ILPMatrix</c> object will
              contain all the constraints of the imported model. <c>ISOS1</c>
              and <c>ISOS2</c> objects are added as needed. </p>
            
              </remarks>
              <param name="name">The name of the file from which the model is read.
                                The extension of the filename determines the format in
                                which to read the model file.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ClearModel">
             <summary>
             Removes all modeling objects from the active model.
             </summary>
            <remarks>
             <p>The result is an empty model. </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.EndModel">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.End(ILOG.Concert.IAddable[],System.Int32,System.Int32)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.End(ILOG.Concert.IAddable[])">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.End(ILOG.Concert.IAddable)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcols">
              <summary>
              Returns the number of columns in the matrix representation of the
              active model.
              </summary>
             <remarks>  <p>The result may be greater than the number of
              variables in the active model, since some modeling
              objects may require more than one matrix column.
              </p>
            
              </remarks>
              <returns>The number of columns of the matrix representation of the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNrows">
              <summary>
              Returns the number of rows of the matrix representation of the active
              model.
              </summary>
             <remarks>  <p>The result may be different from the number of
              constraints in the active model, as some modeling
              objects may require more than one matrix row, and quadratic
              constraints are not counted as rows.</p>
            
              </remarks>
              <returns>The number of rows of the matrix representation of the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNQCs">
              <summary>
              Returns the number of quadratic constraints in the active
              model.
              </summary>
             <remarks>  <p>The result may be different from the number
              of constraints in the active model, since linear constraints
              are counted separately.</p>
            
              </remarks>
              <returns>The number of rows of the matrix representation of the
                      active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNSOS1">
             <summary>
             Returns the number of SOSs of type 1 in the active model.
             </summary>
            <returns>The number of SOSs of type 1 in the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNSOS2">
             <summary>
             Returns the number of SOSs of type 2 in the active model.
             </summary>
            <returns>The number of SOSs of type 2 in the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNSOSs">
             <summary>
             Returns the number of SOSs of both types, 1 and 2, in the
             active model.
             </summary>
            <returns>The number of SOSs in the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNNZs">
            <summary>
            Returns the number of nonzero elements in the matrix representation of the
             active model.
             </summary>
            <returns>The number of nonzero elements in the matrix representation of the
                     active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNintVars">
              <summary>
              Returns the number of integer variables in the matrix representation of
              the active model.
              </summary>
             <remarks>  Note that the result is not necessarily equal to the number of
              integer variables in the active model, as some mapping of
              modeling objects may require the introduction of added matrix columns.
            
              </remarks>
              <returns>The number of integer variables in the matrix representation of
              the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNbinVars">
              <summary>
              Returns the number of binary (or Boolean) variables in the matrix
              representation of the active model.
              </summary>
             <remarks>  Note that the result is not necessarily equal to the number of
              Boolean variables in the active model, as some mapping of
              modeling objects may require the introduction of added matrix columns.
            
              </remarks>
              <returns>The number of binary variables in the matrix representation of
                      the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsemiContVars">
             <summary>
             Returns the number of semicontinuous variables in the matrix
             representation of the active model.
             </summary>
            <returns>The number of semicontinuous variables in the matrix
                     representation of the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsemiIntVars">
             <summary>
             Returns the number of semi-integer variables in the matrix representation
             of the active model.
             </summary>
            <returns>The number of semi-integer variables in the matrix representation
                     of the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IsMIP">
             <summary>
             Returns <c>true</c> if the active model is a MIP.
             </summary>
            <returns><c>true</c> if the active model is a MIP.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IsQO">
             <summary>
             Returns <c>true</c> if the active model has a quadratic objective
             function.
             </summary>
            <returns><c>true</c> if the active model has a quadratic objective
                     function.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IsQC">
              <summary>
              Returns <c>true</c> if the active model has quadratic
              constraints.
              </summary>
             <remarks>
              <p>See the topic QCP in the <em>CPLEX User's Manual</em>
              for more detail about the characteristics of such
              constraints with respect to their concavity and positive
              semi-definiteness (PSD). </p>
            
              </remarks>
              <returns><c>true</c> if the active model has quadratic
                      constraints.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetStatus">
              <summary>
              Returns the solution status of the active model.
              </summary>
             <remarks>  <p>See also the topic <em>Interpreting Solution Quality</em>
              in the <em>CPLEX User's Manual</em> for more information
              about a status associated with infeasibility or unboundedness.</p>
              
             </remarks>
             <returns>The solution status of the active model.
            
              </returns><see cref="T:ILOG.CPLEX.Cplex.Status"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IsPrimalFeasible">
             <summary>
             Returns <c>true</c> if a primal feasible solution is available.
             </summary>
            <remarks>  <p>If <c>false</c> is returned, the solution may still be primal
             feasible, but the algorithm did not determine the feasibility before
             it terminated.
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IsDualFeasible">
            <summary>
            Returns <c>true</c> if a dual feasible solution is available.
            </summary>
            <remarks> <p>If <c>false</c> is returned, the solution may still be
            dual feasible, but the algorithm did not determine the feasibility
            before it terminated.
            </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParam(ILOG.CPLEX.Cplex.IntParam,System.Int32)">
              <summary>
              Sets an integer parameter to value <c>val</c>.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the parameter to set.
              </param>
              <param name="val">The new value for the integer parameter.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParam(ILOG.CPLEX.Cplex.IntParam)">
              <summary>
              Returns the current value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The current value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMin(ILOG.CPLEX.Cplex.IntParam)">
              <summary>
              Returns the minimum value allowed for an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The minimum allowed value for the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMax(ILOG.CPLEX.Cplex.IntParam)">
              <summary>
              Returns the maximum value allowed for an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The maximum allowed value for the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDefault(ILOG.CPLEX.Cplex.IntParam)">
              <summary>
              Returns the default value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The default value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParam(ILOG.CPLEX.Cplex.LongParam,System.Int64)">
              <summary>
              Sets an integer parameter to value <c>val</c>.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the parameter to set.
              </param>
              <param name="val">The new value for the integer parameter.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParam(ILOG.CPLEX.Cplex.LongParam)">
              <summary>
              Returns the current value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The current value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMin(ILOG.CPLEX.Cplex.LongParam)">
              <summary>
              Returns the minimum value allowed for an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The minimum allowed value for the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMax(ILOG.CPLEX.Cplex.LongParam)">
              <summary>
              Returns the maximum value allowed for an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The maximum allowed value for the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDefault(ILOG.CPLEX.Cplex.LongParam)">
              <summary>
              Returns the default value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The default value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParam(ILOG.CPLEX.Cplex.BooleanParam,System.Boolean)">
              <summary>
              Sets a Boolean parameter to the value <c>val</c>.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the Boolean parameter to be set.
              </param>
              <param name="val">The new value for the Boolean parameter.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParam(ILOG.CPLEX.Cplex.BooleanParam)">
              <summary>
              Returns the current value of a Boolean parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the Boolean parameter to be queried.
              </param>
              <returns>The current value of the Boolean parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDefault(ILOG.CPLEX.Cplex.BooleanParam)">
              <summary>
              Returns the default value of a Boolean parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the Boolean parameter to be queried.
              </param>
              <returns>The default value of the Boolean parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParam(ILOG.CPLEX.Cplex.DoubleParam,System.Double)">
              <summary>
              Sets the value of a double parameter to <c>val</c>.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be set.
              </param>
              <param name="val">The new value for the double parameter
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParam(ILOG.CPLEX.Cplex.DoubleParam)">
              <summary>
              Returns the current value of a double parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be queried.
              </param>
              <returns>The current value of the double parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMin(ILOG.CPLEX.Cplex.DoubleParam)">
              <summary>
              Returns the minimum value allowed for a double parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be queried.
              </param>
              <returns>The minimum allowed value for the queried double parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMax(ILOG.CPLEX.Cplex.DoubleParam)">
              <summary>
              Returns the maximum allowed value for a double parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be queried.
              </param>
              <returns>The maximum allowed value for the queried double parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDefault(ILOG.CPLEX.Cplex.DoubleParam)">
              <summary>
              Returns the default value of a double parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be queried.
              </param>
              <returns>The default value of the queried double parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParam(ILOG.CPLEX.Cplex.StringParam,System.String)">
              <summary>
              Sets a string parameter to value <c>val</c>.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the string parameter to set.
              </param>
              <param name="val">The new value for the string parameter.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParam(ILOG.CPLEX.Cplex.StringParam)">
              <summary>
              Returns the current value of a string parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the string parameter to be queried.
              </param>
              <returns>The current value of the string parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDefault(ILOG.CPLEX.Cplex.StringParam)">
              <summary>
              Returns the default value of a string parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the string parameter to be queried.
              </param>
              <returns>The default value of the string parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetDefaults">
             <summary>
             Resets all parameters to their default values.
             </summary>
            <remarks>  <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetParameterSet">
             <summary>
             Returns a parameter set corresponding to the present parameter
             state.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>The parameter set.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetParameterSet(ILOG.CPLEX.Cplex.ParameterSet)">
             <summary>
             Sets the parameter state using a parameter set.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <param name="set">The parameter set.
             </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetVersion">
             <summary>
             Returns a string that reports the version of CPLEX.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>A string that reports the version of CPLEX.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetDeleteMode(ILOG.CPLEX.Cplex.DeleteMode)">
              <summary>
              Sets the delete mode.
              </summary>
             <remarks>  <p>The delete mode in the invoking <c>Cplex</c> object is set to
              <c>mode</c>. </p>
            
              </remarks>
              <param name="mode">The delete mode to be set,
                          <c>Cplex.DeleteMode.FixBasis</c> or
                          <c>Cplex.DeleteMode.LeaveBasis</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDeleteMode">
             <summary>
             Returns the current delete mode of the invoking <c>Cplex</c>
             object.
             </summary>
            <returns>The current delete mode of the invoking <c>Cplex</c>
                     object.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetCplexStatus">
              <summary>
              Returns the status of the <c>Cplex</c> algorithm.
              </summary>
             <remarks>  <p>The status
              of <c>Cplex.CplexStatus</c> provides
              more information about the status of the optimizer.</p>
              <p>See also the topic <em>Interpreting Solution Quality</em>
              in the <em>CPLEX User's Manual</em> for more information
              about a status associated with infeasibility or unboundedness.</p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The <c>Cplex.CplexStatus</c> status.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetCplexSubStatus">
              <summary>
              Returns the <c>Cplex.CplexStatus</c>
              status of the last node problem solved.
              </summary>
             <remarks>  <p>This method is often useful
              when the preceding invocation of
              
               Cplex.Solve 
              terminates with an error during the solution of a MIP problem.
              </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The <c>Cplex.CplexStatus</c> status of the last node
                      that has been solved during the solution of a MIP.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAlgorithm">
            <summary>
            Returns the algorithm that was used to generate the current solution.
            </summary>
            <returns>The algorithm that was used to generate the current solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSubAlgorithm">
            <summary>
            Returns the type of the algorithm that was used to generate the solution
            of the last branch-and-cut node solved during a MIP solve
            terminated because of an error during mixed integer optimization.
            </summary>
            <returns>The type of the algorithm that was used to generate the solution
                    of the last branch-and-cut node solved during a MIP solve
                    terminated because of an error during mixed integer optimization.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjValue">
             <summary>
             Returns the objective value of the current solution.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>The objective value of the current solution.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjValue(System.Int32)">
              <summary>
              Returns the objective value of a solution in the solution pool.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="soln">The index of the solution pool member for which to
                            return the objective value.  A value of
                            Cplex.IncumbentId specifies
                            that the value returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>The objective value of a solution in the solution pool.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBestObjValue">
             <summary>
             Accesses the currently best known bound
             of all the remaining open nodes in a branch-and-cut tree.
             </summary>
             <remarks> <p>
             It is computed for a minimization problem as the minimum
             objective function value of all remaining unexplored nodes.
             Similarly, it is computed for a maximization problem as the maximum
             objective function value of all remaining unexplored nodes.
             </p><p>
             For a regular MIP optimization,
             this value is also the best known bound on the optimal solution
             value of the MIP problem. In fact,
             when a problem has been solved to optimality, this value matches the
             optimal solution value.
             </p><p>
             However, for the method <c>populate</c>, the value can also exceed
             the optimal solution value if CPLEX has already solved the model
             to optimality but continues to search for additional solutions.
             </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>A bound on the optimal solution value.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPRelativeGap">
             <summary>
             Accesses the relative objective gap for a MIP optimization.
             </summary>
             <remarks> <p>
             For a minimization problem, this value is computed by
             <c>
             (bestinteger - bestobjective) / (1e-10 + |bestobjective|)
             </c>
             where <c>bestinteger</c> is the value returned by
             {@link Cplex#getObjValue Cplex.GetObjValue}
             and <c>bestobjective</c> is the value returned by
             {@link Cplex#getBestObjValue Cplex.GetBestObjValue}.
             For a maximization problem, the value is computed by:
             <c>
             (bestobjective - bestinteger) / (1e-10 + |bestobjective|)
             </c>
             </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The relative objective gap.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetCutoff">
              <summary>
              Returns the cutoff for the objective value
              when nodes are being solved during
              branch-and-cut search.
              </summary>
             <remarks>  <p>This value is typically computed from the
              objective value of an incumbent solution and the optimality gap.
              In the case of a minimization problem, for example, if the objective
              value of a node exceeds the cutoff value, the node can be pruned
              without the need to solve the node to optimality. </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The objective value cutoff.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.ILPMatrix)">
              <summary>
              Returns the solution vector for the columns of an LP matrix.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException  <c>matrix</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception       If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="matrix">The LP matrix for which to query the solution values.
                                  This LP matrix must be in the active model.
            
              </param>
              <returns>The solution vector for columns of an LP matrix.  If
                        <c>x</c> is the array returned by this method,
                        <c>x[j]</c> will be the solution value for the variable
                        corresponding to column <c>j</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.ILPMatrix,System.Int32)">
              <summary>
              Returns a solution vector from the solution pool for the columns
              of an LP matrix.
              </summary>
             <remarks>
              
            
            
             <exception>UnknownObjectException  <c>matrix</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception       If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="matrix">The LP matrix for which to query the solution values.
                                  This LP matrix must be in the active model.
              </param>
              <param name="soln">The index of the solution pool member for which to
                                  return solution values.  A value of
                                  Cplex.IncumbentId specifies
                                  that the values returned should correspond to the
                                  incumbent rather than a member of the solution pool.
            
              </param>
              <returns>The solution vector for columns of an LP matrix.  If
                        <c>x</c> is the array returned by this method,
                        <c>x[j]</c> will be the solution value for the variable
                        corresponding to column <c>j</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
              <summary>
              Returns the solution vector for a range of <c>num</c>
              columns of an LP matrix, starting at the index specified by
              <c>start</c>.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException  <c>matrix</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the solution values.
                                This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first column whose solution value
                                is being queried.
              </param>
              <param name="num">The number of consecutive columns for which
                                to query the solution value.
              </param>
              <returns>The solution vector for the specified columns of an LP matrix.
                      If <c>x</c> is the array returned by this method,
                      <c>x[j]</c> will be the solution value for the variable
                      corresponding to column <c>j+start</c> of
                      <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.ILPMatrix,System.Int32,System.Int32,System.Int32)">
              <summary>
              Returns a solution vector from the solution pool for a
              range of <c>num</c>
              columns of an LP matrix, starting at the index specified by
              <c>start</c>.
              </summary>
             <remarks>
              
            
            
            
            
             <exception>UnknownObjectException  <c>matrix</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the solution values.
                                This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first column whose solution value
                                is being queried.
              </param>
              <param name="num">The number of consecutive columns for which
                                to query the solution value.
              </param>
              <param name="soln">The index of the solution pool member for which to
                                return solution values.  A value of
                                Cplex.IncumbentId specifies
                                that the values returned should correspond to the
                                incumbent rather than a member of the solution pool.
              </param>
              <returns>The solution vector for the specified columns of an LP matrix.
                      If <c>x</c> is the array returned by this method,
                      <c>x[j]</c> will be the solution value for the variable
                      corresponding to column <c>j+start</c> of
                      <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValue(ILOG.Concert.INumVar)">
              <summary>
              Returns the solution value for a variable.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>var</c> is not in
                                                      the active model
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">The variable whose value is being queried.
                          This variable must be in the active model.
              </param>
              <returns>The solution value for the variable <c>var</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValue(ILOG.Concert.INumVar,System.Int32)">
              <summary>
              Returns a solution value from the solution pool for a variable.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>var</c> is not in
                                                      the active model
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">The variable whose value is being queried.
                           This variable must be in the active model.
              </param>
              <param name="soln">The index of the solution pool member for which to
                           return a solution value.  A value of
                           Cplex.IncumbentId specifies
                           that the value returned should correspond to the
                           incumbent rather than a member of the solution pool.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.INumVar[])">
              <summary>
              Returns solution values for an array of variables.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException        One of the variables
                                                        specified in <c>var</c>
                                                        is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">An array of
                          variables whose solution values are being queried.
                          All variables must be in the active model.
              </param>
              <returns>The solution values for the variables in <c>var</c>.
                          If <c>x</c> is the array returned by this method,
                          <c>x[j]</c> will be the solution value for the variable
                          <c>var[j]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.INumVar[],System.Int32)">
              <summary>
              Returns solution values from the solution pool for an array of variables.
              </summary>
             <remarks>
              
            
            
             <exception>UnknownObjectException        One of the variables
                                                        specified in <c>var</c>
                                                        is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">An array of
                          variables whose solution values are being queried.
                          All variables must be in the active model.
              </param>
              <param name="soln">The index of the solution pool member for which to
                           return solution values.  A value of Cplex.IncumbentId
                           specifies
                           that the values returned should correspond to the
                           incumbent rather than a member of the solution pool.
              </param>
              <returns>The solution values for the variables in <c>var</c>.
                          If <c>x</c> is the array returned by this method,
                          <c>x[j]</c> will be the solution value for the variable
                          <c>var[j]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns solution values for a set of variables.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException        One of the variables
                                                        specified in <c>var</c>
                                                        is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">An array containing the variables whose solution values
                            are being queried.  These variables must be in the
                            active model.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                            which to query the solution value.
              </param>
              <param name="num">The number of consecutive variables in
                            <c>var</c> for which
                            to query the solution value.
              </param>
              <returns>The solution values for the specified variables.  If
                            <c>x</c> is the array returned by this method,
                            <c>x[j]</c> will be the solution value for the
                            variable <c>var[j+start]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValues(ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Int32)">
              <summary>
              Returns solution values from the solution pool for a set of variables.
              </summary>
             <remarks>
              
            
            
            
            
             <exception>UnknownObjectException        One of the variables
                                                        specified in <c>var</c>
                                                        is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">An array containing the variables whose solution values
                            are being queried.  These variables must be in the
                            active model.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                            which to query the solution value.
              </param>
              <param name="num">The number of consecutive variables in
                            <c>var</c> for which
                            to query the solution value.
              </param>
              <param name="soln">The index of the solution pool member for which to
                           return solution values.  A value of
                           Cplex.IncumbentId specifies
                           that the values returned should correspond to the
                           incumbent rather than a member of the solution pool.
              </param>
              <returns>The solution values for the specified variables.  If
                            <c>x</c> is the array returned by this method,
                            <c>x[j]</c> will be the solution value for the
                            variable <c>var[j+start]</c>.
              </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetReducedCosts(ILOG.Concert.ILPMatrix)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetReducedCosts(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetReducedCost(ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibility(ILOG.Concert.INumVar)">
              <summary>
              Returns the infeasibility for a variable.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      The variable <c>var</c>
                                                      is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="ivar">The variable whose infeasibility is being queried.
                          This variable must be in the active model.
              </param>
              <returns>The infeasibility for the variable <c>var</c>.  The
                          infeasibility value returned is 0 (zero)
                          if the variable bounds
                          are satisfied. If the infeasibility value is negative, it
                          specifies the amount by which the lower bound of the variable
                          must be changed; if it is positive, it specifies the amount
                          by which the upper bound of the variable must be changed.
              </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetReducedCosts(ILOG.Concert.INumVar[])" -->
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.INumVar[])">
              <summary>
              Returns infeasibility values for an array of variables.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      One of the variables specified
                                                     in <c>var</c> is not in the
                                                     active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">The array of variables whose infeasibilities are being queried.
                         These variables must be in the active model.
              </param>
              <returns>An array containing the infeasibility values for the variables
                         in <c>var</c>. If <c>infeas</c> is the array
                         returned by this method, <c>infeas[j]</c> will be the
                         infeasibility value for the variable <c>var[j]</c>.
                         The  infeasibility value returned is 0 (zero)
                          if the variable bounds
                          are satisfied. If the infeasibility value is negative, it
                          specifies the amount by which the lower bound of the variable
                          must be changed; if it is positive, it specifies the amount
                          by which the upper bound of the variable must be changed.
              </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetReducedCosts(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns infeasibility values for <c>num</c> consecutive variables,
              starting from the index specified by <c>start</c>.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException   One of the specified variables
                                                     in <c>var</c> is not in the
                                                     active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="var">An array of variables whose infeasibilities
                            are being queried. These variables must be in the
                            active model.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                            which to query the infeasibility.
              </param>
              <param name="num">The number of consecutive variables in
                            <c>var</c> for which to query the infeasibility.
              </param>
              <returns>The infeasibility values for the specified variables.  If
                            <c>infeas</c> is the array returned by this method,
                            <c>infeas[j]</c> will be the infeasibility value
                            for the variable <c>var[j+start]</c>.
              </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDuals(ILOG.Concert.ILPMatrix)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDuals(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDual(ILOG.Concert.IRange)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDuals(ILOG.Concert.IRange[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDuals(ILOG.Concert.IRange[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.ILPMatrix)">
              <summary>
              Returns slack values for the constraints corresponding to the
              rows of an LP matrix.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>matrix</c> is not in
                                                        the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for the constraints of which to query the
                            slack values.  This LP matrix must be in active model.
              </param>
              <returns>An array of slack values for the constraints the LP matrix.
                        If <c>s</c> is the array returned by this method,
                        <c>s[i]</c> will be the slack value for the range
                        constraint corresponding to row <c>i</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.ILPMatrix,System.Int32)">
              <summary>
              Returns slack values from the solution pool for the constraints
              corresponding to the rows of an LP matrix.
              </summary>
             <remarks>
              
            
            
             <exception>UnknownObjectException      <c>matrix</c> is not in
                                                        the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for the constraints of which to query the
                            slack values.  This LP matrix must be in active model.
              </param>
              <param name="soln">The index of the solution pool member for which to
                            return slack values.  A value of
                            Cplex.IncumbentId specifies
                            that the values returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>An array of slack values for the constraints the LP matrix.
                        If <c>s</c> is the array returned by this method,
                        <c>s[i]</c> will be the slack value for the range
                        constraint corresponding to row <c>i</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.ILPMatrix)">
              <summary>
              Returns infeasibility values for the constraints corresponding to the
              rows of an LP matrix.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException  The LP matrix <c>matrix</c>
                                                    is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the infeasibility.
                            This LP matrix must be in the active model.
              </param>
              <returns>An array containing the infeasibility values for
                            the constraints
                            corresponding to the rows of <c>matrix</c>.
                            If <c>infeas</c> is the array returned by this method,
                            <c>infeas[j]</c> will be the infeasibility value for
                            the constraint corresponding to row <c>j</c> of
                            <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
              <summary>
              Returns slack values for a range of <c>num</c> consecutive rows,
              starting from the index specified by <c>start</c>, of an LP matrix.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException      <c>matrix</c> is not in
                                                        the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for rows which to query slack values.
                            This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first row whose slack value
                            is being queried.
              </param>
              <param name="num">The number of consecutive rows for which
                            to query the slack value.
              </param>
              <returns>An array containing the slack vector for the constraints
                        corresponding to the specified rows of the LP matrix.
                        If <c>s</c> is the array returned by this method,
                        <c>s[i]</c> will be the slack value for the
                        constraint corresponding to row <c>i+start</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.ILPMatrix,System.Int32,System.Int32,System.Int32)">
              <summary>
              Returns slack values from the solution pool
              for a range of <c>num</c> consecutive rows,
              starting from the index specified by <c>start</c>, of an LP matrix.
              </summary>
             <remarks>
              
            
            
            
            
             <exception>UnknownObjectException      <c>matrix</c> is not in
                                                        the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for rows which to query slack values.
                            This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first row whose slack value
                            is being queried.
              </param>
              <param name="num">The number of consecutive rows for which
                            to query the slack value.
              </param>
              <param name="soln">The index of the solution pool member for which to
                            return slack values.  A value of
                            Cplex.IncumbentId specifies
                            that the values returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>An array containing the slack vector for the constraints
                        corresponding to the specified rows of the LP matrix.
                        If <c>s</c> is the array returned by this method,
                        <c>s[i]</c> will be the slack value for the
                        constraint corresponding to row <c>i+start</c> of
                        <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
              <summary>
              Returns infeasibility values for the constraints
              corresponding to a range of <c>num</c>
              rows of LP matrix, starting from the row specified by
              <c>start</c>.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException  The LP matrix <c>matrix</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the infeasibility.
                                This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first row in <c>matrix</c>
                                for which to query the infeasibility.
              </param>
              <param name="num">The number of consecutive rows for which to query the
                                infeasibility.
              </param>
              <returns>The infeasibility values for the specified rows of LP matrix.  If
                      <c>infeas</c> is the array returned by this method,
                      <c>infeas[j]</c> will be the infeasibility value
                      for the constraint corresponding to row <c>j+start</c>
                      of <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlack(ILOG.Concert.IRange)">
              <summary>
              Returns the slack value for a range constraint.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>rng</c> is not in
                                                      the active model
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">The range constraint whose slack value is being queried.
                          This range constraint must be in the active
                          model, either directly or through
                          an instance of <c>ILPMatrix</c>.
              </param>
              <returns>The slack value for a range constraint.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlack(ILOG.Concert.IRange,System.Int32)">
              <summary>
              Returns a slack value from the solution pool for a range constraint.
              </summary>
             <remarks>
              
            
            
             <exception>UnknownObjectException      <c>rng</c> is not in
                                                      the active model
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">The range constraint whose slack value is being queried.
                          This range constraint must be in the active
                          model, either directly or through
                          an instance of <c>ILPMatrix</c>.
              </param>
              <param name="soln">The index of the solution pool member for which to
                            return a slack value.  A value of
                            Cplex.IncumbentId specifies
                            that the value returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>The slack value for a range constraint.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibility(ILOG.Concert.IConstraint)">
              <summary>
              Returns the infeasibility value for a constraint.
              </summary>
             <remarks>  <p>The infeasibility value is 0 (zero) if the constraint is satisfied,
              nonzero otherwise.
              More specifically, for a range constraint with finite lower
              bound and upper bound,
              if the infeasibility value is negative, that value
              specifies the amount by which the lower bound of the range
              must be changed to make the current solution feasible;
              if the value is
              positive, it specifies the amount by which the upper bound of
              the range must be changed.
              For a more general constraint such as
              <c>IOr</c>, <c>IAnd</c>,
              <c>ISOS1</c>, or
              <c>ISOS2</c>, the infeasibility value
              returned is the maximal
              absolute infeasibility value over all range constraints
              and variables created by
              the extraction of the queried constraint. </p>
            
              
            
             <exception>UnknownObjectException      <c>con</c> is not in
                                                      the active model
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="con">The constraint whose infeasibility value is being queried.
                          This constraint must be in the active
                          model, either directly or through
                          an instance of <c>ILPMatrix</c>.
              </param>
              <returns>The infeasibility value for the constraint.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.IRange[])">
              <summary>
              Returns slack values for an array of range constraints.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException  A constraint in <c>rng</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array of constraints whose slack values
                         are being queried. These range constraints must be in the
                         active model, either directly or through
                         an instance of <c>ILPMatrix</c>.
              </param>
              <returns>An array containing the slack values for the constraints
                         in <c>rng</c>.  If <c>s</c> is the array returned
                         by this method, <c>s[i]</c> will be the slack value for
                         the range constraint <c>rng[i]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.IRange[],System.Int32)">
              <summary>
              Returns slack values from the solution pool for an array of
              range constraints.
              </summary>
             <remarks>
              
            
            
             <exception>UnknownObjectException  A constraint in <c>rng</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array of constraints whose slack values
                         are being queried. These range constraints must be in the
                         active model, either directly or through
                         an instance of <c>ILPMatrix</c>.
              </param>
              <param name="soln">The index of the solution pool member for which to
                            return slack values.  A value of
                            Cplex.IncumbentId specifies
                            that the values returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>An array containing the slack values for the constraints
                         in <c>rng</c>.  If <c>s</c> is the array returned
                         by this method, <c>s[i]</c> will be the slack value for
                         the range constraint <c>rng[i]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.IConstraint[])">
              <summary>
              Returns infeasibility values for an array of constraints.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException  A constraint in <c>con</c>
                                                 is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="con">An array of constraints whose infeasibility values
                         are being queried. These constraints must be in the
                         active model, either directly or through
                         an instance of <c>ILPMatrix</c>.
              </param>
              <returns>An array containing the infeasibility values for the
                         constraints in <c>con</c>.
                         If <c>infeas</c> is the array returned
                         by this method, <c>infeas[i]</c> will be the
                         infeasibility value for
                         the constraint <c>con[i]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.IRange[],System.Int32,System.Int32)">
              <summary>
              Returns slack values for <c>num</c> consecutive constraints,
              starting from the index specified by <c>start</c>, from
              an array <c>rng</c>.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException One of the specified constraints
                                                  is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array containing the constraints whose slack values
                           are being queried.  These constraints
                           must be in the active model, either added
                           directly or through an instance of <c>ILPMatrix</c>.
              </param>
              <param name="start">The index of the first constraint in <c>rng</c>
                           whose slack values are being queried.
              </param>
              <param name="num">The number of consecutive constraints in <c>rng</c> for
                           which to query the slack values.
              </param>
              <returns>An array containing the slack values for the specified
                           constraints.  If <c>s</c> is the array returned by this
                           method, <c>s[i]</c> will be the slack value for the
                           range constraint <c>rng[i+start]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSlacks(ILOG.Concert.IRange[],System.Int32,System.Int32,System.Int32)">
              <summary>
              Returns slack values from the solution pool
              for <c>num</c> consecutive constraints,
              starting from the index specified by <c>start</c>, from
              an array <c>rng</c>.
              </summary>
             <remarks>
              
            
            
            
            
             <exception>UnknownObjectException One of the specified constraints
                                                  is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array containing the constraints whose slack values
                           are being queried.  These constraints
                           must be in the active model, either added
                           directly or through an instance of <c>ILPMatrix</c>.
              </param>
              <param name="start">The index of the first constraint in <c>rng</c>
                           whose slack values are being queried.
              </param>
              <param name="num">The number of consecutive constraints in <c>rng</c> for
                           which to query the slack values.
              </param>
              <param name="soln">The index of the solution pool member for which to
                            return slack values.  A value of
                            Cplex.IncumbentId specifies
                            that the values returned should correspond to the
                            incumbent rather than a member of the solution pool.
              </param>
              <returns>An array containing the slack values for the specified
                           constraints.  If <c>s</c> is the array returned by this
                           method, <c>s[i]</c> will be the slack value for the
                           range constraint <c>rng[i+start]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetInfeasibilities(ILOG.Concert.IConstraint[],System.Int32,System.Int32)">
              <summary>
              Returns infeasibility values for <c>num</c> consecutive constraints,
              starting from the index specified by <c>start</c>, from
              an array <c>con</c> of constraints.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException One of the specified constraints
                                                  is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="con">An array containing the constraints whose
                           infeasibility values
                           are being queried.  These constraints
                           must be in the active model, either added
                           directly or through an instance of <c>ILPMatrix</c>.
              </param>
              <param name="start">The index of the first constraint in <c>con</c>
                           whose infeasibility value is being queried.
              </param>
              <param name="num">The number of consecutive constraints in <c>con</c> for
                           which to query the infeasibility values.
              </param>
              <returns>An array containing the infeasibility values
                           for the specified constraints.
                           If <c>infeas</c> is the array returned by this method,
                           <c>infeas[i]</c> will be the infeasibility value
                           for the range constraint <c>con[i+start]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValue(ILOG.Concert.INumExpr)">
             <summary>
             Returns the value that <c>expr</c> takes for the current solution.
             </summary>
             <remarks>
             
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                         of type <c>ILOG.Concert.Exception</c>, or
                                         one of its derived classes, is thrown.</exception></remarks>
                                         <param name="expr">The expression for which to evaluate the current solution.
             </param>
             <returns>The value <c>expr</c> takes for the current solution.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetValue(ILOG.Concert.INumExpr,System.Int32)">
             <summary>
             Returns the value that <c>expr</c> takes for a solution in the
             solution pool.
             </summary>
             <remarks>
             
            
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                         of type <c>ILOG.Concert.Exception</c>, or
                                         one of its derived classes, is thrown.</exception></remarks>
                                         <param name="expr">The expression for which to evaluate the current solution.
             </param>
             <param name="soln">The index of the solution pool member for which to
                           return evaluate the expression.  A value of
                           Cplex.IncumbentId specifies
                           that the value returned should correspond to the
                           incumbent rather than a member of the solution pool.
             </param>
             <returns>The value <c>expr</c> takes for the current solution.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAX(ILOG.Concert.ILPMatrix)">
              <summary>
              Returns an array containing the row activity values for the constraints
              corresponding to the rows of an LP matrix.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>matrix</c> is unknown in
                                                        <c>Cplex</c>.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the row activity values.
                            This LP matrix must be in the active model.
              </param>
              <returns>An array containing the row activity values for the rows of
                            <c>matrix</c>. If <c>ax</c> is the array
                            returned by this method, <c>ax[i]</c> will be the
                            row activity value for the constraint corresponding to row
                            <c>i</c> of <c>matrix</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAX(ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
              <summary>
              Returns row activity values for a range of
              <c>num</c> consecutive rows, starting from the
              index specified by <c>start</c>, of an LP matrix.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException      <c>matrix</c> is unknown in
                                                        <c>Cplex</c>.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="matrix">The LP matrix for which to query the row activity
                                values.  This LP matrix must be in the active model.
              </param>
              <param name="start">The index of the first row for which to query the
                                row activity values.
              </param>
              <param name="num">The number of consecutive rows for which to query the
                                row activity values.
              </param>
              <returns>An array containing the row activity vector for specified rows
                        of LP matrix. If <c>ax</c> is the
                        array returned by this method, <c>ax[i]</c> will be the
                        row activity value for the constraint corresponding to row
                        <c>i+start</c> of the <c>ILPMatrix</c> matrix.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAX(ILOG.Concert.IRange)">
              <summary>
              Returns the row activity value for a range constraint.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      <c>rng</c> is not in
                                                      the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">The range constraint whose row activity value is
                          being queried.  This range constraint must be in the
                          active model, either directly or through an
                          <c>ILPMatrix</c> object.
              </param>
              <returns>The row activity value for <c>rng</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAX(ILOG.Concert.IRange[])">
              <summary>
              Returns row activity values for an array of range constraints.
              </summary>
             <remarks>
              
            
             <exception>UnknownObjectException      A constraint in <c>rng</c>
                                                      is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array of range constraints whose row activity values
                          are being queried.  These range constraints must all be in
                          the active model, either directly or through an
                          <c>ILPMatrix</c> object.
              </param>
              <returns>The row activity values for the range constraints in
                          <c>rng</c>. If <c>ax</c> is the array returned by
                          this method, <c>ax[i]</c> will be the row activity value
                          for the range constraint <c>rng[i]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAX(ILOG.Concert.IRange[],System.Int32,System.Int32)">
              <summary>
              Queries row activity values for a set of range constraints.
              </summary>
             <remarks>
              
            
            
            
             <exception>UnknownObjectException  One of the specified constraints
                                                   is not in the active model.
              </exception>
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="rng">An array containing the range constraints whose row
                           activity values are being queried.  These range constraints
                           must be in the active model, either directly or through an
                           <c>ILPMatrix</c> object.
              </param>
              <param name="start">The index of the first range constraint in <c>rng</c>
                           for which to query the row activity value.
              </param>
              <param name="num">The number of consecutive range constraints
                           in <c>rng</c> for
                           which to query the row activity value.
              </param>
              <returns>The row activity values for the specified range constraints.
                           If <c>ax</c> is the array returned by this method,
                           <c>ax[i]</c> will be the row activity value for the
                           constraint <c>rng[i+start]</c>.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatus(ILOG.Concert.INumVar)">
              <summary>
              Returns the basis status for the variable <c>var</c>.
              </summary>
             <remarks>  <p>This method
              succeeds only if a basic solution is available in the invoking
              <c>Cplex</c> optimizer.
              </p>
            
              
             </remarks>
             <param name="var">The variable whose basis status is being queried.
              </param>
              <returns>The basis status for the variable <c>var</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatuses(ILOG.Concert.INumVar[])">
              <summary>
              Returns basis statuses for the variables in the specified array.
              </summary>
             <remarks>  <p>
              This method succeeds only if a basic solution is available in the
              invoking <c>Cplex</c> optimizer.
              </p>
            
              
             </remarks>
             <param name="var">The array of variables whose basis statuses are being queried.
              </param>
              <returns>The basis statuses for the variables <c>var</c>.  If
                         <c>b</c> is the returned array, <c>b[j]</c>
                         will be the basis status for the variable <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatuses(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns basis statuses for <c>num</c> consecutive variables,
              starting from the index specified by <c>start</c>,
              in the array <c>var</c>.
              </summary>
             <remarks>  <p>
              This method succeeds only if a basic solution is available in the
              invoking <c>Cplex</c> optimizer.
              </p>
            
              
            
            
             </remarks>
             <param name="var">An array containing the variables whose basis statuses
                           are being queried.
              </param>
              <param name="start">The index of the first variable in the array <c>var</c>
                           for which to return basis statuses.
              </param>
              <param name="num">The number of consecutive variables in
                           the array <c>var</c> for
                           which to return basis statuses.
              </param>
              <returns>The basis statuses for the specified variables in
                           <c>var</c>.  If <c>b</c> is the returned array,
                           <c>b[j]</c> will be the basis status for the variable
                           <c>var[j+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatus(ILOG.Concert.IConstraint)">
              <summary>
              Returns the basis status for the constraint <c>con</c>.
              </summary>
             <remarks>  <p>This method  succeeds only if a basic solution is available
              in the invoking <c>Cplex</c> optimizer. </p>
            
              
             </remarks>
             <param name="con">The constraint whose basis status is being queried.
              </param>
              <returns>The basis status for constraint <c>rng</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatuses(ILOG.Concert.IConstraint[])">
              <summary>
              Returns basis statuses for the constraints in the specified array.
              </summary>
             <remarks>  <p>This method succeeds only if a basic solution is available in the
              invoking <c>Cplex</c> optimizer.</p>
            
              
             </remarks>
             <param name="con">The array of constraints whose basis statuses are being
                          queried.
              </param>
              <returns>An array containing the basis statuses for the constraints
                          in <c>con</c>.  If  <c>b</c> is the returned
                          array, <c>b[i]</c>  will be the basis status for
                          constraints <c>con[i]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBasisStatuses(ILOG.Concert.IConstraint[],System.Int32,System.Int32)">
              <summary>
              Returns basis statuses for <c>num</c> consecutive
              constraints, starting from the index specified by
              <c>start</c>, in the array of constraints <c>con</c>.
              </summary>
             <remarks>  <p>
              This method succeeds only if a basic solution is available in the
              invoking <c>Cplex</c> optimizer.
              </p>
            
              
            
            
             </remarks>
             <param name="con">An array containing the constraints whose basis statuses
                           are being queried.
              </param>
              <param name="start">The index of the first constraint in
                           the array <c>con</c>
                           for which to return the basis status.
              </param>
              <param name="num">The number of consecutive constraints in
                           the array <c>con</c> for
                           which to return the basis status.
              </param>
              <returns>An array containing the basis statuses for constraints in
                           <c>con</c>.  If <c>b</c> is the returned array,
                           <c>b[i]</c> will be the basis status for constraint
                           <c>con[i+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetBasisStatuses(ILOG.Concert.INumVar[],ILOG.CPLEX.Cplex.BasisStatus[],ILOG.Concert.IRange[],ILOG.CPLEX.Cplex.BasisStatus[])">
             <summary>
             Sets basis statuses for variables and constraints.
             </summary>
            <param name="var">An array of variables whose basis statuses are being set.
             </param>
             <param name="cstat">An array of basis statuses for variables in
                          <c>var</c>.  The basis status for the variable
                          <c>var[j]</c> will be set to <c>cstat[j]</c>.
             </param>
             <param name="con">An array of constraints whose basis statuses are being set.
             </param>
             <param name="rstat">An array of basis statuses for the ranges in
                          <c>con</c>.  The basis status for constraint
                          <c>con[i]</c> will be set to <c>rstat[i]</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetBasisStatuses(ILOG.Concert.INumVar[],ILOG.CPLEX.Cplex.BasisStatus[],System.Int32,System.Int32,ILOG.Concert.IConstraint[],ILOG.CPLEX.Cplex.BasisStatus[],System.Int32,System.Int32)">
             <summary>
             Sets basis statuses for <c>cnum</c> consecutive
             variables, starting from the index specified by <c>var[start]</c>,
             and <c>rnum</c> consecutive constraints, starting from the
             index specified by <c>con[start]</c>.
             </summary>
            <param name="var">An array of variables whose
                               basis statuses are being set.
             </param>
             <param name="cstat">An array containing the basis statuses for the
                               variables specified in <c>var</c>.
             </param>
             <param name="cstart">The first element in <c>var</c> and
                               <c>cstat</c> to consider.
             </param>
             <param name="cnum">The number of variables in <c>var</c> for which to
                               set the basis status.
             </param>
             <param name="con">An array of constraints whose
                               basis statuses are being set.
             </param>
             <param name="rstat">An array containing the basis statuses for the ranges
                               specified in <c>con</c>.
             </param>
             <param name="rstart">The first element in <c>con</c> and
                               <c>rstat</c> to consider.
             </param>
             <param name="rnum">The number of constraints in <c>con</c> for which
                               to set the basis status.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetVectors(System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Double[],System.Double[],ILOG.Concert.IRange[])">
            
             <remarks>@proof-read
             @deprecated: As of release 12.5,
                          replaced by {@link #setStart()} for continuous models 
                          and {@link #addMIPStart()} for MIP.
             
              Specifies a starting point for the next invocation of the method
              <c>solve</c>.
              <p>Starting point information is exploited at the next call of the method
              <c>solve</c>.  In particular, if the active model
              is an LP or QP, and the parameter <c>Cplex.IntParam.RootAlg</c>
              is <c>Cplex.Algorithm.Primal</c> or
              <c>Cplex.Algorithm.Dual</c>, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex algorithm.</p>
              <p>
              If the active model is a MIP, only <c>x</c> values can be used.
              Values may be specified for any subset of the integer and
              continuous variables
              in the model, either through a single invocation of
              <c>setVectors</c>,
              or incrementally through multiple calls.
             </p><p>
             If this method is called several time with different values for the
             same variable, then the last value replaces the previous values.
             If the value specified for a variable is greater than or equal to
             <c>CPX_INFBOUND</c>, then no value is set for that variable.
             </p><p>
              When optimization commences or resumes, CPLEX will attempt to
              find a feasible MIP solution that is compatible with the set of specified
              <c>x</c> values.  When start values are not provided for all integer
              variables, CPLEX tries to extend the partial solution to a
              complete solution
              by solving a MIP on the unspecified variables.  The parameter
              <c>SubMIPNodeLim</c> controls the amount of effort CPLEX expends in
              trying to solve this secondary MIP.  If CPLEX finds a complete
              feasible solution, that solution becomes the incumbent.  If the
              specified values are infeasible, they are retained for use in a subsequent
              solution repair heuristic.  The amount of effort spent in this heuristic
              can be controlled by parameter <c>RepairTries</c>.
              </p>
              <p>
              The starting point information is provided in the arguments of this
              method. Any of the arrays will accept <c>null</c> as an argument.
              However, if <c>x</c> or <c>dj</c> are not
              <c>null</c>, <c>var</c> must not be <c>null</c>.
              Similarly, if <c>slack</c> or <c>pi</c> are not
              <c>null</c>, <c>rng</c> must not be <c>null</c>.</p>
            
              <p>
              When CPLEX is solving a MIP and the argument <c>pi</c> is not
              zero, then you must <strong>disable presolve</strong>. If you do not
              disable presolve in those conditions, then the method
              <c>setVectors</c> fails when it is unable to crush a pi
              vector for the original model into appropriate values for the
              presolved model.
              </p>
            
              <p>
              For all variables given in <c>var</c>, <c>x[j]</c> specifies
              the starting primal value for the variable <c>var[j]</c>. Similarly,
              <c>dj[j]</c> specifies the starting reduced cost for the variable
              <c>var[j]</c>. For all ranges specified in <c>rng</c>,
              <c>slack[i]</c> specifies the starting slack value for
              <c>rng[i]</c>. Similarly, <c>pi[i]</c> specifies the starting
              dual value for <c>rng[i]</c>.</p>
            
              
            
            
            
            
             </remarks>
             <param name="x">The array of starting primal values for <c>var</c>.
              </param>
              <param name="dj">The array of starting reduced costs for <c>var</c>.
              </param>
              <param name="var">The array of variables for which to set starting point
                           information.
              </param>
              <param name="slack">The array of starting slack values for <c>rng</c>.
              </param>
              <param name="pi">The array of starting dual values for <c>rng</c>.
              </param>
              <param name="rng">The array of constraints for which to set starting point
                           information.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetVectors(System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[],System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
            
             <remarks>@proof-read
             @deprecated: As of release 12.5,
                          replaced by {@link #setStart()} for continuous models 
                          and {@link #addMIPStart()} for MIP.
             
              Specifies a partial starting point for the next invocation of the method
              <c>solve</c>.
              <p>Starting point information is exploited at the next call of the method
              <c>solve</c>.  In particular, if the active model
              is an LP or QP, and the parameter <c>Cplex.IntParam.RootAlg</c>
              is <c>Cplex.Algorithm.Primal</c> or
              <c>Cplex.Algorithm.Dual</c>, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex algorithm.</p>
              <p>
              If the active model is a MIP, only <c>x</c> values can be used.
              Values may be specified for any subset of the integer and
              continuous variables
              in the model, either through a single invocation of
              <c>setVectors</c>,
              or incrementally through multiple calls.
             </p><p>
             If this method is called several time with different values for the
             same variable, then the last value replaces the previous values.
             If the value specified for a variable is greater than or equal to
             <c>CPX_INFBOUND</c>, then no value is set for that variable.
             </p><p>
              When optimization commences or resumes, CPLEX will attempt to
              find a feasible MIP solution that is compatible with the set of specified
              <c>x</c> values.  When start values are not provided for all integer
              variables, CPLEX tries to extend the partial solution to a
              complete solution
              by solving a MIP on the unspecified variables.  The parameter
              <c>SubMIPNodeLim</c> controls the amount of effort CPLEX expends in
              trying to solve this secondary MIP.  If CPLEX finds a complete
              feasible solution, that solution becomes the incumbent.  If the
              specified values are infeasible, they are retained for use in a subsequent
              solution repair heuristic.  The amount of effort spent in this heuristic
              can be controlled by parameter <c>RepairTries</c>.
              </p>
              <p>
              The starting point information is provided in the arguments of this
              method.  Any of the arrays accept <c>null</c> as an argument.
              However, if <c>x</c> or <c>dj</c> are not <c>null</c>,
              <c>var</c> must not be <c>null</c>.  Similarly, if
              <c>slack</c> or <c>pi</c> are not <c>null</c>,
              <c>rng</c> must not be <c>null</c>.  Also, if
              <c>vnum</c> is not 0 (zero), <c>x</c> and <c>dj</c> must
              not both be <c>null</c>, and if <c>rnum</c> is not 0 (zero),
              <c>slack</c> and <c>pi</c> must not both be
              <c>null</c>.</p>
            
              <p>
              When CPLEX is solving a MIP and the argument <c>pi</c> is not
              zero, then you must <strong>disable presolve</strong>. If you do not
              disable presolve in those conditions, then the method
              <c>setVectors</c> fails when it is unable to crush a pi
              vector for the original model into appropriate values for the
              presolved model.
              </p>
            
              <p>
              For the variables specified in <c>var</c>, <c>x[j]</c> is
              the primal starting value for the variable <c>var[j]</c>. Similarly,
              <c>dj[j]</c> is the starting reduced cost for the variable
              <c>var[j]</c>.  For the constraints specified in <c>rng</c>,
              <c>slack[i]</c> is the starting slack value for
              <c>rng[i]</c>. Similarly, <c>pi[i]</c> is the starting
              dual value for <c>rng[i]</c>.</p>
            
              
            
            
            
            
            
            
            
            
             </remarks>
             <param name="x">An array of starting values for the variables
                            specified in <c>var</c>.
              </param>
              <param name="dj">An array of starting reduced costs for the variables
                            specified in <c>var</c>.
              </param>
              <param name="var">An array containing the variables for which to set starting
                            point information.
              </param>
              <param name="vstart">The index of the first element in the arrays
                            <c>x</c>, <c>dj</c>, or <c>var</c>
                            to be used.
              </param>
              <param name="vnum">The number of consecutive variables in the
                            array <c>var</c>
                            for which starting point information is to be set.
              </param>
              <param name="slack">An array of starting slack values for <c>rng</c>.
              </param>
              <param name="pi">An array of starting dual values for <c>rng</c>.
              </param>
              <param name="rng">An array containing the constraints for which to set
                            starting point information.
              </param>
              <param name="rstart">The index of the first element in <c>slack</c>,
                            <c>pi</c>, or <c>rng</c> to be used.
              </param>
              <param name="rnum">The number of consecutive constraints in the
                            array <c>rng</c>
                            for which starting point information is to be set.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetStart(System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Double[],System.Double[],ILOG.Concert.IRange[])">
            
             <remarks>@proof-read
              Specifies a starting point for the next invocation of the method
              <c>solve</c>.
              <p>Starting point information is exploited at the next call of the method
              <c>solve</c>.  In particular, if the active model
              is an LP or QP, and the parameter <c>Cplex.IntParam.RootAlg</c>
              is <c>Cplex.Algorithm.Primal</c> or
              <c>Cplex.Algorithm.Dual</c>, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex algorithm.</p>
              <p>
              The starting point information is provided in the arguments of this
              method. Any of the arrays will accept <c>null</c> as an argument.
              However, if <c>x</c> or <c>dj</c> are not
              <c>null</c>, <c>var</c> must not be <c>null</c>.
              Similarly, if <c>slack</c> or <c>pi</c> are not
              <c>null</c>, <c>rng</c> must not be <c>null</c>.</p>
            
              <p>
              When CPLEX is solving a MIP this information is not used.  Use
              <c>addMIPstart</c> to specify a starting solution candidate.
              </p>
            
              <p>
              For all variables given in <c>var</c>, <c>x[j]</c> specifies
              the starting primal value for the variable <c>var[j]</c>. Similarly,
              <c>dj[j]</c> specifies the starting reduced cost for the variable
              <c>var[j]</c>. For all ranges specified in <c>rng</c>,
              <c>slack[i]</c> specifies the starting slack value for
              <c>rng[i]</c>. Similarly, <c>pi[i]</c> specifies the starting
              dual value for <c>rng[i]</c>.</p>
            
              
            
            
            
            
             </remarks>
             <param name="x">The array of starting primal values for <c>var</c>.
              </param>
              <param name="dj">The array of starting reduced costs for <c>var</c>.
              </param>
              <param name="var">The array of variables for which to set starting point
                           information.
              </param>
              <param name="slack">The array of starting slack values for <c>rng</c>.
              </param>
              <param name="pi">The array of starting dual values for <c>rng</c>.
              </param>
              <param name="rng">The array of constraints for which to set starting point
                           information.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetStart(System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[],System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
            
             <remarks>@proof-read
              Specifies a partial starting point for the next invocation of the method
              <c>solve</c>.
              <p>Starting point information is exploited at the next call of the method
              <c>solve</c>.  In particular, if the active model
              is an LP or QP, and the parameter <c>Cplex.IntParam.RootAlg</c>
              is <c>Cplex.Algorithm.Primal</c> or
              <c>Cplex.Algorithm.Dual</c>, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex algorithm.</p>
              <p>
              The starting point information is provided in the arguments of this
              method.  Any of the arrays accept <c>null</c> as an argument.
              However, if <c>x</c> or <c>dj</c> are not <c>null</c>,
              <c>var</c> must not be <c>null</c>.  Similarly, if
              <c>slack</c> or <c>pi</c> are not <c>null</c>,
              <c>rng</c> must not be <c>null</c>.  Also, if
              <c>vnum</c> is not 0 (zero), <c>x</c> and <c>dj</c> must
              not both be <c>null</c>, and if <c>rnum</c> is not 0 (zero),
              <c>slack</c> and <c>pi</c> must not both be
              <c>null</c>.</p>
            
              <p>
              When CPLEX is solving a MIP this information is not used.  Use
              <c>addMIPstart</c> to specify a starting solution candidate.
              </p>
            
              <p>
              For the variables specified in <c>var</c>, <c>x[j]</c> is
              the primal starting value for the variable <c>var[j]</c>. Similarly,
              <c>dj[j]</c> is the starting reduced cost for the variable
              <c>var[j]</c>.  For the constraints specified in <c>rng</c>,
              <c>slack[i]</c> is the starting slack value for
              <c>rng[i]</c>. Similarly, <c>pi[i]</c> is the starting
              dual value for <c>rng[i]</c>.</p>
            
              
            
            
            
            
            
            
            
            
             </remarks>
             <param name="x">An array of starting values for the variables
                            specified in <c>var</c>.
              </param>
              <param name="dj">An array of starting reduced costs for the variables
                            specified in <c>var</c>.
              </param>
              <param name="var">An array containing the variables for which to set starting
                            point information.
              </param>
              <param name="vstart">The index of the first element in the arrays
                            <c>x</c>, <c>dj</c>, or <c>var</c>
                            to be used.
              </param>
              <param name="vnum">The number of consecutive variables in the
                            array <c>var</c>
                            for which starting point information is to be set.
              </param>
              <param name="slack">An array of starting slack values for <c>rng</c>.
              </param>
              <param name="pi">An array of starting dual values for <c>rng</c>.
              </param>
              <param name="rng">An array containing the constraints for which to set
                            starting point information.
              </param>
              <param name="rstart">The index of the first element in <c>slack</c>,
                            <c>pi</c>, or <c>rng</c> to be used.
              </param>
              <param name="rnum">The number of consecutive constraints in the
                            array <c>rng</c>
                            for which starting point information is to be set.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,ILOG.CPLEX.Cplex.MIPStartEffort,System.String)">
             <summary>
             Adds a MIP start, defined by a range of numeric variables
             and corresponding values, with its name and an effort level.
             </summary>
             <remarks>
             <p>This method adds a MIP start to the current problem. The argument
             <c>vstart</c> is an index into the two arrays <c>vars</c>
             and <c>values</c>. It designates the variable at which the range
             of variables and values defining the MIP start begins. The argument
             <c>vnum</c> specifies how many pairs of variables and values
             make up the range defining the MIP start.</p>
            
             <p>There is not a method to create a MIP start from a multidimensional
             array of variables. In order to create a MIP start from a
             multidimensional array of variables, you first must copy all those
             variables into a flat array. See the topic "Starting from a solution:
             MIP starts" in the <em>CPLEX User's Manual</em> for a sample of this
             method with a multidimensional array.</p>
            
            
             
            
            
            
            
             </remarks>
             <param name="vars">An array of numeric variables participating in the range
                          that defines the MIP start.
            
             </param>
             <param name="values">An array of values corresponding to the variables defining
                           the MIP start.
            
             </param>
             <param name="vstart">An index into the two arrays. It designates the beginning
                           of the range defining the MIP start.
            
             </param>
             <param name="vnum">The number of pairs of variable and value that define
                           the MIP start.
            
             </param>
             <param name="effort">The level of effort that CPLEX should expend to solve
                           the MIP start.
            
             </param>
             <param name="name">The name of the MIP start.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.Concert.INumVar[],System.Double[],ILOG.CPLEX.Cplex.MIPStartEffort,System.String)">
            <summary>
            Adds a MIP start as specified by its variables and values,
            along with its specified level of effort and its name, to
            the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.CPLEX.Cplex.MIPStartEffort,System.String)">
            <summary>
            Adds the MIP start, its name, and an effort level to the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.Concert.INumVar[],System.Double[],ILOG.CPLEX.Cplex.MIPStartEffort)">
            <summary>
            Adds a MIP start, as defined by its variables and values, with
            its specified level of effort, to the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.Concert.INumVar[],System.Double[])">
            <summary>
            Adds the MIP start specified by its variables and values to
            the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.Concert.INumVar[],System.Double[],System.String)">
            <summary>
            Adds the MIP start specified by its variables and values,
            along with its name, to the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(ILOG.CPLEX.Cplex.MIPStartEffort)">
            <summary>
            Adds a MIP start with its specified level of effort to the current
            problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart(System.String)">
            <summary>
            Adds a MIP start with its specified name to the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddMIPStart">
            <summary>
            Adds an empty MIP start to the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ChangeMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,ILOG.CPLEX.Cplex.MIPStartEffort)">
            <summary>
            Changes the MIP start specified by its index in the current
            problem, by substituting the corresponding number of values from the
            starting variable specified by the variable index.
            </summary>
            <param name="mipstartindex">The index of the MIP start among the MIP starts
                                 associated with the current problem.
            </param>
            <param name="vars">An array of variables to define the MIP start.
            </param>
            <param name="values">The corresponding values to change.
            </param>
            <param name="vstart">Index of the starting variable.
            </param>
            <param name="vnum">Number of variables to change.
            </param>
            <param name="effort">Level of effort for CPLEX to exert to solve the
                                 resulting changed MIP start.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ChangeMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Double[],ILOG.CPLEX.Cplex.MIPStartEffort)">
            <summary>
            Changes the MIP start specified by its index in the current problem
            by substituting the corresponding values of the designated variables
            and associates a level of effort with the changed MIP start.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DeleteMIPStarts(System.Int32,System.Int32)">
            <summary>
            Deletes a number of MIP starts, starting with the MIP start
            designated by its index.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DeleteMIPStarts(System.Int32)">
            <summary>
            Deletes the MIP start designated by its index.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ChangeMIPStart(System.Int32,ILOG.CPLEX.Cplex.MIPStartEffort)">
            <summary>
            Changes the MIP start designated by its index and associates
            a specified level of effort with the changed MIP start.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ChangeMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Double[])">
            <summary>
            Changes the MIP start designated by its index by substituting the
            the corresponding values for the designated variables.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNMIPStarts">
            <summary>
            Returns the number of MIP starts associated with the current problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStartName(System.Int32)">
            <summary>
            Returns the name of the MIP start specified by its index.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStartIndex(System.String)">
            <summary>
            Returns the index of the MIP start specified by its name.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[],System.Boolean[])">
             <summary>
             Returns the level of effort associated with the MIP start
             identified by its index, defined by a range of pairs of
             variable and the corresponding value from two arrays.
             </summary>
             <param name="mipstartindex">The index of the MIP start among all the
                                   MIP starts associated with the current problem.
             </param>
             <param name="vars">An array of numeric variables to define the MIP start.
                          This array is an input argument. It will not be modified by
                          this method. It may be null; if it is not null, then
                          none of its elements may be null.
            
             </param>
             <param name="begin">An index into the two arrays; it specifies where the
                          range of defining pairs begins.
            
             </param>
             <param name="num">The number of pairs of variable and value that participate
                          in the range defining the MIP start.
            
             </param>
             <param name="values">The values corresponding to the variables.
                          This array is an output argument. Its values will be
                          modified by this method. Upon return of the method,
                          the array will contain the start values of the variables
                          specified in the array <c>vars</c> and by the
                          arguments <c>begin</c> and <c>num</c> if
                          they are present.  If the array <c>vars</c>
                          is not null, then the array <c>values</c> must not
                          be null either. For variables in <c>vars</c>
                          that are specified in the MIP start, the respective
                          slot in <c>vals</c> will be set to 0 (zero).
            
             </param>
             <param name="isset">An array of Boolean values that specify whether or not
                           the corresponding variable is set in the MIP start.
                           This array is an output argument. Its values will be
                           modified by the method. Upon return of the method,
                           the array will contain a value of true or false
                           for the variables specified by <c>vars</c>
                           and by the arguments <c>begin</c> and
                           <c>num</c> if they are present, depending on
                           whether the variable is part of the MIP start or not.
            
             </param>
             <returns>The level of effort associated with the MIP start.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Double[],System.Boolean[])">
             <summary>
             Returns the level of effort associated with the MIP start
             identified by its index, defined by two arrays of
             variables and the corresponding values.
             </summary>
             <param name="mipstartindex">The index of the MIP start among all the
                                   MIP starts associated with the current problem.
             </param>
             <param name="vars">An array of numeric variables to define the MIP start.
                          This array is an input argument. It will not be modified by
                          this method. It may be null; if it is not null, then
                          none of its elements may be null.
            
             </param>
             <param name="values">The values corresponding to the variables.
                          This array is an output argument. Its values will be
                          modified by this method. Upon return of the method,
                          the array will contain the start values of the variables
                          specified in the array <c>vars</c>.
                          If the array <c>vars</c>
                          is not null, then the array <c>values</c> must not
                          be null either. For variables in <c>vars</c>
                          that are specified in the MIP start, the respective
                          slot in <c>vals</c> will be set to 0 (zero).
            
            
             </param>
             <param name="isset">An array of Boolean values that specify whether or not
                           the corresponding variable is set in the MIP start.
                           This array is an output argument. Its values will be
                           modified by the method. Upon return of the method,
                           the array will contain a value of true or false
                           for the variables specified by <c>vars</c>
                           depending on
                           whether the variable is part of the MIP start or not.
            
             </param>
             <returns>The level of effort associated with the MIP start.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[])">
             <summary>
             Returns the level of effort associated with
             a MIP start, identified by its index and
             defined by a range of numeric variables
             and corresponding values.
             </summary>
             <param name="mipstartindex">The index of the MIP start among all the
                                   MIP starts associated with the current problem.
            
             </param>
             <param name="vars">An array of numeric variables participating in the range
                          that defines the MIP start.
                          This array is an input argument. It will not be modified by
                          this method. It may be null; if it is not null, then
                          none of its elements may be null.
            
             </param>
             <param name="begin">An index into the two arrays. It designates the beginning
                           of the range defining the MIP start.
            
             </param>
             <param name="num">The number of pairs of variable and value that define
                           the MIP start.
            
             </param>
             <param name="values">An array of values corresponding to the variables defining
                           the MIP start.
                          This array is an output argument. Its values will be
                          modified by this method. Upon return of the method,
                          the array will contain the start values of the variables
                          specified in the array <c>vars</c> and by the
                          arguments <c>begin</c> and <c>num</c> if
                          they are present.  If the array <c>vars</c>
                          is not null, then the array <c>values</c> must not
                          be null either. For variables in <c>vars</c>
                          that are specified in the MIP start, the respective
                          slot in <c>vals</c> will be set to 0 (zero).
            
            
             </param>
             <returns>The level of effort associated with the MIP start.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStart(System.Int32,ILOG.Concert.INumVar[],System.Double[])">
             <summary>
             Returns the level of effort associated with
             a MIP start, identified by its index and
             defined by an array of numeric variables
             and an array of corresponding values.
             </summary>
             <param name="mipstartindex">The index of the MIP start among all the
                                   MIP starts associated with the current problem.
            
             </param>
             <param name="vars">An array of numeric variables that defines the MIP start.
                          This array is an input argument. It will not be modified by
                          this method. It may be null; if it is not null, then
                          none of its elements may be null.
            
             </param>
             <param name="values">An array of values corresponding to the variables defining
                           the MIP start.
                          This array is an output argument. Its values will be
                          modified by this method. Upon return of the method,
                          the array will contain the start values of the variables
                          specified in the array <c>vars</c>.
                          If the array <c>vars</c>
                          is not null, then the array <c>values</c> must not
                          be null either. For variables in <c>vars</c>
                          that are specified in the MIP start, the respective
                          slot in <c>vals</c> will be set to 0 (zero).
            
            
             </param>
             <returns>The level of effort associated with the MIP start.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetMIPStart(System.Int32)">
            <summary>
            Returns the level of effort associated with a MIP start, identified
            by its index among all the MIP starts associated with the current
            problem.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FeasOpt(ILOG.Concert.IConstraint[],System.Double[])">
              <summary>
              This method computes a minimum-cost relaxation
              in order to make the active model feasible by relaxing the constraints
              specified in <c>cts</c>.
              </summary>
             <remarks>
              <p>On successful completion, the
              method installs a solution vector that is feasible for the
              minimum-cost relaxation.
              This solution can be queried with conventional query methods, such as
              <c>Cplex.GetValue</c>.</p>
            
              <p>The method <c>feasOpt</c> provides several different
              metrics for determining what constitutes a minimum-cost relaxation.
              The metric is specified by the parameter <c>FeasOptMode</c>.
              The method <c>feasOpt</c> can also optionally perform a second
              optimization phase where the original objective is optimized,
              subject to the constraint that the associated relaxation must
              have the same cost as the minimum-cost relaxation computed in the first
              phase.  See
              
               Cplex.Relaxation 
              for further information.
              </p>
              <p>The user may specify numeric values to express relative preferences
              for relaxing bounds.  A larger preference value specifies a
              greater willingness to relax the corresponding bound.
              Internally, <c>feasOpt</c> uses the
              reciprocal of the preference value to weight the
              relaxations of the associated
              bounds in the phase one cost function.
              A negative or 0 (zero) value specifies that the corresponding bound must
              not be relaxed.  If a preference is specified for a ranged constraint,
              that preference is used for both its upper and lower bound.
              </p>
              <p>
              If enough constraints were allowed to be relaxed, the
              function will return <c>true</c>; otherwise, it returns
              <c>false</c>.
              </p>
              <p>The active model is not changed by this method.
             If <c>feasOpt</c> finds a feasible solution,
             it returns the solution and the corresponding objective
             in terms of the original model.  </p>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
              
            
             </remarks>
             <param name="cts">An array of constraints that can be relaxed.
                                Only constraints directly added to the model
                                can be specified in this array.
                                Groups of constraints can be combined and
                                specified by <c>and</c> constraints.
                                Relaxation preference values can be specified in
                                the array <c>prefs</c>.
              </param>
              <param name="prefs">An array of doubles specifying the preference value
                                for relaxing the constraints listed in
                                <c>cts</c>.  The element
                                <c>prefs[i]</c> specifies the preference value
                                for relaxing the constraint <c>cts[i]</c>.
            
             </param>
             <returns><c>true</c> if a relaxation is found;
                     <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FeasOpt(ILOG.Concert.IRange[],System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Double[],System.Double[])">
              <summary>
              This method computes a minimum-cost relaxation
              in order to make the active model feasible by relaxing the bounds
              of the variables specified in the array <c>vars</c> and
              by relaxing the bounds of the range constraints specified in
              the array <c>rngs</c>.
              </summary>
             <remarks>
              <p>On successful completion, the
              method installs a solution vector that is feasible for the
              minimum-cost relaxation.
              This solution can be queried with conventional query methods, such as
              
               Cplex.GetValue or Cplex.GetInfeasibility. 
              </p>
              <p>The method <c>feasOpt</c> provides several different
              metrics for determining what constitutes a minimum-cost relaxation.
              The metric is specified by the parameter <c>FeasOptMode</c>.
              The <c>feasOpt</c> method can also optionally perform a second
              optimization phase where the original objective is optimized,
              subject to the constraint that the associated relaxation must
              have the same cost as the minimum-cost relaxation computed in the first
              phase.  See
              
               Cplex.Relaxation 
              for further information.
              </p>
              <p>The user may specify numeric values to express relative preferences
              for relaxing bounds.  A larger preference value specifies
              a greater willingness to relax the corresponding bound.
              Internally, <c>feasOpt</c> uses the
              reciprocal of the preference value to weight
              the relaxations of the associated
              bounds in the phase one cost function.
              A negative or 0 (zero) value specifies that the corresponding bound must
              not be relaxed.  These preference values are entered in the arguments
              <c>rnglb</c>, <c>rngub</c>, <c>varlb</c>,
              and <c>varub</c>.
              </p>
              <p>
              If enough variables or constraints were allowed to be relaxed, the
              function will return <c>true</c>; otherwise, it returns
              <c>false</c>.
              </p>
              <p>The active model is not changed by this method.
             If <c>feasOpt</c> finds a feasible solution,
             it returns the solution and the corresponding objective
             in terms of the original model.  </p>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
              
            
            
            
            
            
             </remarks>
             <param name="rngs">An array of ranged constraints.  Relaxation preference
                                values for these ranges can be specified in arrays
                                <c>rnglb</c> and <c>rngub</c>.  This array
                                may be <c>null</c>, in which case no range
                                constraints may be relaxed.
                                Only constraints directly added to the model
                                can be specified.
              </param>
              <param name="rnglb">An array of doubles specifying the preference value
                                for relaxing the lower bound of the ranged constraints
                                listed in the argument <c>rngs</c>.  Element
                                <c>rnglb[i]</c> specifies the preference value
                                for relaxing the lower bound of constraint
                                <c>rngs[i]</c>.  This array may be
                                <c>null</c>, in which case no range lower bounds
                                are allowed to be relaxed.
              </param>
              <param name="rngub">An array of doubles specifying the preference value
                                for relaxing the upper bound of the ranged constraints
                                listed in the argument <c>rngs</c>.  Element
                                <c>rngub[i]</c> specifies the preference
                                for relaxing the upper bound of constraint
                                <c>rngs[i]</c>.  This array may be
                                <c>null</c>, in which case no range upper bounds
                                are allowed to be relaxed.
              </param>
              <param name="vars">An array of modeling variables.  Relaxation preference
                                values for the variables can be specified in arrays
                                <c>varlb</c> and <c>varub</c>.  This array
                                may be <c>null</c>, in which case no variable
                                bounds are allowed to be relaxed.
              </param>
              <param name="varlb">An array of doubles specifying the preference value
                                for relaxing the lower bound of the modeling variables
                                listed in the argument <c>vars</c>.  Element
                                <c>varlb[i]</c> specifies the preference value
                                for relaxing the lower bound of variable
                                <c>vars[i]</c>.  This array may be
                                <c>null</c>,
                                in which case no variable lower bounds
                                are allowed to be relaxed.
              </param>
              <param name="varub">An array of doubles specifying the preference value
                                for relaxing the upper bound of the modeling variables
                                listed in the argument <c>vars</c>.  Element
                                <c>varub[i]</c> specifies the preference value
                                for relaxing the upper bound of variable
                                <c>vars[i]</c>.  This array may be
                                <c>null</c>,
                                in which case no variable upper bounds
                                are allowed to be relaxed.
             </param>
             <returns><c>true</c> if a relaxation is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FeasOpt(ILOG.Concert.INumVar[],System.Double[],System.Double[])">
              <summary>
              This method computes a minimum-cost relaxation
              in order to make the active model feasible by relaxing the bounds
              of the variables specified in the array <c>vars</c>.
              </summary>
             <remarks>
              <p>On successful completion, the
              method installs a solution vector that is feasible for the
              minimum-cost relaxation.
              This solution can be queried with conventional query methods, such as
              <c>Cplex.GetValue</c>.</p>
            
              <p>The method <c>feasOpt</c> provides several different
              metrics for determining what constitutes a minimum-cost relaxation.
              The metric is specified by the parameter <c>FeasOptMode</c>.
              The <c>feasOpt</c> method can also optionally perform a second
              optimization phase where the original objective is optimized,
              subject to the constraint that the associated relaxation must
              have the same cost as the minimum-cost relaxation computed in the first
              phase.  See
              
               Cplex.Relaxation 
              for further information.
              </p>
              <p>The user may specify numeric values to express relative preferences
              for relaxing bounds.  A larger preference value specifies
              a greater willingness to relax the corresponding bound.
              Internally, <c>feasOpt</c> uses the
              reciprocal of the preference value to weight the
              relaxations of the associated bounds in the phase one cost function.
              A negative or 0 (zero) value specifies that the corresponding bound must
              not be relaxed.  These preference values are entered in
              <c>varlb</c> and <c>varub</c>.
              </p>
              <p>
              If enough variable bounds were allowed to be relaxed, the
              function will return <c>true</c>; otherwise, it returns
              <c>false</c>.
              </p>
              <p>The active model is not changed by this method.
             If <c>feasOpt</c> finds a feasible solution,
             it returns the solution and the corresponding objective
             in terms of the original model.  </p>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
              
            
            
             </remarks>
             <param name="vars">An array of modeling variables.  Relaxation preference
                                values for these variables can be specified in arrays
                                <c>varlb</c> and <c>varub</c>.  This array
                                may be <c>null</c>, in which case no variable bounds
                                are allowed to be relaxed.
              </param>
              <param name="varlb">An array of doubles specifying the preference value
                                for relaxing the lower bound of the modeling variables
                                listed in the argument <c>vars</c>.  Element
                                <c>varlb[i]</c> specifies the preference value
                                for relaxing the lower bound of variable
                                <c>vars[i]</c>.  This array may be
                                <c>null</c>,
                                in which case no variable lower bounds
                                are allowed to be relaxed.
              </param>
              <param name="varub">An array of doubles specifying the preference value
                                for relaxing the upper bound of the modeling variables
                                listed in the argument <c>vars</c>.  Element
                                <c>varub[i]</c> specifies the preference value
                                for relaxing the upper bound of variable
                                <c>vars[i]</c>.  This array may be
                                <c>null</c>,
                                in which case no variable upper bounds
                                are allowed to be relaxed.
             </param>
             <returns><c>true</c> if a relaxation is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FeasOpt(ILOG.Concert.IRange[],System.Double[],System.Double[])">
              <summary>
              This method computes a minimum-cost relaxation
              in order to make the active model feasible by relaxing the
              bounds of the range constraints specified in
              the array <c>rngs</c>.
              </summary>
             <remarks>
              <p>On successful completion, the
              method installs a solution vector that is feasible for the
              minimum-cost relaxation.
              This solution can be queried with conventional query methods, such as
              <c>Cplex.GetValue</c>.</p>
            
              <p>The method <c>feasOpt</c> provides several different
              metrics for determining what constitutes a minimum-cost relaxation.
              The metric is specified by the parameter <c>FeasOptMode</c>.
              The method <c>feasOpt</c> can also optionally perform a second
              optimization phase where the original objective is optimized,
              subject to the constraint that the associated relaxation must
              have the same cost as the minimum-cost relaxation computed in the first
              phase.  See
              
               Cplex.Relaxation 
              for further information.
              </p>
              <p>The user may specify numeric values to express relative preferences
              for relaxing bounds.  A larger preference value
              specifies a greater willingness to relax the corresponding bound.
              Internally, <c>feasOpt</c> uses the
              reciprocal of the preference value to weight the
              relaxations of the associated bounds in the phase one cost function.
              A negative or 0 (zero) value specifies that the corresponding bound must
              not be relaxed.
              These preference values are entered in the arguments
              <c>rnglb</c> and <c>rngub</c>.
              </p>
              <p>
              If enough constraints were allowed to be relaxed, the
              function will return <c>true</c>; otherwise, it returns
              <c>false</c>.
              </p>
              <p>The active model is not changed by this method.
             If <c>feasOpt</c> finds a feasible solution,
             it returns the solution and the corresponding objective
             in terms of the original model.  </p>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
              
            
            
             </remarks>
             <param name="rngs">An array of ranged constraints.  Relaxation preference
                                values for these ranges can be specified in arrays
                                <c>rnglb</c> and <c>rngub</c>.  This array
                                may be <c>null</c>, in which case no range bounds
                                are allowed to be relaxed.
                                Only constraints directly added to the model can be
                                specified.
              </param>
              <param name="rnglb">An array of doubles specifying the preference value
                                for relaxing the lower bound of the ranged constraints
                                listed in the argument <c>rngs</c>.  Element
                                <c>rnglb[i]</c> specifies the preference value
                                for relaxing the lower bound of constraint
                                <c>rngs[i]</c>.  This array may be
                                <c>null</c>, in which case no range lower bounds
                                are allowed to be relaxed.
              </param>
              <param name="rngub">An array of doubles specifying the preference value
                                for relaxing the upper bound of the ranged constraints
                                listed in the argument <c>rngs</c>.  Element
                                <c>rngub[i]</c> specifies the preference value
                                for relaxing the upper bound of constraint
                                <c>rngs[i]</c>.  This array may be
                                <c>null</c>, in which case no range upper bounds
                                are allowed to be relaxed.
             </param>
             <returns><c>true</c> if a relaxation is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetIIS">
            <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Bound(ILOG.Concert.INumVar,ILOG.Concert.NumVarBoundType)">
             <summary>
             Creates and returns an object of type <c>INumVarBound</c>
             to represent the specified bound of the variable <c>var</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.LowerBound(ILOG.Concert.INumVar)">
             <summary>
             Creates and returns an object of type <c>INumVarBound</c>
             to represent the lower bound of the variable <c>var</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UpperBound(ILOG.Concert.INumVar)">
             <summary>
             Creates and returns an object of type <c>INumVarBound</c>
             to represent the upper bound of variable <c>var</c>.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.RefineConflict(ILOG.Concert.IConstraint[],System.Double[])">
             <summary>
             Refines a conflict from an array of constraints.
             </summary>
             <remarks> <p>
             The method <c>refineConflict</c> tries to compute a
             minimal conflict for the infeasibility of the current model or for
             a subset of the constraints of the current model.
             If this computation is successful,
             (that is, it runs to completion; it is not interrupted by the user's
             application nor limited by a user-specified restriction of time or
             other resources), then the conflict can be accessed by means of the
             method <c>getConflict</c> as a minimal set of
             constraints that are still infeasible.  Removal of any of these constraints
             will remove that particular cause for infeasibility.  However, if
             other infeasible sets still exist in the model, then that removal
             from the model of any of the constraints in the returned set
             does <b>not</b> guarantee feasibility of the remaining model.</p>
            
             <p>Constraints may be considered in groups
             organized by <c>IAnd</c> constructed
             with <c>ILOG.Concert.IMPModeler.And</c>.
             If any constraint in a group
             participates in the conflict, the entire group is determined to do so.
             No further detail about the constraints within that group is returned.</p>
            
             <p>A group or constraint may be assigned a preference.  A constraint with a
             higher preference is more likely to be included in the conflict.  However,
             no guarantee is made when a conflict is returned that other infeasible
             sets containing groups or constraints with a higher preference
             may exist.</p>
            
             <p>To check whether the bounds of a variable cause a conflict, use
             instances of the class <c>ILOG.Concert.INumVarBound</c>
             to specify the upper and lower bounds of the variable in question.
             Use those bounds like constraints among the arguments you pass to
             <c>refineConflict</c>.</p>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
             
            
             </remarks>
             <param name="cons"><p>An array of constraints. They may be <c>IRange</c>
                           or <c>IAnd</c> constructs on a set of ranges.
                           Only constraints directly added to the model can be
                           specified.
                           If a constraint does not appear in this array, the constraint
                           is assigned a default preference value of 0 (zero).
                           As a consequence, such constraints
                           are included in the conflict without any analysis.</p>
             </param>
             <param name="prefs"><p>An array containing the preferences for the
                           groups or constraints.  <c>prefs[i]</c> specifies the
                           preference for the group or constraint <c>i</c>.  A
                           negative value specifies that the corresponding group or
                           constraint should not be considered for
                           finding a conflict.  In other words,
                           such groups are considered not to be part of the
                           model.  Groups with a preference of 0 (zero) are always
                           considered to be part of the conflict.  No further
                           checking is performed on such groups.</p>
            
             </param>
             <returns>A Boolean value reporting whether a conflict has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.RefineConflict(ILOG.Concert.IConstraint[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Refines a conflict consisting of a subset of constraints from an array.
             </summary>
            <remarks>  <p>
             This method resembles
             
              Cplex.RefineConflict 
             but considers only
             <c>num</c> constraints, starting at the index specified by
             <c>start</c>.
             </p>
            <p>
            The parameters <c>CutUp</c>, <c>CutLo</c>,
            <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
            If you want to study infeasibilities introduced by those parameters,
            consider adding an objective function constraint to your model to
            enforce their effect before you invoke this method.
            </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.RefineMIPStartConflict(System.Int32,ILOG.Concert.IConstraint[],System.Double[])">
             <summary>
             Refines a conflict consisting of constraints in the model
             inferred from the pairs of variables and values of a MIP start.
             </summary>
             <remarks>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
             <p>
             When the MIP start was added to the current model, an effort level may
             have been associated with it to specify to CPLEX
             how much effort to expend
             in transforming the MIP start into a feasible solution. This method
             respects effort levels <b>except</b> level 1 (one): check
             feasibility. It does not check feasibility. Instead, CPLEX
             increases the effort level to 2 in order to solve the fixed model.
             </p>
            
             <p>
             When this method returns, you can query the conflict with the method
             {@link Cplex#getConflict(IConstraint) Cplex.GetConflict}
             and write the conflict to a file in LP format with the method
             writeConflict.
             {@link Cplex#writeConflict(String) Cplex.WriteConflict}.
             </p>
            
             
            
            
             </remarks>
             <param name="mipstartindex">The index identifying the MIP start among all
                                  the MIP starts associated with the current problem.
            
             </param>
             <param name="cons">An array of constraints for the conflict refiner to examine.
            
             </param>
             <param name="prefs"><p>An array containing the preferences for the
                           groups or constraints.  <c>prefs[i]</c> specifies the
                           preference for the group or constraint <c>i</c>.  A
                           negative value specifies that the corresponding group or
                           constraint should not be considered for
                           finding a conflict.  In other words,
                           such groups are considered not to be part of the
                           model.  Groups with a preference of 0 (zero) are always
                           considered to be part of the conflict.  No further
                           checking is performed on such groups.</p>
            
             </param>
             <returns>A Boolean value reporting whether a conflict has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.RefineMIPStartConflict(System.Int32,ILOG.Concert.IConstraint[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Refines a conflict consisting of a range of constraints from
             the model inferred from the pairs of variables and values of a MIP start.
             </summary>
             <remarks>
             <p>
             The parameters <c>CutUp</c>, <c>CutLo</c>,
             <c>ObjULim</c>, <c>ObjLLim</c> do not influence this method.
             If you want to study infeasibilities introduced by those parameters,
             consider adding an objective function constraint to your model to
             enforce their effect before you invoke this method.
             </p>
            
             <p>
             When the MIP start was added to the current model, an effort level may
             have been associated with it to specify to CPLEX
             how much effort to expend
             in transforming the MIP start into a feasible solution. This method
             respects effort levels <b>except</b> level 1 (one): check
             feasibility. It does not check feasibility.
             </p>
            
            
             
            
            
            
            
             </remarks>
             <param name="mipstartindex">The index identifying the MIP start among all
                                  the MIP starts associated with the current problem.
            
             </param>
             <param name="cons">An array of constraints for the conflict refiner to examine.
            
             </param>
             <param name="prefs"><p>An array containing the preferences for the
                           constraints.  <c>prefs[i]</c> specifies the
                           preference for the constraint <c>i</c>.  A
                           negative value specifies that the corresponding
                           constraint should not be considered for
                           finding a conflict.  In other words,
                           such constraints are considered not to be part of the
                           MIP start. Constraints with a preference of 0 (zero)
                           are always
                           considered to be part of the conflict.  No further
                           checking is performed on such constraints.</p>
            
             </param>
             <param name="start">An index into the two arrays. It designates the beginning
                           of the range of constraints to consider.
            
             </param>
             <param name="num">The number of constraints participating in the range.
            
             </param>
             <returns>A Boolean value reporting whether a conflict has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetConflict(ILOG.Concert.IConstraint[])">
             <summary>
             Accesses the constraints of a conflict previously computed by the method
             <c>refineConflict</c> and returns the status of the constraints
             in the array <c>cts</c>.
             </summary>
             <remarks> <p>
             The constraints passed in <c>cts</c> must be among the same
             constraints that have previously been passed to
             <c>refineConflict</c>.</p>
            
             </remarks>
             <returns>An array containing values that denote the status of the
                     constraints in the array <c>cts</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetConflict(ILOG.Concert.IConstraint)">
             <summary>
             Accesses a conflict previously computed by the method
             <c>refineConflict</c> and returns the conflict status for the
             constraint <c>ct</c>.
             </summary>
             <remarks> <p>The possible status is one of the following values:
             </p>
             <p><c>Cplex.Excluded</c> the constraint has been
             proven <b>not</b> to participate in the conflict.</p>
            
             <p><c>Cplex.ConflictMember</c> the constraint has been
             proven to participate in the conflict.</p>
            
             <p><c>Cplex.ConflictPossibleMember</c> the constraint
             <b>not</b> been proven <b>not</b> to participate in the conflict;
             that is, it might participate, it might not.</p>
            
             <p>The constraint <c>ct</c> must be one that has
             previously been passed to <c>refineConflict</c>.</p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetConflict(ILOG.Concert.IConstraint[],System.Int32,System.Int32)">
             <summary>
             Accesses a conflict (or a subset of a conflict)
             previously computed by the method
             <c>refineConflict</c> and returns the conflict status
             of <c>num</c> consecutive constraints in the
             array <c>cts</c>.
             </summary>
             <remarks> <p>
             The constraints passed in <c>cts</c> must be among the same
             constraints that have previously been passed to
             <c>refineConflict</c>.</p>
            
             
            
            
             </remarks>
             <param name="cts">The array of constraints in the conflict.
             </param>
             <param name="start">The index of the first constraint.
             </param>
             <param name="num">The number of consecutive elements in
                            the array, starting from the element specified
                            by <c>start</c>.
             </param>
             <returns>An array containing the status of the constraints.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBoundSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.ILPMatrix)">
             <summary>
             Computes and returns sensitivity analysis for the
             bounds of all variables in the specified LP matrix.
             </summary>
            <param name="lblower"><c>lblower[j]</c> will contain the lowest value
                               that the lower bound of the variable corresponding to
                               column <c>j</c> of <c>matrix</c>
                               can be set to without affecting the optimality of the
                               basis.  If this information is not required,
                               <c>null</c> may be passed. Otherwise, the length
                               of the array must be at least the number of columns in
                               the matrix.
             </param>
             <param name="lbupper"><c>lbupper[j]</c> will contain the highest value
                               that the lower bound of the variable corresponding to
                               column <c>j</c> of <c>matrix</c> can be set
                               to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the length of the array must
                               be at least the number of columns in the matrix.
             </param>
             <param name="ublower"><c>ublower[j]</c> will contain the lowest value
                               that the upper bound of the variable corresponding to
                               column <c>j</c> of <c>matrix</c> can be set
                               to without affecting the optimality of the basis.  If
                               this information is not required <c>null</c> may
                               be passed. Otherwise, the length of the array must be
                               at least the number of columns in the matrix.
             </param>
             <param name="ubupper"><c>ubupper[j]</c> will contain the highest value
                               that the upper bound of the variable corresponding to
                               column <c>j</c> of <c>matrix</c> can be set
                               to without affecting the optimality of the basis. If
                               this information is not required <c>null</c> may
                               be passed. Otherwise, the length of the array must be
                               at least the number of columns in the matrix.
             </param>
             <param name="matrix">The LP matrix for the columns for which the bound
                               sensitivity analysis is to be computed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBoundSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for the
             bounds of <c>num</c> consecutive variables, starting from
             the index specified by <c>start</c>,
             in the specified LP matrix.
             </summary>
            <param name="lblower"><c>lblower[j]</c> will contain the lowest
                               value that the lower bound of the variable corresponding
                               to column <c>j+start</c> of <c>matrix</c>
                               can be set to without affecting the optimality of the
                               basis.  If this information is not required,
                               <c>null</c> may be passed. Otherwise, the length
                               of the array must be at least <c>num</c>.
             </param>
             <param name="lbupper"><c>lbupper[j]</c> will contain the highest
                               value that the lower bound of the variable corresponding
                               to column <c>j+start</c> of
                               <c>matrix</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the length of the array must
                               be at least <c>num</c>.
             </param>
             <param name="ublower"><c>ublower[j]</c> will contain the lowest
                               value that the upper bound of the variable corresponding
                               to column <c>j+start</c> of
                               <c>matrix</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required,
                               <c>null</c> may
                               be passed. Otherwise, the length of the array must be
                               at least <c>num</c>.
             </param>
             <param name="ubupper"><c>ubupper[j]</c> will contain the highest
                               value that the upper bound of the variable corresponding
                               to column <c>j+start</c> of
                               <c>matrix</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required,
                               <c>null</c> may
                               be passed. Otherwise, the length of the array must be
                               at least <c>num</c>.
             </param>
             <param name="matrix">The LP matrix for the columns for which the bound
                               sensitivity analysis is to be computed.
             </param>
             <param name="start">The index of the first column of the matrix for which
                               bound sensitivity analysis is returned.
             </param>
             <param name="num">The number of consecutive columns in matrix
                               for which to return
                               bound sensitivity analysis.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBoundSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Computes and returns sensitivity analysis for the bounds of
             the variables in the array <c>vars</c>.
             </summary>
            <param name="lblower"><c>lblower[j]</c> will contain the lowest value
                               the lower bound of variable <c>var[j]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>var</c>.
             </param>
             <param name="lbupper"><c>lbupper[j]</c> will contain the highest value
                               the lower bound of variable <c>var[j]</c> can be
                               set to without affecting the optimality of the basis.
                               If
                               this information is not required, <c>null</c> may
                               be passed. Otherwise, the array must have at least the
                               same length as <c>var</c>.
             </param>
             <param name="ublower"><c>ublower[j]</c> will contain the lowest value
                               the upper bound of variable <c>var[j]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>var</c>.
             </param>
             <param name="ubupper"><c>ubupper[j]</c> will contain the highest value
                               the upper bound of variable <c>var[j]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>var</c>.
             </param>
             <param name="var">An array containing the variables for which to return
                               bound sensitivity analysis.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetBoundSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for the bounds of the
             <c>num</c> consecutive variables, starting from the index
             specified by <c>start</c>, in the array <c>var</c>.
             </summary>
            <param name="lblower"><c>lblower[j]</c> will contain the lowest value
                               the lower bound of variable
                               <c>var[j+start]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="lbupper"><c>lbupper[j]</c> will contain the highest value
                               to which the lower bound of variable
                               <c>var[j+start]</c> can be set
                               without affecting the optimality of the basis.
                               If this information is not required,
                               <c>null</c> may
                               be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ublower"><c>ublower[j]</c> will contain the lowest value
                               to which the upper bound of the variable
                               <c>var[j+start]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ubupper"><c>ubupper[j]</c> will contain the highest value
                               to which the upper bound of variable
                               <c>var[j+start]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="var">An array containing the variables for which to return
                               bound sensitivity analysis.
             </param>
             <param name="start">The index of first variable in <c>var</c> for
                               which to return bound sensitivity analysis.
             </param>
             <param name="num">The number of consecutive variables
                               in <c>var</c> for which
                               to return bound sensitivity analysis.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjSA(System.Double[],System.Double[],ILOG.Concert.ILPMatrix)">
             <summary>
             Computes and returns sensitivity analysis for objective
             coefficients of the variables corresponding to the columns of the
             specified LP matrix.
             </summary>
            <param name="lower"><c>lower[j]</c> is the lowest value to which the
                               objective coefficient for the variable corresponding to
                               column <c>j</c> of <c>matrix</c> can be set
                               without affecting the optimality of the basis. If this
                               information is not required <c>null</c> may be
                               passed.  Otherwise, the array must have a length at least
                               equal to the number of columns in the
                               <c>matrix</c>.
             </param>
             <param name="upper"><c>upper[j]</c> is the highest value to which the
                               objective coefficient of the variable corresponding to
                               of column <c>j</c> of <c>matrix</c> that
                               can be set without affecting the optimality of the
                               basis.  If this information is not required,
                               <c>null</c> may be passed.  Otherwise, the array
                               must have a length at least equal to the number of
                               columns in the <c>matrix</c>.
             </param>
             <param name="matrix">The LP matrix which contains the column for which
                               objective sensitivity analysis will be
                               returned.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjSA(System.Double[],System.Double[],ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for objective
             coefficients of the variables corresponding to a range of
             <c>num</c> consecutive columns of the specified LP matrix.
             </summary>
            <param name="lower"><c>lower[j]</c> will contain the lowest value to
                               which the objective coefficient of the variable
                               corresponding to column <c>j+start</c> of
                               <c>matrix</c> that can be set, without affecting
                               the optimality of the basis. If this information is not
                               required, <c>null</c> may be passed.
                               Otherwise, the
                               array must have at least length <c>num</c>.
             </param>
             <param name="upper"><c>upper[j]</c> will contain the highest value to
                               which the objective coefficient of the variable
                               corresponding to column <c>j+start</c> of
                               <c>matrix</c> that can be set, without affecting
                               the optimality of the basis.  If this information is not
                               required, <c>null</c> may be passed.  Otherwise,
                               the array must have at least length <c>num</c>.
             </param>
             <param name="matrix">The LP matrix which contains the column for which
                               objective sensitivity analysis is to be
                               returned.
             </param>
             <param name="start">The index of the first column of <c>matrix</c> for
                               which to return objective sensitivity analysis
                               information.
             </param>
             <param name="num">The number of consecutive
                               columns of <c>matrix</c> for which
                               to return objective sensitivity analysis.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjSA(System.Double[],System.Double[],ILOG.Concert.INumVar[])">
             <summary>
             Computes and returns sensitivity analysis for objective
             coefficients for an array of variables.
             </summary>
            <param name="lower"><c>lower[j]</c> will contain the lowest value to
                               which the objective coefficient of the variable
                               <c>var[j]</c> can be set without affecting the
                               optimality of the basis. If this information is not
                               required, <c>null</c> may be passed.
                               Otherwise, the
                               array must have a length at least equal to the length
                               of the array <c>var</c>.
             </param>
             <param name="upper"><c>upper[j]</c> will contain the highest value to
                               which the objective coefficient of the variable
                               <c>var[j]</c> can be set without affecting the
                               optimality of the basis.  If this information is not
                               required, <c>null</c> may be passed.  Otherwise,
                               the array must have a length at least equal
                               to the length
                               of the array <c>var</c>.
             </param>
             <param name="var">An array containing the variables for which objective
                               sensitivity analysis will be returned.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetObjSA(System.Double[],System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for objective
             coefficients for <c>num</c> consecutive variables, starting
             at the index specified by <c>start</c>.
             </summary>
            <param name="lower"><c>lower[j]</c> will contain the lowest value to
                               which the objective coefficient of the variable
                               <c>var[j+start]</c> can be set without affecting
                               the optimality of the basis. If this information is not
                               required, <c>null</c> may be passed. Otherwise,
                               the array must have at least length <c>num</c>.
             </param>
             <param name="upper"><c>uppper[j]</c> will contain the highest value to
                               which the objective coefficient of the variable
                               <c>var[j+start]</c> can be set without affecting
                               the optimality of the basis. If this information is not
                               required, <c>null</c> may be passed. Otherwise,
                               the array must have at least length <c>num</c>.
             </param>
             <param name="var">An array containing the variables for which objective
                               sensitivity analysis will be returned.
             </param>
             <param name="start">The index of first variable in <c>var</c> for
                               which objective sensitivity analysis will
                               be returned.
             </param>
             <param name="num">The number of consecutive variables
                               in <c>var</c> for which
                               objective sensitivity analysis will be
                               returned.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.IRange[])">
             <summary>
             Computes and returns sensitivity analysis for the
             bounds of the range constraints in the array <c>rng</c>.
             </summary>
            <param name="lblower"><c>lblower[i]</c> will contain the lowest value to
                               which the lower bound of range <c>rng[i]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>rng</c>.
             </param>
             <param name="lbupper"><c>lbupper[i]</c> will contain the highest value to
                               which the lower bound of range <c>rng[i]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed.  Otherwise, the array must have at least
                               the same length as <c>rng</c>.
             </param>
             <param name="ublower"><c>ublower[i]</c> will contain the lowest value to
                               which the upper bound of range <c>rng[i]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>rng</c>.
             </param>
             <param name="ubupper"><c>ubupper[i]</c> will contain the highest value to
                               which the upper bound of range <c>rng[i]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               the same length as <c>rng</c>.
             </param>
             <param name="rng">An array containing the constraints for which the
                               sensitivity information is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for the bounds of
             <c>num</c> consecutive range constraints in the array
             <c>rng</c>, starting with the index specified by
             <c>rng[start]</c>.
             </summary>
            <param name="lblower"><c>lblower[i]</c> will contain the lowest value to
                               which the lower bound of range
                               <c>rng[i+start]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="lbupper"><c>lbupper[i]</c> will contain the highest value to
                               which the lower bound of range
                               <c>rng[i+start]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ublower"><c>ublower[i]</c> will contain the lowest value to
                               which the upper bound of range
                               <c>rng[i+start]</c> can
                               be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ubupper"><c>ubupper[i]</c> will contain the highest value to
                               which the upper bound of range
                               <c>rng[i+start]</c> can
                               be set to without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="rng">An array containing the constraints for which the
                               sensitivity information is requested.
             </param>
             <param name="start">The index of the first constraints in <c>rng</c>
                               for which the sensitivity information is requested.
             </param>
             <param name="num">The number of consecutive constraints
                               in <c>rng</c> for which
                               the sensitivity information is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
             <summary>
             Computes and returns sensitivity analysis for the constraints
             corresponding to <c>num</c> rows of the LP matrix
             <c>matrix</c> starting with row <c>start</c>.
             </summary>
            <param name="lblower"><c>lblower[i]</c> will contain the lowest value to
                               which the lower bound of the constraint corresponding
                               to row <c>i+start</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="lbupper"><c>lbupper[i]</c> will contain the highest value to
                               which the lower bound of the constraint corresponding
                               to row <c>i+start</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ublower"><c>ublower[i]</c> will contain the lowest value to
                               which the upper bound of the constraint corresponding
                               to row <c>i+start</c> of <c>matrix</c>
                               can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="ubupper"><c>ubupper[i]</c> will contain the highest value to
                               which the upper bound of the constraint corresponding
                               to row <c>i+start</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length <c>num</c>.
             </param>
             <param name="matrix">The LP matrix for rows of which sensitivity analysis
                               information is to be computed.
             </param>
             <param name="start">The first row of <c>matrix</c> for which
                               sensitivity analysis is to be computed.
             </param>
             <param name="num">The number of consecutive rows
                               of <c>matrix</c> for which
                               sensitivity analysis is to be computed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeSA(System.Double[],System.Double[],System.Double[],System.Double[],ILOG.Concert.ILPMatrix)">
             <summary>
             Computes and returns sensitivity analysis for the constraints
             corresponding to the rows of the LP matrix <c>matrix</c>.
             </summary>
            <param name="lblower"><c>lblower[i]</c> will contain the lowest value to
                               which the lower bound of the constraint corresponding
                               to row <c>i</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the length of the array must
                               be at least equal to the number of rows in
                               <c>matrix</c>.
             </param>
             <param name="lbupper"><c>lbupper[i]</c> will contain the highest value to
                               which the lower bound of the constraint corresponding
                               to row <c>i</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the length of the array must
                               be at least equal to the number of rows in
                               <c>matrix</c>.
             </param>
             <param name="ublower"><c>ublower[i]</c> will contain the lowest value to
                               which the upper bound of the constraint corresponding
                               to row <c>i</c> of <c>matrix</c>
                               can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the length of the array must
                               be at least equal to the number of rows in
                               <c>matrix</c>.
             </param>
             <param name="ubupper"><c>ubupper[i]</c> will contain the highest value to
                               which the upper bound of the constraint corresponding
                               to row <c>i</c> of <c>matrix</c>
                              can be set without affecting the optimality of the basis.
                               If this information is not required, <c>null</c>
                               may be passed. Otherwise, the array must have at least
                               length equal to the number of rows in
                               <c>matrix</c>.
             </param>
             <param name="matrix">The LP matrix for rows of which sensitivity analysis
                               information is to be computed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRHSSA(System.Double[],System.Double[],ILOG.Concert.IRange[])">
              <summary>
              Computes and returns sensitivity analysis for
              the righthand side (RHS) values of a range of constraints.
              </summary>
             <remarks>
              <p>The returned bounds represent the interval in which both
              bounds can simultaneously be moved without affecting the solution.  This
              is useful for equality constraints, that is, ranged constraints where the
              upper and lower bound match.  In this case, the returned bounds specify
              within which interval the value b for a constraint in the form a'x = b
              can be moved.  It is not possible to obtain this information from
              <c>getRangeSA</c>, since both bounds are moved independently.
              </p>
            
              
            
             </remarks>
             <param name="lower"><c>lower[i]</c> will contain the lowest value to
                                which the lower bound of range <c>rng[i]</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed. Otherwise, the array must have at least
                                the same length as <c>rng</c>.
              </param>
              <param name="upper"><c>upper[i]</c> will contain the highest value to
                                which the lower bound of range <c>rng[i]</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed.
                                Otherwise, the array must have at least the same length
                                as <c>rng</c>.
              </param>
              <param name="rng">An array containing the constraints for which the
                                sensitivity analysis is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRHSSA(System.Double[],System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
              <summary>
              Computes and returns sensitivity analysis for
              the righthand side (RHS) values of <c>num</c>
              constraints, starting from the index specified by <c>start</c>.
              </summary>
             <remarks>
              <p>The returned bounds represent the interval in which both
              bounds can simultaneously be moved without affecting the solution.  This
              is useful for equality constraints, that is, ranged constraints where the
              upper and lower bound match.  In this case, the returned bounds specify
              within which interval the value b for a constraint in the form a'x = b
              can be moved.  It is not possible to obtain this information from
              <c>getRangeSA</c>, since both bounds are moved independently.
              </p>
            
              
            
            
            
             </remarks>
             <param name="lower"><c>lower[i]</c> will contain the lowest value to
                                which the lower bound of <c>rng[i+start]</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed. Otherwise, the array must have at least
                                <c>num</c>.
              </param>
              <param name="upper"><c>upper[i]</c> will contain the highest value to
                                which the lower bound of <c>rng[i+start]</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed.  Otherwise, the array must have at least
                                length <c>num</c>.
              </param>
              <param name="rng">An array containing the constraints for which the
                                sensitivity analysis is requested.
              </param>
              <param name="start">The first element in <c>rng</c> for which the
                                sensitivity analysis is requested
              </param>
              <param name="num">The number of consecutive elements
                                in <c>rng</c> for which
                                the sensitivity analysis is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRHSSA(System.Double[],System.Double[],ILOG.Concert.ILPMatrix)">
              <summary>
              Computes and returns sensitivity analysis for
              righthand side (RHS) values of
              the constraints corresponding to the rows of an LP matrix.
              </summary>
             <remarks>  <p>
              The returned bounds represent the interval in which both
              bounds can simultaneously be moved without affecting the solution.  This
              is useful for equality constraints, that is, ranged constraints where the
              upper and lower bound match.  In this case, the returned bounds specify
              within which interval the value b for a constraint in the form a'x = b
              can be moved.  It is not possible to obtain this information using
              <c>getRangeSA</c>, since both bounds are moved independently.
              </p>
            
              
            
             </remarks>
             <param name="lower"><c>lower[i]</c> will contain the lowest value to
                                which the lower bound of the constraint corresponding
                                to row <c>i</c> of <c>matrix</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed. Otherwise, the array must have at least
                                a length equal to the number of rows in
                                <c>matrix</c>.
              </param>
              <param name="upper"><c>upper[i]</c> will contain the highest value to
                                which the lower bound of the constraint corresponding
                                to row <c>i</c> of <c>matrix</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed.
                                a length equal to the number of rows in
                                <c>matrix</c>.
              </param>
              <param name="matrix">The matrix for the rows of which
                                the sensitivity analysis is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRHSSA(System.Double[],System.Double[],ILOG.Concert.ILPMatrix,System.Int32,System.Int32)">
              <summary>
              Computes and returns sensitivity analysis for
              the righthand side (RHS) values of <c>num</c>
              constraints, corresponding to a range of rows of an LP matrix,
              starting from the index specified by <c>start</c>.
              </summary>
             <remarks>  <p>
              The returned bounds represent the interval in which both
              bounds can simultaneously be moved without affecting the solution.  This
              is useful for equality constraints, that is, ranged constraints where the
              upper and lower bound match.  In this case, the returned bounds specify
              within which interval the value b for a constraint in the form a'x = b
              can be moved.  It is not possible to obtain this information using
              <c>getRangeSA</c>, since both bounds are moved independently.
              </p>
            
              
            
            
            
             </remarks>
             <param name="lower"><c>lower[i]</c> will contain the lowest value to
                                which the lower bound of the constraint corresponding
                                to row <c>i+start</c> of <c>matrix</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed. Otherwise, the array must have at least
                                length <c>num</c>.
              </param>
              <param name="upper"><c>upper[i]</c> will contain the highest value to
                                which the lower bound of the constraint corresponding
                                to row <c>i+start</c> of <c>matrix</c> can
                                be set without affecting the optimality of the basis.
                                If this information is not required, <c>null</c>
                                may be passed. Otherwise, the array must have at least
                                length <c>num</c>.
              </param>
              <param name="matrix">The matrix for the rows of which
                                the sensitivity analysis is requested.
              </param>
              <param name="start">The first row of <c>matrix</c> for which the
                                sensitivity analysis is requested.
              </param>
              <param name="num">The number of consecutive rows
                                of <c>matrix</c> for which to
                                sensitivity analysis is requested.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetQuality(ILOG.CPLEX.Cplex.QualityType)">
             <summary>
             Returns an instance of <c>Cplex.Quality</c> that contains
             the requested quality measure.
             </summary>
            <param name="which">The <c>Cplex.QualityType</c> which should be
                               computed.
             </param>
             <returns>An instance of <c>Cplex.Quality</c>
                               for the requested quality measure.
             </returns><see cref="T:ILOG.CPLEX.Cplex.QualityType"/><see cref="T:ILOG.CPLEX.Cplex.Quality"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetQuality(ILOG.CPLEX.Cplex.QualityType,System.Int32)">
             <summary>
             Returns an instance of <c>Cplex.Quality</c> that contains
             the requested quality measure for a solution in the solution pool.
             </summary>
            <param name="which">The <c>Cplex.QualityType</c> which should be
                               computed.
            </param>
            <param name="soln">The index of the solution pool member for which to
                          evaluate the quality measure.  A value of
                          Cplex.IncumbentId specifies
                          that the quality measure should correspond to the
                          incumbent rather than a member of the solution pool.
             </param>
             <returns>An instance of <c>Cplex.Quality</c>
                               for the requested quality measure.
             </returns><see cref="T:ILOG.CPLEX.Cplex.QualityType"/><see cref="T:ILOG.CPLEX.Cplex.Quality"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetIntSetValue(ILOG.Concert.IloIntSetVar)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.#ctor">
             <summary>
             This constructor creates an instance of <c>Cplex</c>
             with an empty active model.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Output">
             <summary>
             Returns the output stream of the invoking <c>Cplex</c> object.
             </summary>
            <remarks>  <p>
             This stream is used by <c>Cplex</c> for printing logging
             information.  It can be set with the method
             
              Cplex.SetOut. 
             </p>
             
            </remarks>
            <returns>The output stream of the invoking <c>Cplex</c> object.
             </returns><see cref="M:ILOG.CPLEX.Cplex.SetOut(System.IO.TextWriter)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Warning">
              <summary>
              Returns the warning output stream of the invoking <c>Cplex</c>
              object.
              </summary>
             <remarks>  <p>This stream is used by <c>Cplex</c> for printing
              warnings.  It can be set with the method
              
               Cplex.SetWarning. 
              </p>
            
              
             </remarks>
             <returns>The warning stream of the invoking <c>Cplex</c> object.
              </returns><see cref="M:ILOG.CPLEX.Cplex.SetWarning(System.IO.TextWriter)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetOut(System.IO.TextWriter)">
              <summary>
              Sets the default output stream of the invoking <c>Cplex</c>
              object.
              </summary>
             <remarks>  <p>After this call, all logging output will be output via the new
              stream.  Passing <c>null</c> as the new output stream will turn off
              all logging output. </p>
            
              </remarks>
              <param name="s">The new default output stream.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetWarning(System.IO.TextWriter)">
              <summary>
              Sets the warning stream of the invoking <c>Cplex</c> object.
              </summary>
             <remarks>  After this call, all warnings will be output via the new stream.  Passing
              <c>null</c> as the new output stream will turn off all warnings.
            
              </remarks>
              <param name="s">The new warning output stream.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Solve">
             <summary>
             Solves the active model.
             </summary>
            <returns>A Boolean value reporting whether a
                     feasible solution has been found.
                     This solution is not necessarily optimal.  If <c>false</c>
                     is returned, a feasible solution may still be present, but
                     <c>Cplex</c> has not been able to prove its feasibility.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveFixed">
              <summary>
              Solves the fixed active model.
              </summary>
             <remarks>  <p>The fixed model is generated from a MIP problem, and a solution to it,
              by fixing all integer variables to their solution values.</p>
            
             <p>A call to this method causes CPLEX to view the extracted MIP
             model as a continuous model, so that you can obtain
             information normally available
             for a continuous solution but normally unavailable for MIP models.
             CPLEX views the model as continuous until a call to
             another method restores the model as a MIP. For example, a call to
             
              <c>Cplex.Solve</c> 
             restores the model back to MIP and solves
             the model immediately, provided the advanced start parameter has
             not been disabled. </p>
            
              </remarks>
              <returns>A Boolean value reporting whether a feasible solution has been
                      found.
                      This solution is not necessarily optimal.  If <c>false</c>
                      is returned a feasible solution may still be present, but
                      Cplex has not been able to prove its feasibility.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveFixed(System.Int32)">
              <summary>
              Solves the fixed active model using a solution from the solution pool.
              </summary>
             <remarks>  <p>The fixed model is generated from a MIP problem, and a solution to it,
              by fixing all integer variables to their solution values.</p>
            
             <p>A call to this method causes CPLEX to view the extracted MIP
             model as a continuous model, so that you can obtain
             information normally available
             for a continuous solution but normally unavailable for MIP models.
             CPLEX views the model as continuous until a call to
             another method restores the model as a MIP. For example, a call to
             
              <c>Cplex.Solve</c> 
             restores the model back to MIP and solves
             the model immediately, provided the advanced start parameter has
             not been disabled. </p>
            
              
             </remarks>
             <param name="soln">The index of the solution pool member to use in
                           generating the fixed model.  A value of
                           Cplex.IncumbentId specifies
                           that the fixed model should correspond to the
                           incumbent rather than a member of the solution pool.
              </param>
              <returns>A Boolean value reporting whether a feasible solution has been
                      found.
                      This solution is not necessarily optimal.  If <c>false</c>
                      is returned a feasible solution may still be present, but
                      Cplex has not been able to prove its feasibility.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.TuneParam">
              <summary>
              Tunes the parameters for improved optimizer performance
              on the current model.
              </summary>
             <remarks>  Tuning is carried out by CPLEX making a number of trial runs
              with a variety of parameter settings.
              Upon return, the values of the parameters in the Cplex
              object will be set to their tuned values.  These values
              may be queried or written to a file.  There will not be
              a solution to the model.
              <p>The parameter <c>TuningRepeat</c> specifies how many
              problem variations to try while tuning.  Using a number of
              variations can give more robust results when tuning is applied
              to a single model.
              The <c>TuningMeasure</c> is meaningful only when
              <c>TuningRepeat</c> is more than one.</p>
            
              <p>The following parameters control the tuning process and all
              other parameter settins are ignored.</p>
              <ul>
              <li><c>TiLim</c>:
                  Limits the total time spent tuning</li>
              <li><c>DetTiLim</c>:
                  Limits the total deterministic time spent tuning</li>
              <li><c>TuningTiLim</c>:
                  Limits the time of each trial run</li>
              <li><c>TuningMeasure</c>:
                  Specifies how to compare tuning results</li>
              <li><c>TuningRepeat</c>:
                  Controls the number of problem variations to use</li>
              <li><c>TuningDisplay</c>:
                  Controls the level of the tuning display</li>
              </ul>
              <p>All callbacks, except the tuning callback, will be ignored.
              Tuning will monitor the method <c>Cplex.Aborter.Abort</c>
              and terminate when an abort has been issued, even in different
              threads.</p>
            
              </remarks>
              <returns>A value reporting the completion of tuning.
                      The values will be from the enumeration TuningStatus.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.TuneParam(ILOG.CPLEX.Cplex.ParameterSet)">
              <summary>
              Tunes the parameters for improved optimizer performance
              on the current model while leaving some parameters unchanged.
              </summary>
             <remarks>  Tuning is carried out by CPLEX making a number of trial runs
              with a variety of parameter settings.
              Upon return, the values of the parameters in the Cplex
              object will be set to their tuned values.  These values
              may be queried or written to a file.  There will not be
              a solution to the model.
              <p>The parameter <c>TuningRepeat</c> specifies how many
              problem variations to try while tuning.  Using a number of
              variations can give more robust results when tuning is applied
              to a single model.
              The <c>TuningMeasure</c> is meaningful only when
              <c>TuningRepeat</c> is more than one.</p>
              <p>The following parameters control the tuning process and all
              other parameter settins are ignored.</p>
              <ul>
              <li><c>TiLim</c>:
                  Limits the total time spent tuning</li>
              <li><c>DetTiLim</c>:
                  Limits the total deterministic time spent tuning</li>
              <li><c>TuningTiLim</c>:
                  Limits the time of each trial run</li>
              <li><c>TuningMeasure</c>:
                  Specifies how to compare tuning results</li>
              <li><c>TuningRepeat</c>:
                  Controls the number of problem variations to use</li>
              <li><c>TuningDisplay</c>:
                  Controls the level of the tuning display</li>
              </ul>
              <p>All callbacks, except the tuning callback, will be ignored
              Tuning will monitor the method <c>Cplex.Aborter.Abort</c>
              and terminate when an abort has been issued, even in
              different threads.</p>
            
              
             </remarks>
             <param name="fixedset">The parameters and their values which should
                              not be changed by tuning.
              </param>
              <returns>A value reporting the completion of tuning.
                      The values will be from the enumeration TuningStatus.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.TuneParam(System.String[])">
              <summary>
              Tunes the parameters for improved optimizer performance
              on a set of models.
              </summary>
             <remarks>  Tuning is carried out by CPLEX making a number of trial runs
              with a variety of parameter settings.
              Upon return, the values of the parameters in the Cplex
              object will be set to their tuned values.  These values
              may be queried or written to a file.
              <p>The following parameters control the tuning process and all
              other parameter settins are ignored.</p>
              <ul>
              <li><c>TiLim</c>:
                  Limits the total time spent tuning</li>
              <li><c>DetTiLim</c>:
                  Limits the total deterministic time spent tuning</li>
              <li><c>TuningTiLim</c>:
                  Limits the time of each trial run</li>
              <li><c>TuningMeasure</c>:
                  Specifies how to compare tuning results</li>
              <li><c>TuningDisplay</c>:
                  Controls the level of the tuning display</li>
              </ul>
              <p>All callbacks, except the tuning callback, will be ignored.
              Tuning will monitor the method <c>Cplex.Aborter.Abort</c>
              and terminate when an abort has been issued, even in
              different threads.</p>
            
              
             </remarks>
             <param name="filenames">An array of fully-qualified file names
                               of the models to be tuned.
              </param>
              <returns>A value reporting the completion of tuning.
                      The values will be from the enumeration TuningStatus.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.TuneParam(System.String[],ILOG.CPLEX.Cplex.ParameterSet)">
              <summary>
              Tunes the parameters for improved optimizer performance
              on a set of models while leaving some parameters unchanged.
              </summary>
             <remarks>  Tuning is carried out by CPLEX making a number of trial runs
              with a variety of parameter settings.
              Upon return, the values of the parameters in the Cplex
              object will be set to their tuned values.  These values
              may be queried or written to a file.
              <p>The following parameters control the tuning process and all
              other parameter settins are ignored.</p>
              <ul>
              <li><c>TiLim</c>:
                  Limits the total time spent tuning</li>
              <li><c>DetTiLim</c>:
                  Limits the total deterministic time spent tuning</li>
              <li><c>TuningTiLim</c>:
                  Limits the time of each trial run</li>
              <li><c>TuningMeasure</c>:
                  Specifies how to compare tuning results</li>
              <li><c>TuningDisplay</c>:
                  Controls the level of the tuning display</li>
              </ul>
              <p>All callbacks, except the tuning callback, will be ignored.
              Tuning will monitor the method <c>Cplex.Aborter.Abort</c>
              and terminate when an abort has been issued, even in
              different threads.</p>
            
              
            
             </remarks>
             <param name="filenames">An array of fully-qualified file names
                               of the models to be tuned.
              </param>
              <param name="fixedset">The parameters and their values which should
                              not be changed by tuning.
              </param>
              <returns>A value reporting the completion of tuning.
                      The values will be from the enumeration TuningStatus.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNiterations64">
             <summary>
             Returns the number of iterations from the last solve.
             </summary>
            <returns>The number of iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNphaseOneIterations64">
             <summary>
             Returns the number of phase I simplex iterations from the last solve.
             </summary>
            <returns>The number of phase I simplex iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNbarrierIterations64">
             <summary>
             Returns the number of barrier iterations from the last solve.
             </summary>
            <returns>The number of barrier iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsiftingIterations64">
             <summary>
             Returns the number of sifting iterations from the last solve.
             </summary>
            <returns>The number of sifting iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsiftingPhaseOneIterations64">
             <summary>
             Returns the number of sifting phase I iterations from the last solve.
             </summary>
            <returns>The number of sifting phase I iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossDExch64">
             <summary>
             Returns the number of dual exchange operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of dual exchange operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossDPush64">
             <summary>
             Returns the number of dual push operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of dual push operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossPExch64">
             <summary>
             Returns the number of primal exchange operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of primal exchange operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossPPush64">
             <summary>
             Returns the number of primal push operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of primal push operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNiterations">
             <summary>
             Returns the number of iterations from the last solve.
             </summary>
            <returns>The number of iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNphaseOneIterations">
             <summary>
             Returns the number of phase I simplex iterations from the last solve.
             </summary>
            <returns>The number of phase I simplex iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNbarrierIterations">
             <summary>
             Returns the number of barrier iterations from the last solve.
             </summary>
            <returns>The number of barrier iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsiftingIterations">
             <summary>
             Returns the number of sifting iterations from the last solve.
             </summary>
            <returns>The number of sifting iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNsiftingPhaseOneIterations">
             <summary>
             Returns the number of sifting phase I iterations from the last solve.
             </summary>
            <returns>The number of sifting phase I iterations from the last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossDExch">
             <summary>
             Returns the number of dual exchange operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of dual exchange operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossDPush">
             <summary>
             Returns the number of dual push operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of dual push operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossPExch">
             <summary>
             Returns the number of primal exchange operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of primal exchange operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcrossPPush">
             <summary>
             Returns the number of primal push operations in the crossover of the
             last solve.
             </summary>
            <returns>The number of primal push operations in the crossover of the
                     last solve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNdualSuperbasics">
             <summary>
             Returns the number of dual superbasic variables in the basis.
             </summary>
            <returns>The number of dual superbasic variables in the basis.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNprimalSuperbasics">
             <summary>
             Returns the number of primal superbasic variables in the basis.
             </summary>
            <returns>The number of primal superbasic variables in the basis.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNnodes">
             <summary>
             Returns the number of branch-and-cut nodes explored in solving
             the active model.
             </summary>
            <returns>The number of branch-and-cut nodes explored in solving the
                     active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNnodesLeft">
             <summary>
             Returns the number of unexplored nodes in the branch-and-cut tree.
             </summary>
            <returns>The number of unexplored nodes in the branch-and-cut tree.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetIncumbentNode">
             <summary>
             Returns the node number where the current incumbent was found.
             </summary>
            <returns>The node number where the current incumbent was found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNnodes64">
             <summary>
             Returns the number of branch-and-cut nodes explored in solving
             the active model.
             </summary>
            <returns>The number of branch-and-cut nodes explored in solving the
                     active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNnodesLeft64">
             <summary>
             Returns the number of unexplored nodes in the branch-and-cut tree.
             </summary>
            <returns>The number of unexplored nodes in the branch-and-cut tree.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetIncumbentNode64">
             <summary>
             Returns the node number where the current incumbent was found.
             </summary>
            <returns>The node number where the current incumbent was found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNcuts(System.Int32)">
              <summary>
              Returns the number of cuts of the specified type in use at
              the end of the previous mixed integer optimization.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="which">The cut type about which to return the number.
              </param>
              <returns>The number of cuts of this type in use.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetPriority(ILOG.Concert.INumVar,System.Int32)">
              <summary>
              Sets the branch priority for the variable <c>var</c>.
              </summary>
             <remarks>  <p>
              During branching, integer
              variables with higher priorities are given preference over integer
              variables with lower priorities.  Further, variables that have priority
              assigned to them are given preference over variables that do not.
              Branching priorities must be nonnegative integers. By default,
              the priority of a variable without a user-assigned priority is 0 (zero).
              To remove a user-assigned priority from a variable, use the method
              
               <c>Cplex.DelPriority</c>. 
              The parameter <c>MIPOrdInd</c> by default specifies that
              user-assigned priority orders should be taken into account.
              When <c>MIPOrdInd</c> is reset to its nondefault value
              0 (zero), CPLEX ignores user-assigned priorities.
              For more detail about how
              priorities are applied, see the topic <em>Issuing Priority Orders</em>
              in the <em>CPLEX User's Manual</em>.</p>
            
              
             </remarks>
             <param name="var">The variable whose priority value is being set.
              </param>
              <param name="pri">The priority value to set for the variable <c>var</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetPriorities(ILOG.Concert.INumVar[],System.Int32[])">
              <summary>
              Sets branch priorities for an array of variables.
              </summary>
             <remarks>  <p>
              During branching, integer
              variables with higher priorities are given preference over integer
              variables with lower priorities.  Further, variables that have priority
              assigned to them are given preference over variables that do not.
              Branching priorities must be nonnegative integers. By default,
              the priority of a variable without a user-assigned priority is 0 (zero).
              To remove a user-assigned priority from a variable, use the method
              
               <c>Cplex.DelPriorities</c>. 
              The parameter <c>MIPOrdInd</c> by default specifies that
              user-assigned priority orders should be taken into account.
              When <c>MIPOrdInd</c> is reset to its nondefault value
              0 (zero), CPLEX ignores user-assigned priorities.
              For more detail about how
              priorities are applied, see the topic <em>Issuing Priority Orders</em>
              in the <em>CPLEX User's Manual</em>.</p>
            
              
             </remarks>
             <param name="var">An array of variables whose priority values are being set.
              </param>
              <param name="pri">The array of priority values to use.  The priority for
                          variable <c>var[j]</c> will be set to
                          <c>pri[j]</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetPriorities(ILOG.Concert.INumVar[],System.Int32[],System.Int32,System.Int32)">
              <summary>
              Sets branch priorities for <c>num</c> consecutive variables,
              starting from the index specified by <c>start</c>.
              </summary>
             <remarks>  <p>
              During branching, integer
              variables with higher priorities are given preference over integer
              variables with lower priorities.  Further, variables that have priority
              assigned to them are given preference over variables that do not.
              Branching priorities must be nonnegative integers. By default,
              the priority of a variable without a user-assigned priority is 0 (zero).
              To remove a user-assigned priority from a variable, use the method
              
               <c>Cplex.DelPriorities</c>. 
              The parameter <c>MIPOrdInd</c> by default specifies that
              user-assigned priority orders should be taken into account.
              When <c>MIPOrdInd</c> is reset to its nondefault value
              0 (zero), CPLEX ignores user-assigned priorities.
              For more detail about how
              priorities are applied, see the topic <em>Issuing Priority Orders</em>
              in the <em>CPLEX User's Manual</em>.</p>
            
              
            
            
             </remarks>
             <param name="var">An array containing the variables whose priority
                                values are being set.
              </param>
              <param name="pri">An array containing the priority value to use.  The
                                priority for the variable <c>var[j]</c>
                                will be set to
                                <c>pri[j]</c>, for
                                <c>j = start, ..., start+num-1</c>.
              </param>
              <param name="start">The index of the first element in <c>var</c> and
                                <c>pri</c> to consider.
              </param>
              <param name="num">The number of consecutive elements
                                in <c>var</c> and
                                <c>pri</c> to consider.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetDirection(ILOG.Concert.INumVar,ILOG.CPLEX.Cplex.BranchDirection)">
              <summary>
              Sets the branching direction for a variable.
              </summary>
             <param name="var">The variable whose branching direction is being set.
              </param>
              <param name="dir">The branching direction to set for the variable
                               <c>var</c>.
            
              </param>
              <see cref="T:ILOG.CPLEX.Cplex.BranchDirection"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetDirections(ILOG.Concert.INumVar[],ILOG.CPLEX.Cplex.BranchDirection[])">
              <summary>
              Sets branching directions for an array of variables.
              </summary>
             <param name="var">The array of variables whose branching directions are
                            being set.
              </param>
              <param name="brdir">The array of branching directions to use.  The branching
                            direction of variable <c>var[j]</c> will be set
                            to <c>brdir[j]</c>.
            
              </param>
              <see cref="T:ILOG.CPLEX.Cplex.BranchDirection"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SetDirections(ILOG.Concert.INumVar[],ILOG.CPLEX.Cplex.BranchDirection[],System.Int32,System.Int32)">
              <summary>
              Sets branching directions for <c>num</c> consecutive
              variables, starting from the index specified by <c>start</c>.
              </summary>
             <param name="var">An array containing the variables whose
                                   branching directions are being set.
              </param>
              <param name="brdir">An array containing the branching directions to use.
                                   The branching direction of variable
                                   <c>var[j]</c>
                                   will be set to <c>brdir[j]</c> for
                                   <c>j = start, ..., start+num-1</c>.
              </param>
              <param name="start">The first elements in <c>var</c> and
                                   <c>brdir</c> to consider.
              </param>
              <param name="num">The number of elements in <c>var</c> and
                                   <c>brdir</c> to consider.
            
              </param>
              <see cref="T:ILOG.CPLEX.Cplex.BranchDirection"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelPriority(ILOG.Concert.INumVar)">
             <summary>
             Removes any existing branch priority assignment from variable
             <c>var</c>.
             </summary>
            <param name="var">The variable whose branch priority assignment is being
                        removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelPriorities(ILOG.Concert.INumVar[])">
             <summary>
             Removes any existing branch priority assignment from the variables in
             array <c>var</c>.
             </summary>
            <param name="var">The array of variables whose branch priority assignments
                        are being removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelPriorities(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Removes any existing branch priority assignment from <c>num</c>
             consecutive variables in the array <c>var</c>,
             starting with the variable <c>var[start]</c>.
             </summary>
            <param name="var">An array containing the variables whose branch priority
                           assignments are to be removed.
             </param>
             <param name="start">The index of the first variable in <c>var</c> from
                           which the priority order assignment is to be removed.
             </param>
             <param name="num">The number of consecutive variables
                           in <c>var</c> from which the
                           priority order assignments are to be removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelDirection(ILOG.Concert.INumVar)">
             <summary>
             Removes any existing branching direction assignments from the variable
             <c>var</c>.
             </summary>
            <param name="var">The variable whose branching direction
                        assignment is being removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelDirections(ILOG.Concert.INumVar[])">
             <summary>
             <p>Removes any existing assignments of branching direction from all the
             variables in the specified array.</p>
             </summary>
            <param name="var">An array of variables whose branching direction
                        assignments are being removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelDirections(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Removes any existing branching direction assignments from <c>num</c>
             consecutive variables in the array <c>var</c>,
             starting with the variable <c>var[start]</c>.
             </summary>
            <param name="var">And array containing the variables from which the branching
                          direction assignments are to be removed.
             </param>
             <param name="start">The index of the first variable in <c>var</c> from
                          which the branching direction assignments are to be removed.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> from which the
                          branching direction assignments are to be removed.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetPriority(ILOG.Concert.INumVar)">
             <summary>
             Returns the branch priority for a variable.
             </summary>
            <param name="var">The variable whose branch priority is being queried.
             </param>
             <returns>The branch priority for the variable <c>var</c>.
                        The value 0 (zero) specifies the <c>Cplex</c> default.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetPriorities(ILOG.Concert.INumVar[])">
             <summary>
             Returns branch priorities for an array of variables.
             </summary>
            <param name="var">The array of variables whose branch priorities are being
                        queried.
             </param>
             <returns>The branch priorities for the variables in <c>var</c>.
                        If <c>pri</c> is the array returned by this method,
                        <c>pri[j]</c> is the branch priority of variable
                        <c>var[j]</c>.  The value 0 (zero)
                        reports the default <c>Cplex</c> branch priority.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetPriorities(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Returns branch priorities for <c>num</c> consecutive variables,
             starting from the index specified by <c>start</c>.
             </summary>
            <param name="var">An array containing the variables whose branch priorities
                          are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the branch priority.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> for which to
                          query the branch priorities.
             </param>
             <returns>The branch priorities for the specified variables.
                          If <c>pri</c> is the array returned by this method,
                          <c>pri[j]</c> is the branch priority of variable
                          <c>var[j+start]</c>.  The value 0 (zero)
                          reports the default <c>Cplex</c> branch priority.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDirection(ILOG.Concert.INumVar)">
              <summary>
              Returns the branch direction for a variable.
              </summary>
             <remarks>  <p>This method returns
              the branch direction assigned to the variable <c>var</c>
              by the method
              
               Cplex.SetDirection. 
              If no branch direction has been assigned to the variable,
              
               Cplex.BranchDirection.Global 
              is returned.
              </p>
            
              
             </remarks>
             <param name="var">The variable whose branch direction is being queried.
              </param>
              <returns>The branch direction for the variable <c>var</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDirections(ILOG.Concert.INumVar[])">
              <summary>
              Returns the branch directions for an array of variables.
              </summary>
             <remarks>  <p>This method returns
              the branch direction assigned
              by the method
              
               Cplex.SetDirections 
              to each variable in the array.
              If no branch direction has been assigned to a variable,
              
               Cplex.BranchDirection.Global 
              is returned.
              </p>
            
              
             </remarks>
             <param name="var">An array of variables whose branch directions
                         are being queried.
              </param>
              <returns>The branch directions for the variables in <c>var</c>.
                         If <c>dir</c> is the array returned by this method,
                         <c>dir[j]</c> is the branch direction of variable
                         <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDirections(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns branch directions for <c>num</c> consecutive
              variables, starting from the index specified by <c>var[start]</c>.
              </summary>
             <remarks>  <p>
              If no branch direction has been assigned to a variable,
              <c>Cplex.BranchDirection.Global</c> will be returned for it.
              </p>
            
              
            
            
             </remarks>
             <param name="var">The array containing the variables whose
                           branch directions are being queried.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                           which to query the branch directions.
              </param>
              <param name="num">The number of consecutive variables
                           in <c>var</c> for which to
                           query the branch directions.
              </param>
              <returns>The branch directions for the specified variables.
                           If <c>dir</c> is the array returned by this method,
                           <c>dir[j]</c> is the branch direction of variable
                           <c>var[j+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteOrder(System.String)">
              <summary>
              Writes a priority order file with the specified <c>name</c>.
              </summary>
             <remarks>  <p>
              A priority order file contains the branching direction and branch
              priority settings for the variables in the active model.
              By convention, the file extension is <c>.Ord</c>.
              The ORD file format is documented in the
              <em>CPLEX File Formats Reference Manual</em>.
              </p>
            
              
             </remarks>
             <param name="name">The name of the file to which the priority order is written.
            
              </param>
              <see cref="M:ILOG.CPLEX.Cplex.ReadOrder(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteConflict(System.String)">
             <summary>
             Writes a conflict file with the specified <c>name</c>.
             </summary>
            <param name="name">The name of the file to which the conflict is written.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteParam(System.String)">
             <summary>
             Writes the parameter name and its current setting
             into the file specified by <c>name</c> for all the
             CPLEX parameters that are not currently
             set at their default.
             </summary>
             <remarks>
             By convention, the file extension is <c>.Prm</c>.
             The PRM file format is documented in the
             <em>CPLEX File Formats Reference Manual</em>.
            
              
             </remarks>
             <param name="name">The name of the file to write.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.ReadParam(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteBasis(System.String)">
             <summary>
             Writes the current simplex basis to the file specified by
             <c>name</c>.
             </summary>
             <remarks> By convention, the file extension is <c>.Bas</c>.
             The BAS file format is documented in the
             <em>CPLEX File Formats Reference Manual</em>.
            
             
             </remarks>
             <param name="name">The name of the file to write.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.ReadBasis(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteSolution(System.String)">
             <summary>
             Writes solution information from an optimization
             in SOL format to the file specified by <c>name</c>.
             </summary>
             <remarks> <p>
             A SOL file can later be read back into CPLEX with the method
             
              Cplex.ReadSolution. 
             By convention, the file extension is <c>.Sol</c>.
             The SOL file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and in the schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
            
             
             </remarks>
             <param name="name">The name of the file to write.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.ReadSolution(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteSolution(System.String,System.Int32)">
             <summary>
             Writes solution information from the solution pool
             in SOL format to the file specified by <c>name</c>.
             </summary>
             <remarks> <p>
             A SOL file can later be read back into CPLEX with the method
             
              Cplex.ReadSolution. 
             By convention, the file extension is <c>.Sol</c>.
             The SOL file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and in the schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
            
             
            
             </remarks>
             <param name="name">The name of the file to write.
             </param>
             <param name="soln">The index of the solution pool member for which to
                         write solution values.  A value of
                         Cplex.IncumbentId specifies
                         that the values written should correspond to the
                         incumbent rather than a member of the solution pool.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.ReadSolution(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteSolutions(System.String)">
             <summary>
             Writes solution information for all solutions in the solution pool
             in SOL format to the file specified by <c>name</c>.
             </summary>
             <remarks> <p>
             By convention, the file extension is <c>.Sol</c>.
             The SOL file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and in the schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
            
             </remarks>
             <param name="name">The name of the file to write.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteVectors(System.String)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteTextSolution(System.String)">
            <summary>
            Deprecated
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.WriteMIPStart(System.String)" -->
        <member name="M:ILOG.CPLEX.Cplex.WriteMIPStart(System.String,System.Int32)">
             <summary>
             Writes a designated MIP start
             for a MIP in the MST format to the file
             denoted by <c>name</c>.
             </summary>
             <remarks> <p>
             By convention, the file extension is <c>.Mst</c>.
             The MST file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
             <p>
             The level of detail to write to the file is controlled
             by setting the <c>Cplex.IntParam.WriteLevel</c>
             parameter.
             </p>
             
            
             </remarks>
             <param name="name">The name of the file to write.
              </param>
              <param name="mst">The index of the MIP start which should be written.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.ReadMIPStarts(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteMIPStarts(System.String,System.Int32,System.Int32)">
            <summary>
            Writes designated MIP starts, starting with the one at the
            designated index, and continuing to the specified number of
            MIP starts, to the file specified by name
            with the specified degree of information.
            </summary>
            <remarks> <p>
            The level of detail to write to the file is controlled
            by setting the <c>Cplex.IntParam.WriteLevel</c>
            parameter.
            </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteMIPStarts(System.String)">
             <summary>
             Writes all MIP starts to a named file.
             </summary>
            <remarks> <p>
            By convention, the file extension is <c>.Mst</c>.
            The MST file format is documented in the
            <em>CPLEX File Formats Reference Manual</em> and in the
            stylesheet <c>solution.Xsl</c> and schema
            <c>solution.Xsd</c> in the <c>include</c>
            directory of the product. Samples of its use appear in the
            examples distributed with the product and in the
            <em>CPLEX User's Manual</em>.
            </p>
            <p>
            The level of detail to write to the file is controlled
            by setting the <c>Cplex.IntParam.WriteLevel</c>
            parameter.
            </p>
            </remarks>
            <param name="name">The name of the file to write.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadOrder(System.String)">
             <summary>
             Reads the ORD file specified by <c>name</c>
             and copies the priority order information
             into the invoking CPLEX problem object.
             </summary>
             <remarks> <p>The parameter <c>MipOrdInd</c>
             must be on (its default setting) for the priority order
             to be used to start a subsequent optimization.
             The names in the ORD file must match names in the active model.
             </p>
             <p>
             By convention, the file extension is <c>.Ord</c>.
             The ORD file format is documented in the
             <em>CPLEX File Formats Reference Manual</em>.
             </p>
            
             
             </remarks>
             <param name="name">The name of the file to read.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.WriteOrder(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadParam(System.String)">
             <summary>
             Reads parameters and their settings from the file specified by
             <c>name</c> and applies them to the invoking object.
             </summary>
             <remarks>
             <p>Parameters not listed in the parameter file are reset
             to their default setting.
             </p><p>
             By convention, the file extension is <c>.Prm</c>.
             The PRM file format is documented in the
             <em>CPLEX File Formats Reference Manual</em>.
             </p>
            
             
             </remarks>
             <param name="name">The name of the file to read.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.WriteParam(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadBasis(System.String)">
             <summary>
             Reads a simplex basis from the BAS file specified by <c>name</c>,
             and copies that basis into the invoking object.
             </summary>
             <remarks> <p>The parameter
             <c>AdvInd</c> must not be 0 (zero) for the basis to be used to start
             a subsequent optimization.
             </p><p>
             By convention, the file extension is <c>.Bas</c>.
             The BAS file format is documented in the
             <em>CPLEX File Formats Reference Manual</em>.
             </p>
            
             
             </remarks>
             <param name="name">The name of the file to read.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.WriteBasis(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadSolution(System.String)">
             <summary>
             Reads a solution from the SOL file denoted by <c>name</c>
             and copies this information into the invoking object.
             </summary>
             <remarks> <p>
             This routine is used to initiate a crossover from a
             barrier solution, to restart the simplex method with an advanced
             basis, or to specify all the variable values for a MIP start.
             The parameter <c>AdvInd</c> must
             not be 0 (zero) in order for the solution file to take effect.
             For example, its default value, 1 (one) is an appropriate setting.
             </p><p>
             By convention, the file extension is <c>.Sol</c>.
             The SOL file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
             
             </remarks>
             <param name="name">The name of the file to read.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.WriteSolution(System.String)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadVectors(System.String)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadMIPStarts(System.String)">
             <summary>
             Reads the MST file denoted by <c>name</c> and
             copies the MIP start information into the invoking object.
             </summary>
             <remarks> <p> The parameter <c>AdvInd</c> must not be 0 (zero)
             in order for the MIP start information to be used to start
             a subsequent optimization.
             For example, its default value, 1 (one) is an appropriate setting.
             </p>
             <p>
             By convention, the file extension is <c>.Mst</c>.
             The MST file format is documented in the
             <em>CPLEX File Formats Reference Manual</em> and in the
             stylesheet <c>solution.Xsl</c> and schema
             <c>solution.Xsd</c> in the <c>include</c>
             directory of the product. Samples of its use appear in the
             examples distributed with the product and in the
             <em>CPLEX User's Manual</em>.
             </p>
            
             
             </remarks>
             <param name="name">The name of the file to read.
            
             </param>
             <see cref="M:ILOG.CPLEX.Cplex.WriteMIPStart(System.String)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ReadMIPStart(System.String)" -->
        <member name="M:ILOG.CPLEX.Cplex.Use(ILOG.CPLEX.Cplex.Callback)">
              <summary>
              Installs a user-written callback.
              </summary>
             <remarks>  <p>Callbacks are objects with a user-written method <c>main</c>
              that are called regularly during the optimization of the active
              model.  This object must be implemented as a class derived from a
              subclass of <c>Cplex.Callback</c> class, and the abstract
              method <c>main</c> must be implemented for this class.
              </p><p>
              There are several places where the <c>Cplex</c> algorithms call
              a callback.  <c>Cplex</c> provides several different types of
              callbacks, and each is implemented as a specific subclass of
              <c>Cplex.Callback</c>.
              </p><p>
              <c>Cplex</c> can use only one callback of a given type at a
              time.  Thus, when calling method <c>use</c> several times with
              callbacks of the same type, only the callback passed at the last call of
              method <c>use</c> will be executed during the optimization.
              However, callbacks of different types can be used simultaneously.</p>
            
              
             </remarks>
             <param name="cb">The callback to be used from now on.  The type of the callback
                        object being passed determines which callback is being installed.
                        If a callback of the same type has previously been installed,
                        the new callback will replace the old one.
            
              </param>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ClearCallbacks">
             <summary>
             Removes all callbacks from the invoking <c>Cplex</c> object.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetRay" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDiverging" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.DualFarkas(ILOG.Concert.IConstraint[],System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.QpIndefCertificate(ILOG.Concert.INumVar[],System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ProtectVariables(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ProtectVariables(ILOG.Concert.INumVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.End" -->
        <member name="M:ILOG.CPLEX.Cplex.RegisterLicense(System.String,System.Int32)">
              <exclude />
            <summary>
            Deprecated
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Putenv(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.And(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.And(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.And(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.And(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.And(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Or(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Or(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Or(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Or(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Or(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.Goal)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchAsCplex" -->
        <member name="M:ILOG.CPLEX.Cplex.Apply(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.NodeEvaluator)">
             <summary>
             <p>Returns a goal that applies the specified evaluator to
             the search tree defined by the specified goal.</p> <p>In doing so, it
             changes the order of processing of the active nodes of the search tree
             defined by <c>goal</c> according to <c>evaluator</c>.</p>
             </summary>
            <returns>The goal that applies the node selection strategy defined by
                     <c>evaluator</c> to the search tree defined by
                     <c>goal</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.LimitSearch(ILOG.CPLEX.Cplex.Goal,ILOG.CPLEX.Cplex.SearchLimit)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Solve(ILOG.CPLEX.Cplex.Goal)" -->
        <member name="M:ILOG.CPLEX.Cplex.FailGoal">
             <summary>
             <p>Creates and returns a goal that always fails.</p>
             <p>The node on which the goal is executed will be pruned,
             thus discarding the subtree rooted at that node.</p>
             </summary>
            <returns>The new fail goal.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ConstraintGoal(ILOG.Concert.IConstraint)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ConstraintGoal(ILOG.Concert.IConstraint[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GlobalCutGoal(ILOG.Concert.IConstraint)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GlobalCutGoal(ILOG.Concert.IConstraint[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SolutionGoal(ILOG.Concert.INumVar[],System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.EqGoal(ILOG.Concert.INumExpr,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.EqGoal(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.EqGoal(System.Double,ILOG.Concert.INumExpr)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GeGoal(ILOG.Concert.INumExpr,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GeGoal(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GeGoal(System.Double,ILOG.Concert.INumExpr)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.LeGoal(ILOG.Concert.INumExpr,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.LeGoal(ILOG.Concert.INumExpr,ILOG.Concert.INumExpr)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.LeGoal(System.Double,ILOG.Concert.INumExpr)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetSolnPoolMeanObjValue">
             <summary>
             Returns the mean objective value of the solution pool.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>The mean objective value of the solution pool.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSolnPoolNsolns">
             <summary>
             Returns the number of solutions in the solution pool.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>The number of solutions in the solution pool.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetSolnPoolNreplaced">
             <summary>
             Returns the number of replaced solutions.
             </summary>
            <remarks>  
            <exception>ILOG.Concert.Exception    If the method fails, an exception
                                           of type <c>ILOG.Concert.Exception</c>, or
                                           one of its derived classes, is thrown.</exception></remarks>
                                           <returns>The number of replaced solutions.
             </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelSolnPoolSoln(System.Int32)">
             <summary>
             <p>Deletes the designated solution from the solution pool.</p>
             </summary>
             <remarks>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                          of type <c>ILOG.Concert.Exception</c>, or
                                          one of its derived classes, is thrown.</exception></remarks>
                                          <param name="soln">The index of the solution pool member which is to
                           be deleted.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelSolnPoolSolns(System.Int32,System.Int32)">
             <summary>
             <p>Deletes a range of solutions from the solution pool.</p>
             </summary>
             <remarks>
            
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="start">The index of the first solutio which
                            is to be deleted from the solution pool.
              </param>
              <param name="num">The number of consecutive solutions which are
                            to be deleted from the solution pool.
              </param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.AddDiversityFilter(System.Double,System.Double,ILOG.Concert.INumVar[],System.Double[],System.Double[])">
             <summary>
             Creates and installs a diversity filter
             for the designated variables with the specified
             lower and upper bounds, reference values, and weights.
             </summary>
             <remarks>
             <p>A <em>diversity filter</em> drives the search for
             multiple solutions toward new solutions that satisfy
             a measure of diversity specified in the filter.
             </p>
             <p>
             This diversity measure applies only to binary variables.
             </p>
             <p>
             Potential new solutions are compared to a reference set.
             You must specify which variables are to be compared.
             You do so with the argument <c>vars</c> designating
             the indices of variables to include in the diversity measure.
             </p>
             <p>
             A <em>reference set</em>
             is the set of values specified by the argument <c>refval</c>.
             </p>
             <p>
             You may optionally specify weights (that is, coefficients
             to form a linear expression in terms of the variables)
             in the diversity measure;
             if you do not specify weights, all differences between
             the reference set and potential new solutions  will be
             weighted by the value 1.0 (one). CPLEX computes
             the diversity measure by summing the pair-wise weighted
             absolute differences from the reference values, like this:
             </p>
             <p>
             <c>
             differences(x) = sum {weight[i] times |x[vars[i]] - refval[i]|}.
             </c>
             </p>
             <p>
             A diversity filter makes sure that the solutions satisfy the constraint:
             </p>
             <p>
             <c>
             lower bound &lt;= differences(x) &lt;= upper bound
             </c>
             </p>
             <p>You may specify both a lower and upper bound on diversity.</p>
             <p>
             In order to say, <em>Give me solutions that are
             close to this one, within this specified set of variables,</em>
             specify a <c>lower_bound</c> of 0.0 (zero) and a finite
             <c>upper_bound</c>.
             CPLEX then looks for solutions that differ from the reference
             values by at most the value of <c>upper_bound</c>, within
             the specified set of variables.
             </p><p>
             In order to say, <em>Give me solutions that are different
             from this one,</em> specify a finite <c>lower_bound</c>
             and an infinite (that is, very large) <c>upper_bound</c>
             on the diversity.
             CPLEX then looks for solutions that differ from the reference values
             by at least the value of <c>lower_bound</c>, within the
             specified set of variables.
             </p>
            
             
            
            
            
            
             </remarks>
             <param name="lower_bound"><p>A lower bound on the diversity measure for new solutions allowed in the pool.</p>
            
             </param>
             <param name="upper_bound"><p>An upper bound on the diversity measure for new solutions allowed in the pool.</p>
            
             </param>
             <param name="vars"><p>An array of numeric variables in the diversity measure.</p>
            
             </param>
             <param name="weights"><p>An array of weights corresponding to the variables to be used in the diversity measure. May be NULL, in which case CPLEX uses weights of 1.0 (one). </p>
            
             </param>
             <param name="refval"><p>An array of reference values for the the variables in the diversity filter to compare with a solution when CPLEX computes the diversity measure. </p>
            
             </param>
             <returns><p>The index of the added filter. </p></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.AddDiversityFilter(System.Double,System.Double,ILOG.Concert.INumVar[],System.Double[],System.Double[],System.String)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetFilterIndex(System.String)">
            <summary>
            <p>Accesses the index of the filter specified by the name.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetNfilters">
            <summary>
            <p>Returns the number of filters associated with the solution pool.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetFilterType(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the type of the filter specified by its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDiversityFilterLowerCutoff(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the lower cutoff of a diversity filter, specified
            by its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDiversityFilterUpperCutoff(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the upper cutoff of a diversity filter, specified
            by its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetFilterVars(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the variables of a diversity filter, specified
            by its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDiversityFilterWeights(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the weights of a diversity filter, specified
            by its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetDiversityFilterRefVals(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the reference values of a diversity filter, specified
            by its index.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.AddRangeFilter(System.Double,System.Double,ILOG.Concert.INumVar[],System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.AddRangeFilter(System.Double,System.Double,ILOG.Concert.INumVar[],System.Double[],System.String)" -->
        <member name="M:ILOG.CPLEX.Cplex.GetRangeFilterLowerBound(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the lower bound of the range filter specified by
            its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeFilterUpperBound(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the upper bound of the range filter specified by
            its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetRangeFilterCoefs(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Accesses the coefficients of the range filter specified by
            its index.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DelFilter(ILOG.CPLEX.Cplex.FilterIndex)">
            <summary>
            <p>Deletes the specified range filter from the solution pool.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ReadFilters(System.String)">
            <summary>
            <p>Reads filters from a specified file and associates them with
            the solution pool.</p>
            <p>For more detail about the format of files containing filters
            for the solution pool, see the topic FLT in the
            <em>CPLEX File Formats Reference Manual</em>.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.WriteFilters(System.String)">
            <summary>
            <p>Writes the filters associated with the solution pool to
            the specified file.</p>
            <p>For more detail about the format of files containing filters
            for the solution pool, see the topic FLT in the
            <em>CPLEX File Formats Reference Manual</em>.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetCplexTime">
            <summary>
            Returns a time stamp.
            </summary>
            <remarks>
            <p>To measure time spent between a starting point and
            ending point of an operation,
            take the time stamp at the starting point; take the time stamp
            at the ending point; subtract the starting time stamp from
            the ending time stamp to get elapsed time in seconds. </p>
            <p>This computation measures either wall clock time (also
            known as real time) or CPU time, depending on the setting
            of the clock type parameter <c>ClockType</c>. </p>
            <p>The absolute value of the time stamp is not meaningful.</p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetDetTime" -->
        <member name="M:ILOG.CPLEX.Cplex.GetNumCores">
            <summary>
            Returns the number of logical cores.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Populate">
             <summary>
             Generates multiple solutions to a mixed integer programming (MIP) model.
             </summary>
             <remarks>
             <p>In other words, the method <c>populate</c>
             populates the solution pool of the model currently extracted by
             the invoking <c>Cplex</c> object. Like the method
             <c>solve</c>, this method returns true
             if it finds a solution (not necessarily an optimal solution).</p>
            
             <p>The algorithm that populates the solution pool works in two phases:</p>
            
             <p><strong>In the first phase</strong>, it solves the model to
             optimality (or some stopping criterion set by the user) while it
             sets up a branch and cut tree for the second phase.</p>
            
             <p><strong>In the second phase</strong>, it generates multiple solutions
             by using the information computed and stored in the first phase
             and by continuing to explore the tree.</p>
            
             <p>The amount of preparation in the first phase and the intensity
             of exploration in the second phase are controlled by the solution
             pool intensity parameter <c>SolnPoolIntensity</c>.</p>
            
             <p>Optimality is not a stopping criterion for the
             <c>populate</c> method.
             Even if the optimality gap is zero, this method will still try
             to find alternative solutions. The <strong>stopping criteria</strong>
             for <c>populate</c> are these:</p>
             <ul>
             <li>Pool limit <c>SolnPoolLim</c>. This parameter
             controls how many solutions are generated before stopping. Its default
             value is 20.
             </li>
             <li>Time limit <c>TiLim</c>, as in standard MIP optimization.
             </li>
             <li>Deterministic time limit <c>DetTiLim</c>, as in standard MIP optimization.
             </li>
             <li>Node limit <c>NodeLim</c>, as in standard MIP optimization.
             </li>
             <li>In the absence of other stopping criteria, <c>populate</c>
             stops when it cannot enumerate any more solutions. In particular, if the
             user specifies an objective tolerance with the relative or absolute
             solution pool gap parameters, <c>populate</c> stops if it
             cannot enumerate any more solutions within the specified objective
             tolerance. There may exist additional solutions that satisfy the
             specified objective tolerance; depending on the solution pool intensity
             parameter, <c>populate</c> may or may not enumerate all of them;
             according to certain settings of the solution pool intensity parameter,
             <c>populate</c> may stop when it has enumerated a subset of
             additional solutions satisfying the specified objective tolerance.
             </li>
             </ul>
            
             <p>Successive calls to <c>populate</c> create solutions
             that are stored in the solution pool. However, each call to
             <c>populate</c> applies only to the subset of solutions
             created in the current call; the call does not affect the solutions
             already in the pool. In other words, solutions in the pool are
             persistent. </p>
            
             <p>The user may call this routine independently of any MIP optimization
              of a model. In that case, it carries
             out the first and second phase itself. </p>
            
             <p>The user may also call <c>populate</c> after
             standard MIP optimization.
             In the general case, the user reads the model,
             calls MIP optimization, then calls <c>populate</c>. The
             activity of MIP optimization constitutes the first phase of the
             populate algorithm; <c>populate</c> then re-uses the
             information computed and stored by MIP optimization and thus
             carries out only the second phase.</p>
            
             <p>The method <c>populate</c> does not try to generate
             multiple solutions for unbounded MIP models. As soon
             as the proof of unboundedness is obtained,
             <c>populate</c> stops.</p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Use(ILOG.CPLEX.Cplex.Aborter)">
             <summary>
             <p>Instructs the invoking
             object to use the aborter to control termination
             of its solving and tuning methods.</p>
            
             <p>If another aborter is already being used by
             the invoking object, then this method overrides
             the previously used aborter.</p>
             </summary>
             <returns>A handle to the aborter installed in the invoking object.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.GetAborter">
            <summary>
            <p>Returns a handle to the aborter being
            used by the invoking object.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Remove(ILOG.CPLEX.Cplex.Aborter)">
            <summary>
            <p>Removes the specified aborter from the invoking object.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.GetQCDSlack(ILOG.Concert.IRange)" -->
        <member name="P:ILOG.CPLEX.Cplex.Ncols">
               <summary>
               Gets the number of columns in the matrix representation of the
               active model. Note that the result may be greater than the number of
               variables in the active model, since some modeling
               objects may require more than one matrix column.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Nrows">
               <summary>
               Gets the number of rows in the matrix representation of the active
               model. The result may be different from the number of
               constraints in the active model, since some modeling
               objects may require more than one matrix row and quadratic
               constraints are not accounted for as rows.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NQCs">
               <summary>
               Gets the number of quadratic constraints in the active
               model. The result may be different from the number
               of constraints in the active model, since linear constraints
               are counted separately.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NSOS1">
               <summary>
               Gets the number of <c>SOS</c>s of type 1 in the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NSOS2">
               <summary>
               Gets the number of <c>SOS</c>s of type 2 in the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NSOSs">
               <summary>
               Gets the number of <c>SOS</c>s of both types, 1 and 2 in the
               active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NNZs">
               <summary>
               Gets the number of nonzero elements in the matrix representation
               of the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NintVars">
               <summary>
               Gets the number of integer variables in the matrix representation
               of the active model.
               Note that the result is not necessarily equal to the number of
               integer variables in the active model, as some mapping of
               modeling objects may require the introduction of added matrix columns.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NbinVars">
               <summary>
               Gets the number of binary (or Boolean) variables in the matrix
               representation of the active model.
               Note that the result is not necessarily equal to the number of
               Boolean variables in the active model, as some mapping of
               modeling objects may require the introduction of added matrix columns.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsemiContVars">
               <summary>
               Gets the number of semicontinuous variables in the matrix
               representation of the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsemiIntVars">
               <summary>
               Gets the number of semi-integer variables in the matrix
               representation of the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Version">
               <summary>
               Gets a string that reports the version of CPLEX.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SubAlgorithm">
               <summary>
               Gets the type of the algorithm that was used to generate the solution
               of the last branch-and-cut node solved during a MIP solve
               terminated because of an error during mixed integer optimization.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ObjValue">
               <summary>
               Gets the objective value of the current solution.
               </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ILOG.CPLEX.Cplex.BestObjValue" -->
        <!-- Badly formed XML comment ignored for member "P:ILOG.CPLEX.Cplex.MIPRelativeGap" -->
        <member name="P:ILOG.CPLEX.Cplex.Cutoff">
               <summary>
               Gets the cutoff for the objective value
               when nodes are being solved during
               branch-and-cut search.
               </summary>
               <remarks>
               This value is typically computed from the
               objective value of an incumbent solution and the optimality gap.
               In the case of a minimization problem, for example, if the objective
               value of a node exceeds the cutoff value, the node can be pruned
               without the need to solve the node to optimality.
               </remarks>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Niterations64">
               <summary>
               Gets the number of iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NphaseOneIterations64">
               <summary>
               Gets the number of phase I iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NbarrierIterations64">
               <summary>
               Gets the number of barrier iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsiftingIterations64">
               <summary>
               Gets the number of sifting iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsiftingPhaseOneIterations64">
               <summary>
               Gets the number of sifting phase I iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossDExch64">
               <summary>
               Gets the number of dual exchange operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossDPush64">
               <summary>
               Gets the number of dual push operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossPExch64">
               <summary>
               Gets the number of primal exchange operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossPPush64">
               <summary>
               Gets the number of primal push operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Niterations">
               <summary>
               Gets the number of iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NphaseOneIterations">
               <summary>
               Gets the number of phase I iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NbarrierIterations">
               <summary>
               Gets the number of barrier iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsiftingIterations">
               <summary>
               Gets the number of sifting iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NsiftingPhaseOneIterations">
               <summary>
               Gets the number of sifting phase I iterations from the last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossDExch">
               <summary>
               Gets the number of dual exchange operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossDPush">
               <summary>
               Gets the number of dual push operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossPExch">
               <summary>
               Gets the number of primal exchange operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NcrossPPush">
               <summary>
               Gets the number of primal push operations in the crossover of the
               last solve.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NdualSuperbasics">
               <summary>
               Gets the number of dual superbasic variables in the basis.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NprimalSuperbasics">
               <summary>
               Gets the number of primal superbasic variables in the basis.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Nnodes">
               <summary>
               Gets the number of branch-and-cut nodes explored in solving
               the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NnodesLeft">
               <summary>
               Gets the number of unexplored nodes in the branch-and-cut tree.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.IncumbentNode">
               <summary>
               Gets the node number where the current incumbent was found.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Nnodes64">
               <summary>
               Gets the number of branch-and-cut nodes explored in solving
               the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NnodesLeft64">
               <summary>
               Gets the number of unexplored nodes in the branch-and-cut tree.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.IncumbentNode64">
               <summary>
               Gets the node number where the current incumbent was found.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Ray">
               <summary>
               Gets a linear expression representing an unbounded direction for the
               active model if it has been proven unbounded by one of the simplex
               methods.  If <c>a*x + b*y</c> is the returned by this method, it
               represents an unbounded direction vector with an <c>x</c>
               coordinate of <c>a</c> and <c>y</c> coordinate of
               <c>b</c>.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SolnPoolMeanObjValue">
               <summary>
               Gets the mean objective value of the solution pool.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SolnPoolNsolns">
               <summary>
               Gets the number of solutions in the solution pool.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SolnPoolNreplaced">
               <summary>
               Gets the number of replaced solutions.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CplexTime">
              <summary>
              Returns a time stamp.
              </summary>
             <remarks>
             <p>To measure time spent between a starting point and
             ending point of an operation,
             take the time stamp at the starting point; take the time stamp
             at the ending point; subtract the starting time stamp from
             the ending time stamp to get elapsed time in seconds. </p>
             <p>This computation measures either wall clock time (also
             known as real time) or CPU time, depending on the setting
             of the clock type parameter <code>ClockType</code>. </p>
             </remarks>
            
        </member>
        <member name="P:ILOG.CPLEX.Cplex.DetTime">
              
              <summary>
              Returns a deterministic time stamp.
              </summary>
             <remarks>
              <p>This method returns a deterministic time stamp specifying when 
              the deterministic time limit will occur. To compute remaining time 
              in ticks, subtract the result of 
              <c>GetDetTime</c> 
              from the result of this method.
              The absolute value of the deterministic time stamp is not meaningful.</p>
             </remarks>
            
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NumCores">
              <summary>
              Returns the number of logical cores.
              </summary>
            
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Status">
             <summary>
             Enumeration of possible solution status values, as returned by the
             method <c>cplex.GetStatus</c>.
             </summary>
            <remarks>  <p>The status
             contains the information the <c>Cplex</c> optimizer has gathered
             so far about a possible solution to the active model. User
             code typically refers to a solution status by specifying the full path,
             for example <c>Cplex.Status.Optimal</c>. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Error">
             <summary>
             The <c>Error</c> solution status reports that an error has
             occurred.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Unknown">
             <summary>
             The <c>Unknown</c> solution status reports that the optimizer
             has not gathered any information about the active model.
             </summary>
            <remarks>
             <p>
             This is usually the status before a solve method has been called, or
             after the model has been manipulated. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Feasible">
             <summary>
             The <c>Feasible</c> solution status reports that the
             <c>Cplex</c> optimizer has found a feasible solution
             that can be queried with the method
             <c>getValue</c>.
             </summary>
            <remarks>  <p>Neither the optimality nor the nonoptimality
             of this solution has been proven. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Bounded">
             <summary>
             The <c>Bounded</c> solution status reports that the
             <c>Cplex</c> optimizer has determined that the model is not
             unbounded.
             </summary>
            <remarks>  <p>This status does <strong>not</strong> imply that the
             model is feasible. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Optimal">
             <summary>
             The <c>Optimal</c> solution status reports that the
             <c>Cplex</c> optimizer has found an optimal solution that
             can be queried with the method <c>getValue</c>.
             </summary>
            <remarks>  <p>The solution is proven to be optimal only within
             tolerances and achievable numeric accuracy. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Infeasible">
             <summary>
             The <c>Infeasible</c> solution status reports that the
             <c>Cplex</c> optimizer has determined that the model is
             infeasible.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.Unbounded">
             <summary>
             The <c>Unbounded</c> solution status reports that the
             <c>Cplex</c> optimizer has determined that the model is
             unbounded.
             </summary>
            <remarks>  <p>It has not, however, found the model to be feasible.
             Instead, the optimizer has proven that for any feasible solution, a
             better one could be constructed. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Status.InfeasibleOrUnbounded">
             <summary>
             The <c>InfeasibleOrUnbounded</c> solution status reports that
             the <c>Cplex</c> optimizer has determined that the model is
             infeasible or unbounded.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Status.ToString">
            <summary>
            Transforms status into a human-readable string.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Algorithm">
             <summary>
             Enumeration of types of algorithms (algorithm-type)
             used by <c>Cplex</c>.
             </summary>
            <remarks>  <p>
             Use these algorithm-types with the parameters
             <c>Cplex.IntParam.RootAlg</c> and
             <c>Cplex.IntParam.NodeAlg</c> to specify which
             algorithm to apply during branch-and-cut search.
             In the case of <c>Cplex.IntParam.RootAlg</c>, the
             algorithm-type specifies the algorithm that solves the root relaxation.
             In the case of <c>Cplex.IntParam.NodeAlg</c>, the
             algorithm-type specifies the algorithm that solves
             the problems at other nodes.  These parameters can be set with the
             method <c>Cplex.SetParam</c>.  </p>
             <p>These algorithm-types are also
             returned by <c>Cplex.GetAlgorithm</c>, to report the
             algorithm that was used to generate the current solution.
             </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.None">
             <summary>
             Selects no algorithm.
             </summary>
            <remarks>  <p>This algorithm-type is available only to
             specify the crossover algorithm to use after an LP or QP
             is solved with the
             barrier method. If you select <c>Cplex.Algorithm.None</c> as
             the crossover algorithm for the barrier method (parameter
             <c>Cplex.IntParam.BarCrossAlg</c>), no crossover to a
             simplex solution is performed after the barrier optimization. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Auto">
             <summary>
             Allows <c>Cplex</c> to select an algorithm.
             </summary>
            <remarks>  <p>This algorithm
             choice instructs the <c>Cplex</c> optimizer to select the most
             suitable or default optimizer for solving LPs, QCPs, or QPs. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Primal">
             <summary>
             Selects the primal simplex algorithm.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use the primal simplex method
             for solving LPs or QPs. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Dual">
             <summary>
             Selects the dual simplex algorithm.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use the dual simplex method
             for solving LPs or QPs. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Network">
             <summary>
             Selects the network simplex algorithm.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use the network simplex method
             on the embedded network for solving LPs or QPs and to continue with a
             simplex method. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Barrier">
             <summary>
             Selects the barrier algorithm.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use the barrier optimizer
             to solve an LP, QCP, or QP.  When solving an LP or QP, the optimizer
             performs a crossover to a simplex solution unless the parameter
             <c>Cplex.IntParam.BarCrossAlg</c> is set to
             <c>Cplex.Algorithm.None</c>. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Sifting">
             <summary>
             Selects the sifting algorithm.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use the sifting optimizer
             to solve LP problems.  The sifting optimizer is available only
             for LPs; other attempts to use this choice
             will automatically revert to <c>Auto</c>. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.Concurrent">
             <summary>
             Selects the concurrent optimizer.
             </summary>
            <remarks>  <p>This algorithm-type instructs
             the <c>Cplex</c> optimizer to use several algorithm options
             concurrently. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.FeasOpt">
             <summary>
             This value may not be used to select an optimizer but is returned
             by <c>Cplex.GetAlgorithm</c> when
             the method <c>feasOpt</c> has
             generated the current solution.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Algorithm.MIP">
             <summary>
             This value may not be used to select an optimizer but is returned
             by <c>Cplex.GetAlgorithm</c> when the mixed integer
             optimizer has generated the current solution.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Param">
             <summary>
             Abstract class to support names of parameters by type.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Param.GetValue">
              <exclude />
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam">
             <summary>
             Symbolic names for parameters in <c>Cplex</c> that are 
             Boolean-valued.
             </summary>
            <remarks>Boolean values are sometimes also referred to as 
             binary values or zero-one values. For more detail about each parameter,
             see the <em>CPLEX Parameters Reference Manual</em>.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._CloneLog">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CLONELOG</c> in the C API,
             or <c>Cplex::BoolParam::CloneLog</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._PreInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PREIND</c> in the C API,
             or <c>Cplex::BoolParam::PreInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._ReverseInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REVERSEIND</c> in the C API,
             or <c>Cplex::BoolParam::ReverseInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._XXXInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_XXXIND</c> in the C API,
             or <c>Cplex::BoolParam::XXXInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._MIPOrdInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPORDIND</c> in the C API,
             or <c>Cplex::BoolParam::MIPOrdInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._MPSLongNum">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MPSLONGNUM</c> in the C API,
             or <c>Cplex::BoolParam::MPSLongNum</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._LBHeur">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_LBHEUR</c> in the C API,
             or <c>Cplex::BoolParam::LBHeur</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._PerInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PERIND</c> in the C API,
             or <c>Cplex::BoolParam::PerInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._PreLinear">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PRELINEAR</c> in the C API,
             or <c>Cplex::BoolParam::PreLinear</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._DataCheck">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DATACHECK</c> in the C API,
             or <c>Cplex::BoolParam::DataCheck</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._QPmakePSDInd">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_QPMAKEPSDIND</c> in the C API,
             or <c>Cplex::BoolParam::QPmakePSDInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._MemoryEmphasis">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MEMORYEMPHASIS</c> in the C API,
             or <c>Cplex::BoolParam::MemoryEmphasis</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParam._NumericalEmphasis">
            <summary>
            Boolean control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NUMERICALEMPHASIS</c> in the C API,
             or <c>Cplex::BoolParam::NumericalEmphasis</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam">
             <summary>
             Symbolic parameter names for integer-valued 
             <c>Cplex</c> parameters.
             </summary>
            <remarks>  For more detail about each parameter, see the
             <em>CPLEX Parameters Reference Manual</em>.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IntParam.AlsoLong">
            <exclude />
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._AdvInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_ADVIND</c> in the C API,
             or <c>Cplex::IntParam::AdvInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RootAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_LPMETHOD</c> in the C API,
             or <c>Cplex::IntParam::RootAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NodeAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SUBALG</c> in the C API,
             or <c>Cplex::IntParam::NodeAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPEmphasis">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPEMPHASIS</c> in the C API,
             or <c>Cplex::IntParam::MIPEmphasis</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._AggInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_AGGIND</c> in the C API,
             or <c>Cplex::IntParam::AggInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ClockType">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CLOCKTYPE</c> in the C API,
             or <c>Cplex::IntParam::ClockType</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._CraInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CRAIND</c> in the C API,
             or <c>Cplex::IntParam::CraInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._DepInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DEPIND</c> in the C API,
             or <c>Cplex::IntParam::DepInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PreDual">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PREDUAL</c> in the C API,
             or <c>Cplex::IntParam::PreDual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PrePass">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PREPASS</c> in the C API,
             or <c>Cplex::IntParam::PrePass</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RelaxPreInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_RELAXPREIND</c> in the C API,
             or <c>Cplex::IntParam::RelaxPreInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RepeatPresolve">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REPEATPRESOLVE</c> in the C API,
             or <c>Cplex::IntParam::RepeatPresolve</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Symmetry">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SYMMETRY</c> in the C API,
             or <c>Cplex::IntParam::Symmetry</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._DPriInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DPRIIND</c> in the C API,
             or <c>Cplex::IntParam::DPriInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PriceLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PRICELIM</c> in the C API,
             or <c>Cplex::IntParam::PriceLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SimDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SIMDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::SimDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NetFind">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETFIND</c> in the C API,
             or <c>Cplex::IntParam::NetFind</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PerLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PERLIM</c> in the C API,
             or <c>Cplex::IntParam::PerLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PPriInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PPRIIND</c> in the C API,
             or <c>Cplex::IntParam::PPriInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ReInv">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REINV</c> in the C API,
             or <c>Cplex::IntParam::ReInv</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ScaInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SCAIND</c> in the C API,
             or <c>Cplex::IntParam::ScaInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Threads">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_THREADS</c> in the C API,
             or <c>Cplex::IntParam::Threads</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._AuxRootThreads">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_AUXROOTTHREADS</c> in the C API,
             or <c>Cplex::IntParam::AuxRootThreads</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ParallelMode">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PARALLELMODE</c> in the C API,
             or <c>Cplex::IntParam::ParallelMode</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SingLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SINGLIM</c> in the C API,
             or <c>Cplex::IntParam::SingLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Reduce">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REDUCE</c> in the C API,
             or <c>Cplex::IntParam::Reduce</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ColReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_COLREADLIM</c> in the C API,
             or <c>Cplex::IntParam::ColReadLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RowReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_ROWREADLIM</c> in the C API,
             or <c>Cplex::IntParam::RowReadLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._WriteLevel">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_WRITELEVEL</c> in the C API,
             or <c>Cplex::IntParam::WriteLevel</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RandomSeed">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_RANDOMSEED</c> in the C API,
             or <c>Cplex::IntParam::RandomSeed</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SiftDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SIFTDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::SiftDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SiftAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SIFTALG</c> in the C API,
             or <c>Cplex::IntParam::SiftAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BrDir">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BRDIR</c> in the C API,
             or <c>Cplex::IntParam::BrDir</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Cliques">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CLIQUES</c> in the C API,
             or <c>Cplex::IntParam::Cliques</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._CoeRedInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_COEREDIND</c> in the C API,
             or <c>Cplex::IntParam::CoeRedInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Covers">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_COVERS</c> in the C API,
             or <c>Cplex::IntParam::Covers</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::MIPDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NodeFileInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NODEFILEIND</c> in the C API,
             or <c>Cplex::IntParam::NodeFileInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NodeSel">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NODESEL</c> in the C API,
             or <c>Cplex::IntParam::NodeSel</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._VarSel">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_VARSEL</c> in the C API,
             or <c>Cplex::IntParam::VarSel</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BndStrenInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BNDSTRENIND</c> in the C API,
             or <c>Cplex::IntParam::BndStrenInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FPHeur">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FPHEUR</c> in the C API,
             or <c>Cplex::IntParam::FPHeur</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPOrdType">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPORDTYPE</c> in the C API,
             or <c>Cplex::IntParam::MIPOrdType</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FlowCovers">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FLOWCOVERS</c> in the C API,
             or <c>Cplex::IntParam::FlowCovers</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ImplBd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_IMPLBD</c> in the C API,
             or <c>Cplex::IntParam::ImplBd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._Probe">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PROBE</c> in the C API,
             or <c>Cplex::IntParam::Probe</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._GUBCovers">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_GUBCOVERS</c> in the C API,
             or <c>Cplex::IntParam::GUBCovers</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._StrongCandLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_STRONGCANDLIM</c> in the C API,
             or <c>Cplex::IntParam::StrongCandLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FracCand">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FRACCAND</c> in the C API,
             or <c>Cplex::IntParam::FracCand</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FracCuts">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FRACCUTS</c> in the C API,
             or <c>Cplex::IntParam::FracCuts</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PreslvNd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PRESLVND</c> in the C API,
             or <c>Cplex::IntParam::PreslvNd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FlowPaths">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FLOWPATHS</c> in the C API,
             or <c>Cplex::IntParam::FlowPaths</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIRCuts">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIRCUTS</c> in the C API,
             or <c>Cplex::IntParam::MIRCuts</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._DisjCuts">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DISJCUTS</c> in the C API,
             or <c>Cplex::IntParam::DisjCuts</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ZeroHalfCuts">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_ZEROHALFCUTS</c> in the C API,
             or <c>Cplex::IntParam::ZeroHalfCuts</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MCFCuts">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MCFCUTS</c> in the C API,
             or <c>Cplex::IntParam::MCFCuts</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._AggCutLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_AGGCUTLIM</c> in the C API,
             or <c>Cplex::IntParam::AggCutLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._EachCutLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EACHCUTLIM</c> in the C API,
             or <c>Cplex::IntParam::EachCutLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._DiveType">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DIVETYPE</c> in the C API,
             or <c>Cplex::IntParam::DiveType</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPSearch">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPSEARCH</c> in the C API,
             or <c>Cplex::IntParam::MIPSearch</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIQCPStrat">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIQCPSTRAT</c> in the C API,
             or <c>Cplex::IntParam::MIQCPStrat</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SolnPoolCapacity">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLNPOOLCAPACITY</c> in the C API,
             or <c>Cplex::IntParam::SolnPoolCapacity</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SolnPoolReplace">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLNPOOLREPLACE</c> in the C API,
             or <c>Cplex::IntParam::SolnPoolReplace</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SolnPoolIntensity">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLNPOOLINTENSITY</c> in the C API,
             or <c>Cplex::IntParam::SolnPoolIntensity</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PopulateLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POPULATELIM</c> in the C API,
             or <c>Cplex::IntParam::PopulateLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARALG</c> in the C API,
             or <c>Cplex::IntParam::BarAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarColNz">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARCOLNZ</c> in the C API,
             or <c>Cplex::IntParam::BarColNz</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::BarDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarOrder">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARORDER</c> in the C API,
             or <c>Cplex::IntParam::BarOrder</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarCrossAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARCROSSALG</c> in the C API,
             or <c>Cplex::IntParam::BarCrossAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarStartAlg">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARSTARTALG</c> in the C API,
             or <c>Cplex::IntParam::BarStartAlg</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NetPPriInd">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETPPRIIND</c> in the C API,
             or <c>Cplex::IntParam::NetPPriInd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NetDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::NetDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ConflictDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CONFLICTDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::ConflictDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FeasOptMode">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FEASOPTMODE</c> in the C API,
             or <c>Cplex::IntParam::FeasOptMode</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._TuningMeasure">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TUNINGMEASURE</c> in the C API,
             or <c>Cplex::IntParam::TuningMeasure</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._TuningRepeat">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TUNINGREPEAT</c> in the C API,
             or <c>Cplex::IntParam::TuningRepeat</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._TuningDisplay">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TUNINGDISPLAY</c> in the C API,
             or <c>Cplex::IntParam::TuningDisplay</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPKappaStats">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPKAPPASTATS</c> in the C API,
             or <c>Cplex::IntParam::MIPKappaStats</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SolutionTarget">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLUTIONTARGET</c> in the C API,
             or <c>Cplex::IntParam::SolutionTarget</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._AggFill">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_AGGFILL</c> in the C API,
             or <c>Cplex::IntParam::AggFill</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::AggFill</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NzReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NZREADLIM</c> in the C API,
             or <c>Cplex::IntParam::NzReadLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::NzReadLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._QPNzReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_QPNZREADLIM</c> in the C API,
             or <c>Cplex::IntParam::QPNzReadLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::QPNzReadLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BasInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BASINTERVAL</c> in the C API,
             or <c>Cplex::IntParam::BasInterval</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::BasInterval</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._ItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_ITLIM</c> in the C API,
             or <c>Cplex::IntParam::ItLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::ItLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SiftItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SIFTITLIM</c> in the C API,
             or <c>Cplex::IntParam::SiftItLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::SiftItLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARITLIM</c> in the C API,
             or <c>Cplex::IntParam::BarItLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::BarItLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BarMaxCor">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARMAXCOR</c> in the C API,
             or <c>Cplex::IntParam::BarMaxCor</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::BarMaxCor</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._BBInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BBINTERVAL</c> in the C API,
             or <c>Cplex::IntParam::BBInterval</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::BBInterval</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._CutPass">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CUTPASS</c> in the C API,
             or <c>Cplex::IntParam::CutPass</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::CutPass</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._FracPass">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FRACPASS</c> in the C API,
             or <c>Cplex::IntParam::FracPass</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::FracPass</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._HeurFreq">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_HEURFREQ</c> in the C API,
             or <c>Cplex::IntParam::HeurFreq</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::HeurFreq</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._MIPInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPINTERVAL</c> in the C API,
             or <c>Cplex::IntParam::MIPInterval</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::MIPInterval</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NodeLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NODELIM</c> in the C API,
             or <c>Cplex::IntParam::NodeLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::NodeLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._IntSolLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_INTSOLLIM</c> in the C API,
             or <c>Cplex::IntParam::IntSolLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::IntSolLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._StrongItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_STRONGITLIM</c> in the C API,
             or <c>Cplex::IntParam::StrongItLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::StrongItLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RINSHeur">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_RINSHEUR</c> in the C API,
             or <c>Cplex::IntParam::RINSHeur</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::RINSHeur</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._SubMIPNodeLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SUBMIPNODELIM</c> in the C API,
             or <c>Cplex::IntParam::SubMIPNodeLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::SubMIPNodeLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._RepairTries">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REPAIRTRIES</c> in the C API,
             or <c>Cplex::IntParam::RepairTries</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::RepairTries</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PolishAfterNode">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERNODE</c> in the C API,
             or <c>Cplex::IntParam::PolishAfterNode</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::PolishAfterNode</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._PolishAfterIntSol">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERINTSOL</c> in the C API,
             or <c>Cplex::IntParam::PolishAfterIntSol</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::PolishAfterIntSol</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParam._NetItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETITLIM</c> in the C API,
             or <c>Cplex::IntParam::NetItLim</c> in the C++ API
             for further information.</p>
            @deprecated Use <c>Cplex::LongParam::NetItLim</c> instead.  </remarks> 
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam">
             <summary>
             Symbolic parameter names for integer-valued 
             <c>Cplex</c> parameters.
             </summary>
            <remarks>  For more detail about each parameter, see the
             <em>CPLEX Parameters Reference Manual</em>.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._AggFill">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_AGGFILL</c> in the C API,
             or <c>Cplex::LongParam::AggFill</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._NzReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NZREADLIM</c> in the C API,
             or <c>Cplex::LongParam::NzReadLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._QPNzReadLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_QPNZREADLIM</c> in the C API,
             or <c>Cplex::LongParam::QPNzReadLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._BasInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BASINTERVAL</c> in the C API,
             or <c>Cplex::LongParam::BasInterval</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._ItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_ITLIM</c> in the C API,
             or <c>Cplex::LongParam::ItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._SiftItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SIFTITLIM</c> in the C API,
             or <c>Cplex::LongParam::SiftItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._BarItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARITLIM</c> in the C API,
             or <c>Cplex::LongParam::BarItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._BarMaxCor">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARMAXCOR</c> in the C API,
             or <c>Cplex::LongParam::BarMaxCor</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._BBInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BBINTERVAL</c> in the C API,
             or <c>Cplex::LongParam::BBInterval</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._CutPass">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CUTPASS</c> in the C API,
             or <c>Cplex::LongParam::CutPass</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._FracPass">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FRACPASS</c> in the C API,
             or <c>Cplex::LongParam::FracPass</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._HeurFreq">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_HEURFREQ</c> in the C API,
             or <c>Cplex::LongParam::HeurFreq</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._MIPInterval">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_MIPINTERVAL</c> in the C API,
             or <c>Cplex::LongParam::MIPInterval</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._NodeLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NODELIM</c> in the C API,
             or <c>Cplex::LongParam::NodeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._IntSolLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_INTSOLLIM</c> in the C API,
             or <c>Cplex::LongParam::IntSolLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._StrongItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_STRONGITLIM</c> in the C API,
             or <c>Cplex::LongParam::StrongItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._RINSHeur">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_RINSHEUR</c> in the C API,
             or <c>Cplex::LongParam::RINSHeur</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._SubMIPNodeLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SUBMIPNODELIM</c> in the C API,
             or <c>Cplex::LongParam::SubMIPNodeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._RepairTries">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_REPAIRTRIES</c> in the C API,
             or <c>Cplex::LongParam::RepairTries</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._PolishAfterNode">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERNODE</c> in the C API,
             or <c>Cplex::LongParam::PolishAfterNode</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._PolishAfterIntSol">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERINTSOL</c> in the C API,
             or <c>Cplex::LongParam::PolishAfterIntSol</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParam._NetItLim">
            <summary>
            Integer control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETITLIM</c> in the C API,
             or <c>Cplex::LongParam::NetItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam">
             <summary>
             Symbolic parameter names for double-valued <c>Cplex</c> parameters.
             </summary>
            <remarks>  For more detail about each parameter, see the 
             <em>CPLEX Parameters Reference Manual</em>.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpMrk">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPMRK</c> in the C API,
             or <c>Cplex::NumParam::EpMrk</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpOpt">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPOPT</c> in the C API,
             or <c>Cplex::NumParam::EpOpt</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpPer">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPPER</c> in the C API,
             or <c>Cplex::NumParam::EpPer</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpRHS">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPRHS</c> in the C API,
             or <c>Cplex::NumParam::EpRHS</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._NetEpOpt">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETEPOPT</c> in the C API,
             or <c>Cplex::NumParam::NetEpOpt</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._NetEpRHS">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_NETEPRHS</c> in the C API,
             or <c>Cplex::NumParam::NetEpRHS</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._TiLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TILIM</c> in the C API,
             or <c>Cplex::NumParam::TiLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._DetTiLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_DETTILIM</c> in the C API,
             or <c>Cplex::NumParam::DetTiLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._TuningTiLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TUNINGTILIM</c> in the C API,
             or <c>Cplex::NumParam::TuningTiLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._TuningDetTiLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TUNINGDETTILIM</c> in the C API,
             or <c>Cplex::NumParam::TuningDetTiLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._BtTol">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BTTOL</c> in the C API,
             or <c>Cplex::NumParam::BtTol</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._CutLo">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CUTLO</c> in the C API,
             or <c>Cplex::NumParam::CutLo</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._CutUp">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CUTUP</c> in the C API,
             or <c>Cplex::NumParam::CutUp</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPGAP</c> in the C API,
             or <c>Cplex::NumParam::EpGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpInt">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPINT</c> in the C API,
             or <c>Cplex::NumParam::EpInt</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpAGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPAGAP</c> in the C API,
             or <c>Cplex::NumParam::EpAGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpRelax">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPRELAX</c> in the C API,
             or <c>Cplex::NumParam::EpRelax</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._ObjDif">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_OBJDIF</c> in the C API,
             or <c>Cplex::NumParam::ObjDif</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._ObjLLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_OBJLLIM</c> in the C API,
             or <c>Cplex::NumParam::ObjLLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._ObjULim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_OBJULIM</c> in the C API,
             or <c>Cplex::NumParam::ObjULim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._PolishTime">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHTIME</c> in the C API,
             or <c>Cplex::NumParam::PolishTime</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._PolishAfterEpAGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTEREPAGAP</c> in the C API,
             or <c>Cplex::NumParam::PolishAfterEpAGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._PolishAfterEpGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTEREPGAP</c> in the C API,
             or <c>Cplex::NumParam::PolishAfterEpGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._PolishAfterTime">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERTIME</c> in the C API,
             or <c>Cplex::NumParam::PolishAfterTime</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._PolishAfterDetTime">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_POLISHAFTERDETTIME</c> in the C API,
             or <c>Cplex::NumParam::PolishAfterDetTime</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._ProbeTime">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PROBETIME</c> in the C API,
             or <c>Cplex::NumParam::ProbeTime</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._ProbeDetTime">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_PROBEDETTIME</c> in the C API,
             or <c>Cplex::NumParam::ProbeDetTime</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._RelObjDif">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_RELOBJDIF</c> in the C API,
             or <c>Cplex::NumParam::RelObjDif</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._CutsFactor">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_CUTSFACTOR</c> in the C API,
             or <c>Cplex::NumParam::CutsFactor</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._TreLim">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_TRELIM</c> in the C API,
             or <c>Cplex::NumParam::TreLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._SolnPoolGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLNPOOLGAP</c> in the C API,
             or <c>Cplex::NumParam::SolnPoolGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._SolnPoolAGap">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_SOLNPOOLAGAP</c> in the C API,
             or <c>Cplex::NumParam::SolnPoolAGap</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._WorkMem">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_WORKMEM</c> in the C API,
             or <c>Cplex::NumParam::WorkMem</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._BarEpComp">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BAREPCOMP</c> in the C API,
             or <c>Cplex::NumParam::BarEpComp</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._BarQCPEpComp">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARQCPEPCOMP</c> in the C API,
             or <c>Cplex::NumParam::BarQCPEpComp</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._BarGrowth">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BARGROWTH</c> in the C API,
             or <c>Cplex::NumParam::BarGrowth</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._BarObjRng">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_BAROBJRNG</c> in the C API,
             or <c>Cplex::NumParam::BarObjRng</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParam._EpLin">
            <summary>
            Double control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_EPLIN</c> in the C API,
             or <c>Cplex::NumParam::EpLin</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.StringParam">
             <summary>
             Symbolic parameter names for string-valued <c>Cplex</c> parameters.
             </summary>
            <remarks>  For more detail about each parameter, see the
             <em>CPLEX Parameters Reference Manual</em>.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.StringParam._WorkDir">
            <summary>
            String control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_WORKDIR</c> in the C API,
             or <c>Cplex::StringParam::WorkDir</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.StringParam._FileEncoding">
            <summary>
            String control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_FILEENCODING</c> in the C API,
             or <c>Cplex::StringParam::FileEncoding</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.StringParam._IntSolFilePrefix">
            <summary>
            String control parameter.
            </summary>
            <remarks>  <p>See <c>CPX_PARAM_INTSOLFILEPREFIX</c> in the C API,
             or <c>Cplex::StringParam::IntSolFilePrefix</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ParameterSet">
              <summary>
              A parameter set for Cplex.
              </summary>
             <remarks>  <p>This class allows you to store and restore parameters not at their
              default values.</p>
            
              <p><c>Cplex.ParameterSet</c> objects can be created empty with
              the constructor and then modified. They can also be created by the method
              <c>Cplex.GetParameterSet</c>. </p>
            
              <p>A parameter set can be applied to an instance of <c>Cplex</c>
              by means of <c>Cplex.SetParameterSet(set)</c>. </p>
            
              </remarks>
              <see cref="M:ILOG.CPLEX.Cplex.SetParameterSet(ILOG.CPLEX.Cplex.ParameterSet)"/><see cref="M:ILOG.CPLEX.Cplex.GetParameterSet"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.Clear">
             <summary>
             Clears the parameter set.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.SetParam(ILOG.CPLEX.Cplex.IntParam,System.Int32)">
             <summary>
             Sets an integer parameter to value <c>val</c>.
             </summary>
            <param name="which">The identifier of the parameter to set.
             </param>
             <param name="val">The new value for the integer parameter.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.SetParam(ILOG.CPLEX.Cplex.LongParam,System.Int64)">
             <summary>
             Sets an integer parameter to value <c>val</c>.
             </summary>
            <param name="which">The identifier of the parameter to set.
             </param>
             <param name="val">The new value for the integer parameter.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.SetParam(ILOG.CPLEX.Cplex.StringParam,System.String)">
             <summary>
             Sets a string parameter to value <c>val</c>.
             </summary>
            <param name="which">The identifier of the string parameter to set.
             </param>
             <param name="val">The new value for the string parameter.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.SetParam(ILOG.CPLEX.Cplex.BooleanParam,System.Boolean)">
             <summary>
             Sets a Boolean parameter to value <c>val</c>.
             </summary>
            <param name="which">The identifier of the Boolean parameter to be set.
             </param>
             <param name="val">The new value for the Boolean parameter.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.SetParam(ILOG.CPLEX.Cplex.DoubleParam,System.Double)">
             <summary>
             Sets a double parameter to value <c>val</c>.
             </summary>
            <param name="which">The identifier of the double parameter to be set.
             </param>
             <param name="val">The new value for the double parameter</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.GetParam(ILOG.CPLEX.Cplex.IntParam)">
              <summary>
              Returns the current value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The current value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.GetParam(ILOG.CPLEX.Cplex.LongParam)">
              <summary>
              Returns the current value of an integer parameter.
              </summary>
             <remarks>
              
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the integer parameter to be queried.
              </param>
              <returns>The current value of the integer parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.GetParam(ILOG.CPLEX.Cplex.StringParam)">
              <summary>
              Returns the current value of a string parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the string parameter to be queried.
              </param>
              <returns>The current value of the string parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.GetParam(ILOG.CPLEX.Cplex.BooleanParam)">
              <summary>
              Returns the current value of a Boolean parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the Boolean parameter to be queried.
              </param>
              <returns>The current value of the Boolean parameter.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ParameterSet.GetParam(ILOG.CPLEX.Cplex.DoubleParam)">
              <summary>
              Returns the current value of a double parameter.
              </summary>
             <remarks>  
            
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <param name="which">The identifier of the double parameter to be queried.
              </param>
              <returns>The current value of the double parameter.
              </returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Parameter">
            <summary>
            Members of this class enumerate the types of parameters.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntParameter">
            <summary>
            Members of this class access parameters that take integer values.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LongParameter">
            <summary>
            Members of this class access parameters that take integer values.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DoubleParameter">
            <summary>
            Members of this class access parameters that take a double value.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BooleanParameter">
            <summary>
            Members of this class access parameters that take a Boolean value.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.StringParameter">
            <summary>
            Members of this class access parameters that take a string as a value.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MIPEmphasis">
             <summary>
             Enumeration of possible values for the
             <c>Cplex.IntParam.MIPEmphasis</c> parameter.
             </summary>
            <remarks>  <p>Use these values with the method
             <c>setParam(Cplex.IntParam.MIPEmphasis, value)</c>. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPEmphasis.Balanced">
             <summary>
             Balance optimality and feasibility.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPEmphasis.Feasibility">
             <summary>
             Feasibility over optimality.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPEmphasis.Optimality">
             <summary>
             Optimality over feasibility.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPEmphasis.BestBound">
             <summary>
             Emphasize moving best bound.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPEmphasis.HiddenFeas">
             <summary>
             Emphasize finding hidden feasible solutions.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.VariableSelect">
             <summary>
             Enumeration of possible values for the
             <c>Cplex.IntParam.VarSel</c> parameter.
             </summary>
            <remarks>  <p>Use these values with the method
             <c>Cplex.SetParam(Cplex.IntParam.VarSel, value)</c>. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.MinInfeas">
             <summary>
             Branch on variable with minimum infeasibility.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.DefaultVarSel">
             <summary>
             Branch variable automatically selected.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.MaxInfeas">
             <summary>
             Branch on variable with maximum infeasibility.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.Pseudo">
             <summary>
             Branch based on pseudo costs.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.Strong">
             <summary>
             Strong branching.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.VariableSelect.PseudoReduced">
             <summary>
             Branch based on pseudo reduced costs.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.NodeSelect">
             <summary>
             Enumeration of possible values for the node selection parameter
             <c>Cplex.IntParam.NodeSel</c>.
             </summary>
            <remarks>  <p>Use these values with the method
             <c>Cplex.SetParam(Cplex.IntParam.NodeSel, value)</c>.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.NodeSelect.DFS">
            <summary>
            Depth-first search.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.NodeSelect.BestBound">
            <summary>
            Best-bound search.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.NodeSelect.BestEst">
            <summary>
            Best-estimate search.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.NodeSelect.BestEstAlt">
            <summary>
            Alternative best-estimate search.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.PrimalPricing">
             <summary>
             Enumeration of possible values for the primal pricing parameter
             <c>Cplex.IntParam.PPriInd</c>.
             </summary>
            <remarks>  <p>Use these values with the method
             <c>setParam(Cplex.IntParam.PPriInd, value)</c> when
             setting the primal pricing indicator. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.Partial">
             <summary>
             Reduced-cost pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.Auto">
             <summary>
             Hybrid reduced-cost and devex pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.Devex">
             <summary>
             Devex pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.Steep">
             <summary>
             Steepest-edge pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.SteepQStart">
             <summary>
             Steepest-edge pricing with slack initial norms.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.PrimalPricing.Full">
             <summary>
             Full pricing.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DualPricing">
             <summary>
             Enumeration of possible values for the dual pricing parameter
             <c>Cplex.IntParam.DPriInd</c>.
             </summary>
            <remarks>  <p>Use these
             values with the method <c>setParam(Cplex.DPriInd, value)</c>
             to set the dual pricing indicator. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.Auto">
             <summary>
             Pricing algorithm determined automatically.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.Full">
             <summary>
             Full pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.Steep">
             <summary>
             Steepest-edge pricing.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.FullSteep">
             <summary>
             Steepest- edge pricing in slack space
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.SteepQStart">
             <summary>
             Steepest- edge pricing, unit initial norms.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DualPricing.Devex">
             <summary>
             Devex pricing.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ParallelMode">
             <summary>
             Enumeration of possible values for the dual pricing parameter
             <c>Cplex.IntParam.ParallelMode</c>.
             </summary>
            <remarks>  <p>Use these values with the method
             <c>setParam(Cplex.ParallelMode, value)</c>.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ParallelMode.Auto">
             <summary>
             Automatically select parallel mode
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ParallelMode.Deterministic">
             <summary>
             Limit parallelism to maintain determinism
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ParallelMode.Opportunistic">
             <summary>
             Use all opportunities for parallelism
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ILOG.CPLEX.Cplex.MIPSearch" -->
        <member name="F:ILOG.CPLEX.Cplex.MIPSearch.Auto">
             <summary>
             Automatically select MIP search mode.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPSearch.Traditional">
             <summary>
             Use traditional branch-and-cut search.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPSearch.Dynamic">
             <summary>
             Use dynamic tree search.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ILOG.CPLEX.Cplex.SolutionTarget" -->
        <member name="F:ILOG.CPLEX.Cplex.SolutionTarget.Auto">
             <summary>
             Automatically selects MIP search mode.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.SolutionTarget.OptimalConvex">
            <summary>
            Searches for a globally optimal solution to a convex model.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.SolutionTarget.FirstOrder">
            <summary>
            Searches for a solution that satisfies first-order 
            optimality conditions, but is not necessarily 
            globally optimal.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.SolutionTarget.OptimalGlobal">
            <summary>
            Searches for a globally optimal solution in a 
            QP or MIQP that is indefinite.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DeleteMode">
             <summary>
             <p>Enumeration of possible values for the delete mode of
             <c>Cplex</c>, as controlled by the methods
             <c>setDeleteMode</c> and <c>getDeleteMode</c>.</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DeleteMode.LeaveBasis">
             <summary>
             Sets leave basis as the delete mode.
             </summary>
            <remarks>  <p>If the delete mode is set to
             <c>Cplex.DeleteMode.LeaveBasis</c>, an existing basis
             will remain unchanged if variables or constraints are removed from the
             loaded LP model. This situation may render the basis
             unusable for restarting
             optimization on the modified LP. </p>
             <p>
             If no basis is present in the invoking object, the setting of the
             delete mode has no effect.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.DeleteMode.FixBasis">
             <summary>
             Sets fix basis as the delete mode.
             </summary>
            <remarks>  <p>If the delete mode is set to
             <c>Cplex.DeleteMode.FixBasis</c>, the
             invoking object will do basis pivots in order to maintain a valid basis
             when variables or constraints are removed. This situation
             makes the delete
             operation more computation intensive, but it may provide a better
             starting point for reoptimization after the modification of the active
             model. </p>
             <p>
             If no basis is present in the invoking object, the setting of the
             delete mode has no effect.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CplexStatus">
              <summary>
              Enumeration of possible <c>Cplex</c> algorithm
              status codes.
              </summary>
            <see cref="M:ILOG.CPLEX.Cplex.GetCplexSubStatus"/><see cref="M:ILOG.CPLEX.Cplex.GetCplexStatus"/> 
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.Unknown">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>0</c> in the C API,
             or <c>Cplex::CplexStatus::Unknown</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.Optimal">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL</c> in the C API,
             or <c>Cplex::CplexStatus::Optimal</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.Unbounded">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_UNBOUNDED</c> in the C API,
             or <c>Cplex::CplexStatus::Unbounded</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.Infeasible">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_INFEASIBLE</c> in the C API,
             or <c>Cplex::CplexStatus::Infeasible</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.InfOrUnbd">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_INForUNBD</c> in the C API,
             or <c>Cplex::CplexStatus::InfOrUnbd</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalInfeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL_INFEAS</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.NumBest">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_NUM_BEST</c> in the C API,
             or <c>Cplex::CplexStatus::NumBest</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FeasibleRelaxedSum">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_FEASIBLE_RELAXED_SUM</c> in the C API,
             or <c>Cplex::CplexStatus::FeasibleRelaxedSum</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalRelaxedSum">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL_RELAXED_SUM</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalRelaxedSum</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FeasibleRelaxedInf">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_FEASIBLE_RELAXED_INF</c> in the C API,
             or <c>Cplex::CplexStatus::FeasibleRelaxedInf</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalRelaxedInf">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL_RELAXED_INF</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalRelaxedInf</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FeasibleRelaxedQuad">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_FEASIBLE_RELAXED_QUAD</c> in the C API,
             or <c>Cplex::CplexStatus::FeasibleRelaxedQuad</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalRelaxedQuad">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL_RELAXED_QUAD</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalRelaxedQuad</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortRelaxed">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_ABORT_RELAXED</c> in the C API,
             or <c>Cplex::CplexStatus::AbortRelaxed</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortObjLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_OBJ_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortObjLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortPrimObjLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_PRIM_OBJ_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortPrimObjLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortDualObjLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_DUAL_OBJ_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortDualObjLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortItLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_IT_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortTimeLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_TIME_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortTimeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortDetTimeLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_DETTIME_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::AbortDetTimeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.AbortUser">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_ABORT_USER</c> in the C API,
             or <c>Cplex::CplexStatus::AbortUser</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalFaceUnbounded">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_OPTIMAL_FACE_UNBOUNDED</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalFaceUnbounded</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalTol">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_OPTIMAL_TOL</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalTol</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.SolLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_SOL_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::SolLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.PopulateSolLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_POPULATESOL_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::PopulateSolLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.NodeLimFeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_NODE_LIM_FEAS</c> in the C API,
             or <c>Cplex::CplexStatus::NodeLimFeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.NodeLimInfeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_NODE_LIM_INFEAS</c> in the C API,
             or <c>Cplex::CplexStatus::NodeLimInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FailFeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_FAIL_FEAS</c> in the C API,
             or <c>Cplex::CplexStatus::FailFeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FailInfeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_FAIL_INFEAS</c> in the C API,
             or <c>Cplex::CplexStatus::FailInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.MemLimFeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_MEM_LIM_FEAS</c> in the C API,
             or <c>Cplex::CplexStatus::MemLimFeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.MemLimInfeas">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_MEM_LIM_INFEAS</c> in the C API,
             or <c>Cplex::CplexStatus::MemLimInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FailFeasNoTree">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_FAIL_FEAS_NO_TREE</c> in the C API,
             or <c>Cplex::CplexStatus::FailFeasNoTree</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FailInfeasNoTree">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_FAIL_INFEAS_NO_TREE</c> in the C API,
             or <c>Cplex::CplexStatus::FailInfeasNoTree</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictFeasible">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_FEASIBLE</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictFeasible</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictMinimal">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_MINIMAL</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictMinimal</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortContradiction">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_CONTRADICTION</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortContradiction</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortTimeLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_TIME_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortTimeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortDetTimeLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_DETTIME_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortDetTimeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortItLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_IT_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortItLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortNodeLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_NODE_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortNodeLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortObjLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_OBJ_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortObjLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortMemLim">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_MEM_LIM</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortMemLim</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.ConflictAbortUser">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_CONFLICT_ABORT_USER</c> in the C API,
             or <c>Cplex::CplexStatus::ConflictAbortUser</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.Feasible">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_FEASIBLE</c> in the C API,
             or <c>Cplex::CplexStatus::Feasible</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalPopulated">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_OPTIMAL_POPULATED</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalPopulated</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.OptimalPopulatedTol">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPXMIP_OPTIMAL_POPULATED_TOL</c> in the C API,
             or <c>Cplex::CplexStatus::OptimalPopulatedTol</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CplexStatus.FirstOrder">
            <summary>
            Solution Status constant.
            </summary>
            <remarks>  <p>See <c>CPX_STAT_FIRSTORDER</c> in the C API,
             or <c>Cplex::CplexStatus::FirstOrder</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BasisStatus">
             <summary>
             Enumeration of possible basis status codes.
             </summary>
            <remarks>  <p>A basis captures the essence of a solution of the simplex algorithm and
             can be used, among other things, to warm start an optimization with the
             simplex algorithm. The class <c>Cplex.BasisStatus</c>
             distinguishes three nonbasic statuses and one basic status for the
             variables (columns) and constraints (rows) of an LP or QP. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BasisStatus.NotABasicStatus">
             <summary>
             This status represents an illegal basis status.
             </summary>
            <remarks>  <p>No valid basis may contain such a status.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BasisStatus.AtLower">
             <summary>
             This status reports that the variable or slack corresponding to a
             constraint is nonbasic and at its bound.
             </summary>
            <remarks>  <p>In cases where the variable
             has both finite upper and lower bounds, this status means that the
             variable is set to its lower bound. </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BasisStatus.Basic">
             <summary>
             This status reports that the variable or slack corresponding to a
             constraint is basic.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BasisStatus.AtUpper">
             <summary>
             This status reports that the variable or slack corresponding to a
             constraint is nonbasic, and at its upper bound.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BasisStatus.FreeOrSuperbasic">
             <summary>
             This status reports that the variable is nonbasic, but not at a
             bound.
             </summary>
            <remarks>  <p>Either the variable is free and set to 0 (zero) or it is
             set to a specific value as a super-basic variable. </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BasisStatus.ToString">
             <summary>
             Transforms the status into a human-readable string.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BasisStatus.Equals(System.Object)">
             <summary>
             This method can be use to test whether two basis statuses are equal.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.WriteLevel">
            <summary>
            Levels of detail when MIP starts and solutions are written
             to formatted files.
             </summary>
            <remarks>  <p>Use these levels of detail to set the
             <c>Cplex.IntParam.WriteLevel</c> parameter.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.WriteLevel.Auto">
            <summary>
            Specifies that an automatic setting should be used.
            </summary>
            <remarks> The automatic setting is <c>AllVars</c> for
            solution files and <c>DiscreteVars</c> for
            MIP start files.</remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.WriteLevel.AllVars">
            <summary>
            Specifies that all variables should be written to the file.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.WriteLevel.NonzeroVars">
            <summary>
            Specifies that only nonzero variables should be written to the file.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.WriteLevel.DiscreteVars">
            <summary>
            Specifies that all discrete variables should be written to the file.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.WriteLevel.NonzeroDiscreteVars">
            <summary>
            Specifies that only nonzero discrete variables should be
            written to the file.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MIPStartEffort">
            <summary>
            Levels of effort for CPLEX to expend to solve a MIP start.
            </summary>
            <remarks> <p>
            Use these values in the methods <c>Cplex.AddMIPStart</c>,
            <c>getMIPStart</c>, or <c>changeMIPStart</c>.
            </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPStartEffort.Auto">
            <summary>
            Automatic: let CPLEX decide the level of effort to expend
            to solve the MIP start.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPStartEffort.CheckFeas">
            <summary>
            CPLEX checks the feasibility of the MIP start.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPStartEffort.SolveFixed">
            <summary>
            CPLEX solves the fixed problem specified by the MIP start.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPStartEffort.SolveMIP">
            <summary>
            CPLEX solves a subMIP specified by the MIP start.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.MIPStartEffort.Repair">
            <summary>
            CPLEX attempts to repair the MIP start, if it is infeasible,
            according to the <c>RepairTries</c> parameter.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Relaxation">
             <summary>
             Enumeration of possible values for the parameter <c>FeasOptMode</c>.
             </summary>
             <remarks> <p>This parameter controls several aspects of how the method
             <c>Cplex.FeasOpt</c> performs its relaxation.</p>
            
             <p>The method <c>feasOpt</c> works in two phases. In its first phase,
             it attempts to find a minimum-cost relaxation of a given infeasible model.
             If you want <c>feasOpt</c> to stop after this first phase, choose
             a value with <c>Min</c> in its symbolic name.  If you want
             <c>feasOpt</c> to continue beyond its first phase and find a
             solution that is optimal with respect to
             the original objective function, subject
             to the constraint that the cost of the relaxation must not exceed the
             minimum value found in the first phase, choose a value
             with <c>Opt</c> in its symbolic name.</p>
            
             <p>In both phases, the suffixes <c>Sum</c>, <c>Inf</c>, and
             <c>Quad</c> specify the relaxation cost metric:
             </p>
             <ul>
             <li><c>Sum</c>
             tells <c>feasOpt</c> to mimimize the weighted sum of
             the required relaxations of bounds and constraints.
             </li>
             <li><c>Inf</c>
             tells <c>feasOpt</c> to minimize the number
             of bounds and constraints that are relaxed.
             </li>
             <li><c>Quad</c>
             tells <c>feasOpt</c> to mimimize the weighted sum of
             the squares of required relaxations of bounds and constraints.
             </li>
             </ul>
             <p>Weights are determined by the preference values provided
             as input to the method <c>feasOpt</c>.</p>
            
             <p>When the method <c>and</c> is used to group constraints
             as input to
             <c>feasOpt</c>, the relaxation is computed on groups instead
             of on individual constraints.  For example, all constraints in a
             group can be relaxed for a total cost of one unit under the various
             <c>Inf</c> metrics.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.MinSum">
             <summary>
             = CPX_FEASOPT_MIN_SUM
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.OptSum">
             <summary>
             = CPX_FEASOPT_OPT_SUM
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.MinInf">
             <summary>
             = CPX_FEASOPT_MIN_INF
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.OptInf">
             <summary>
             = CPX_FEASOPT_OPT_INF
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.MinQuad">
             <summary>
             = CPX_FEASOPT_MIN_QUAD
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.Relaxation.OptQuad">
             <summary>
             = CPX_FEASOPT_OPT_QUAD
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IIS">
            <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IIS.GetNumVarStatuses">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IIS.GetConstraintStatuses">
              <exclude />
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ConflictStatus">
            <summary>
            The class of status values returned by <c>refineConflict</c>.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ConflictStatus.Excluded">
            <summary>
            This element is excluded from the conflict.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ConflictStatus.PossibleMember">
            <summary>
            This element may possibly be a member of the conflict.
            </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.ConflictStatus.Member">
            <summary>
            This element must be a member of the conflict.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ConflictStatus.Equals(System.Object)">
             <summary>
             Tests whether two instances of conflict status are equal.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType">
                <summary>
                This class contains symbolic names for <c>Cplex</c>
                solution qualities.
                </summary>
            <remarks> An instance of <c>INumVar</c> (or
                <c>IloFloatVar</c> or <c>IIntVar</c>) or an instance of 
                <c>IRange</c> will be part of the qualities with
                names starting with <c>Max</c>.  
                For these qualities, the variable or
                range returned is the first variable or range that attains the
                associated quality value.
                
                
                </remarks>
                <see cref="!:Cplex.GetQuality(Cplex.QualityType which)"/><see cref="T:ILOG.CPLEX.Cplex.Quality"/>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxPrimalInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_PRIMAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::MaxPrimalInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledPrimalInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_PRIMAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::MaxScaledPrimalInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumPrimalInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_PRIMAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::SumPrimalInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledPrimalInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_PRIMAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::SumScaledPrimalInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxDualInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_DUAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::MaxDualInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledDualInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_DUAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::MaxScaledDualInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumDualInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_DUAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::SumDualInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledDualInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_DUAL_INFEAS</c> in the C API,
             or <c>Cplex::Quality::SumScaledDualInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxIntInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_INT_INFEAS</c> in the C API,
             or <c>Cplex::Quality::MaxIntInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumIntInfeas">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_INT_INFEAS</c> in the C API,
             or <c>Cplex::Quality::SumIntInfeas</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxPrimalResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_PRIMAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::MaxPrimalResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledPrimalResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_PRIMAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::MaxScaledPrimalResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumPrimalResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_PRIMAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::SumPrimalResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledPrimalResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_PRIMAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::SumScaledPrimalResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxDualResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_DUAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::MaxDualResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledDualResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_DUAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::MaxScaledDualResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumDualResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_DUAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::SumDualResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledDualResidual">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_DUAL_RESIDUAL</c> in the C API,
             or <c>Cplex::Quality::SumScaledDualResidual</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxCompSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_COMP_SLACK</c> in the C API,
             or <c>Cplex::Quality::MaxCompSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumCompSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_COMP_SLACK</c> in the C API,
             or <c>Cplex::Quality::SumCompSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxX">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_X</c> in the C API,
             or <c>Cplex::Quality::MaxX</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledX">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_X</c> in the C API,
             or <c>Cplex::Quality::MaxScaledX</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxPi">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_PI</c> in the C API,
             or <c>Cplex::Quality::MaxPi</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledPi">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_PI</c> in the C API,
             or <c>Cplex::Quality::MaxScaledPi</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SLACK</c> in the C API,
             or <c>Cplex::Quality::MaxSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_SLACK</c> in the C API,
             or <c>Cplex::Quality::MaxScaledSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxRedCost">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_RED_COST</c> in the C API,
             or <c>Cplex::Quality::MaxRedCost</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._MaxScaledRedCost">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_MAX_SCALED_RED_COST</c> in the C API,
             or <c>Cplex::Quality::MaxScaledRedCost</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumX">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_X</c> in the C API,
             or <c>Cplex::Quality::SumX</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledX">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_X</c> in the C API,
             or <c>Cplex::Quality::SumScaledX</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumPi">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_PI</c> in the C API,
             or <c>Cplex::Quality::SumPi</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledPi">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_PI</c> in the C API,
             or <c>Cplex::Quality::SumScaledPi</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SLACK</c> in the C API,
             or <c>Cplex::Quality::SumSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledSlack">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_SLACK</c> in the C API,
             or <c>Cplex::Quality::SumScaledSlack</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumRedCost">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_RED_COST</c> in the C API,
             or <c>Cplex::Quality::SumRedCost</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._SumScaledRedCost">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_SUM_SCALED_RED_COST</c> in the C API,
             or <c>Cplex::Quality::SumScaledRedCost</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._Kappa">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA</c> in the C API,
             or <c>Cplex::Quality::Kappa</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._ObjGap">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  See CPX_OBJ_GAP in the C API,
             or Cplex::Quality::ObjGap in the C++ API
             for further information</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._DualObj">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  See CPX_DUAL_OBJ in the C API,
             or Cplex::Quality::DualObj in the C++ API
             for further information</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._PrimalObj">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  See CPX_PRIMAL_OBJ in the C API,
             or Cplex::Quality::PrimalObj in the C++ API
             for further information</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._ExactKappa">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_EXACT_KAPPA</c> in the C API,
             or <c>Cplex::Quality::ExactKappa</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaStable">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_STABLE</c> in the C API,
             or <c>Cplex::Quality::KappaStable</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaSuspicious">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_SUSPICIOUS</c> in the C API,
             or <c>Cplex::Quality::KappaSuspicious</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaUnstable">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_UNSTABLE</c> in the C API,
             or <c>Cplex::Quality::KappaUnstable</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaIllposed">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_ILLPOSED</c> in the C API,
             or <c>Cplex::Quality::KappaIllposed</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaMax">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_MAX</c> in the C API,
             or <c>Cplex::Quality::KappaMax</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.QualityType._KappaAttention">
            <summary>
            Solution Quality Type.
            </summary>
            <remarks>  <p>See <c>CPX_KAPPA_ATTENTION</c> in the C API,
             or <c>Cplex::Quality::KappaAttention</c> in the C++ API
             for further information.</p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Quality">
             <summary>
             Objects of this class contain information
             computed to measure the quality of a solution.
             </summary>
            <remarks>  <p>The possible quality
             measures are declared in <c>Cplex.QualityType</c>.  A quality
             object is returned by the method <c>Cplex.GetQuality</c>.  The
             returned quality object contains its type and the numeric value
             of the requested quality measure.  For many quality measures, the
             value is attained at a specific constraint or variable.  In such cases,
             the relevant constraint or variable is contained in the quality
             object as well, unless the constraint has been implicitly created
             as a result of automatic linearization.
             Methods are provided to query all information stored in a quality object.
             </p>
             
             </remarks>
             <see cref="M:ILOG.CPLEX.Cplex.GetQuality(ILOG.CPLEX.Cplex.QualityType)"/><see cref="T:ILOG.CPLEX.Cplex.QualityType"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Quality.GetValue">
            <summary>
            Returns the numeric value of the invoking quality measure.
            </summary>
            <returns>The numeric value of the invoking quality measure.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Quality.GetNumVar">
             <summary>
             Returns the variable at which the quality measure is attained,
             if any.
             </summary>
             <remarks> Otherwise, <c>null</c> is returned.
            
             </remarks>
             <returns>The variable at which the quality measure is attained.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Quality.GetConstraint">
             <summary>
             Returns the constraint for which the quality measure is attained,
             if any.
             </summary>
             <remarks> Otherwise, <c>null</c> is returned.
            
             </remarks>
             <returns>The constraint for which the quality measure is attained.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Quality.ToString">
            <summary>
            Returns a string with the numeric value of the invoking quality measure.
            </summary>
            <returns>A string with the numeric value of the invoking quality measure.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Quality.GetQualityType">
            <summary>
            Returns the <c>Cplex.QualityType</c> of the invoking quality
            measure.
            </summary>
            <returns>The <c>Cplex.QualityType</c> of the invoking quality
                    measure.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.TuningStatus">
             <summary>
             Members of this class represent the status of a tuning session.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.TuningStatus.Complete">
             <summary>
             Tuning is complete.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.TuningStatus.Abort">
             <summary>
             Tuning was aborted.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.TuningStatus.TimeLim">
             <summary>
             Tuning reached time limit.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.TuningStatus.DetTimeLim">
             <summary>
             Tuning reached deterministic time limit.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CutType">
             <summary>
             Enumeration of cut types.
             </summary>
            <remarks>  <p>Cut types can be used with the method
             
              Cplex.getNcuts 
             to query the cuts in use at the end of the previous
             mixed integer optimization.</p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.Cover">
             <summary>
             = CPX_CUT_COVER
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.GUBCover">
             <summary>
             = CPX_CUT_GUBCOVER
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.FlowCover">
             <summary>
             = CPX_CUT_FLOWCOVER
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.CliqueCover">
             <summary>
             = CPX_CUT_CLIQUE
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.Frac">
             <summary>
             = CPX_CUT_FRAC
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.MCF">
             <summary>
             = CPX_CUT_MCF
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.MIR">
             <summary>
             = CPX_CUT_MIR
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.FlowPath">
             <summary>
             = CPX_CUT_FLOWPATH
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.Disj">
             <summary>
             = CPX_CUT_DISJ
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.ImplBd">
             <summary>
             = CPX_CUT_IMPLBD
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.ZeroHalf">
             <summary>
             = CPX_CUT_ZEROHALF
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.LocalCover">
             <summary>
             = CPX_CUT_LOCALCOVER
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.Tighten">
             <summary>
             = CPX_CUT_TIGHTEN
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.ObjDisj">
             <summary>
             = CPX_CUT_OBJDISJ
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.User">
             <summary>
             = CPX_CUT_USER
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.Table">
             <summary>
             = CPX_CUT_TABLE
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutType.SolnPool">
             <summary>
             = CPX_CUT_SOLNPOOL
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BranchDirection">
              <summary>
              Enumeration of branch direction values.
              </summary>
             <remarks>  <p>Branch directions can be used with the methods
              
               Cplex.SetDirection and Cplex.SetDirections 
              to select the child node to
              evaluate first after branching on a specific variable.  There are three
              settings:</p>
              <ul>
              <li> <c>Up</c>: process the child where the lower bound of
                   the variable has been tightened first.</li>
              <li> <c>Down</c>: process the child where the upper bound of
                   the variable has been tightened first.</li>
              <li> <c>Global</c>: process the child first that the MIP optimizer
             would have ordinarily chosen.</li>
              </ul>
            
              </remarks>
              <see cref="M:ILOG.CPLEX.Cplex.BranchCallback.GetBranches(ILOG.Concert.INumVar[][],System.Double[][],ILOG.CPLEX.Cplex.BranchDirection[][])"/><see cref="M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.IRange[],System.Double)"/><see cref="M:ILOG.CPLEX.Cplex.SetDirections(ILOG.Concert.INumVar[],ILOG.CPLEX.Cplex.BranchDirection[])"/><see cref="M:ILOG.CPLEX.Cplex.SetDirection(ILOG.Concert.INumVar,ILOG.CPLEX.Cplex.BranchDirection)"/>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchDirection.Up">
             <summary>
             Upwards branch direction.
             </summary>
            <remarks>  Setting this branch direction for a variable instructs
             <c>Cplex</c> to first process the node where the lower bound
             has been tightened after branching on that variable.</remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchDirection.Down">
             <summary>
             Downwards branch direction.
             </summary>
            <remarks>  Setting this branch direction for a variable instructs
             <c>Cplex</c> to first process the node where the upper
             bound has been tightened after branching on that variable.</remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchDirection.Global">
             <summary>
             Global branch direction.
             </summary>
            <remarks>  <p>
             Setting this branch direction for a variable instructs
             <c>Cplex</c> to first process the node according to the
             globally selected or default branch direction.
             </p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Callback">
              <summary>
              The callback base class.
              </summary>
             <remarks>  <p>This class defines the common interface available to all callback
              classes. A callback is an object with a method <c>main</c>
              implemented by the user. This method is called by the
              <c>Cplex</c> algorithm at
              specific points during the optimization.  For each of these points, an
              extension of <c>Cplex.Callback</c> is provided.  To implement
              and use a particular callback, the following steps must be carried out:</p>
              <ul>
              <li> Select the callback class corresponding to the callback to be
                   implemented, and create an extension of that class.</li>
              <li> Implement method <c>main</c> for this extension.  When doing
                   so, you may use all of the methods defined in the callback class and
                   its base classes.</li>
              <li> If the default implementation of the method <c>clone</c> is not
                   adequate and the callback is to be used for parallel optimization,
                   this method also needs to be implemented by the user.
                   Recall that the
                   default <c>clone</c> method performs a shallow copy, so
                   typically a user implementation would perform a deep copy for
                   objects that should be local to threads or use the
                   <c>synchronize</c> keyword where synchronization is required.
                   </li>
              <li> Create an instance of the user-written callback class and pass it to
                   <c>Cplex</c> with the method <c>Cplex.Use</c>.</li>
              </ul>
              <p>The next time a solution method is executed
              on the <c>Cplex</c>
              object for which the callback has been set, the method
              <c>main</c> of the callback will be called each time
              the corresponding point in the optimization algorithm is reached,
              for example at each iteration.</p>
              <p>
              The methods of this class are protected to make sure they are
              used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="M:ILOG.CPLEX.Cplex.Use(ILOG.CPLEX.Cplex.Callback)"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Callback.Main">
             <summary>
             The method to be implemented by user callback classes.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Callback.Abort">
             <summary>
             Instructs CPLEX to stop the current optimization after the
             user-written callback finishes.
             </summary>
            <remarks>  <p>
             This method can be called from a user-written implementation of a
             <c>main</c> method to instruct the invoking  CPLEX
             optimizer to abort the current optimization.
             Note that executing additional callback methods in the callback can
             lead to unpredictable behavior. For example, callback methods such
             as <c>Cplex.SolveCallback.Solve</c> or
             <c>Cplex.BranchCallback.MakeBranch</c>
             can overwrite the callback status and thus enable the optimization
             to continue.  Therefore, to abort an optimization effectively,
             a user should exit the callback by one of
             the following ways:
             </p>
             <ul>
             <li>Call <c>return</c> immediately after the call
             of <c>abort</c>. </li>
             <li>Structure the callback so that it calls no additional methods
             of <c>Cplex.Callback</c> and its subclasses after
             <c>abort</c>.</li>
             </ul></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Callback.GetCplexTime">
            <summary>
            Returns a time stamp.
            </summary>
            <remarks>
            <p>To measure time spent between a starting point and
            ending point of an operation,
            take the time stamp at the starting point; take the time stamp
            at the ending point; subtract the starting time stamp from
            the ending time stamp to get elapsed time in seconds. </p>
            <p>This computation measures either wall clock time (also
            known as real time) or CPU time, depending on the setting
            of the clock type parameter <c>ClockType</c>. </p>
            <p>The absolute value of the time stamp is not meaningful.</p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Callback.GetDetTime">
            <summary>
            <p>This method returns a deterministic time stamp in ticks.</p>
            <p>To measure deterministic time spent between a starting point
            and ending point of an operation, take the time
            stamp at the starting point; take the time stamp at the ending point;
            subtract the starting time stamp from the ending time stamp
            to get elapsed time in deterministic ticks.</p>
            <p>
            The absolute value of a deterministic time stamp is not meaningful.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Callback.GetStartTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Callback.GetStartDetTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Callback.GetEndTime" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Callback.GetEndDetTime" -->
        <member name="P:ILOG.CPLEX.Cplex.Callback.CplexTime">
              
              <summary>
              Returns a time stamp.
              </summary>
             <remarks>
             <p>To measure time spent between a starting point and
             ending point of an operation,
             take the time stamp at the starting point; take the time stamp
             at the ending point; subtract the starting time stamp from
             the ending time stamp to get elapsed time in seconds. </p>
             <p>This computation measures either wall clock time (also
             known as real time) or CPU time, depending on the setting
             of the clock type parameter <c>ClockType</c>. </p>
             </remarks>
            
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Callback.DetTime">
              
              <summary>
              Returns a deterministic time stamp.
              </summary>
             <remarks>
              <p>This method returns a deterministic time stamp specifying when 
              the deterministic time limit will occur. 
              To compute remaining time in ticks, 
              subtract the result of 
              <c>GetDetTime</c> 
              from the result of this method.
              The absolute value of the deterministic time 
              stamp is not meaningful.</p>
             </remarks>
            
        </member>
        <!-- Badly formed XML comment ignored for member "P:ILOG.CPLEX.Cplex.Callback.StartTime" -->
        <member name="P:ILOG.CPLEX.Cplex.Callback.StartDetTime">
             
             <summary>
             Returns a deterministic time stamp specifying when 
             the solving process started.
             </summary>
             <remarks>
               <p>To compute elapsed time in deterministic ticks, 
               subtract the result of 
               <c>GetDetTime</c> 
               from the result of this method.</p>
               <p>The absolute value of the time stamp is not meaningful.</p>
             </remarks>
              <returns>A deterministic time stamp specifying when 
              the solving process started.</returns>
            
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Callback.EndTime">
             <summary>
             Returns a time stamp specifying when the solving process terminates.
             </summary>
             <remarks>
             <p>To compute remaining time in seconds, subtract the result of
             <c>Cplex.GetCplexTime</c>
             from the result of this method. This computation yields either
             wall clock time (also known as real time) or CPU time, depending
             on the clock type set by the parameter <c>ClockType</c>.</p>
             <p>The absolute value of the time stamp is not meaningful.</p>
             </remarks>
              <returns>A time specifying when the time limit will occur.</returns>
            
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Callback.EndDetTime">
              
             <summary>
             Returns a deterministic time stamp specifying 
             when the solving process terminates.
             </summary>
             <remarks>
             <p>To compute remaining time in deterministic ticks, subtract the result
              of <c>Cplex.GetEndDetTime</c>
             from the result of this method.</p>
             <p>The absolute value of the time stamp is not meaningful.</p>
             </remarks>
             <returns>A time stamp specifying when the solving process terminates.
             </returns>
            
        </member>
        <member name="T:ILOG.CPLEX.Cplex.OptimizationCallback">
            <summary>
            <p>Base class for callbacks to be used in optimization.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.OptimizationCallback.GetModel">
             <summary>
             Returns the model being solved when the invoking callback is called,
             that is, the active model.
             </summary>
            <returns>The model being solved when the invoking callback is called.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.OptimizationCallback.GetNrows">
             <summary>
             Returns the number of rows of the matrix representation of the active
             model being solved when the invoking callback is called.
             </summary>
            <returns>The number of rows of the matrix representation of the
                     active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.OptimizationCallback.GetNQCs">
             <summary>
             Returns the number of quadratic constraints in the active model being
             solved when the invoking callback is called.
             </summary>
            <returns>The number of quadratic constraints in the active model.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.OptimizationCallback.GetNcols">
             <summary>
             Returns the number of columns of the matrix representation of the
             active model being solved when the invoking callback is called.
             </summary>
            <returns>The number of columns of the matrix representation of the
                     active model.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.OptimizationCallback.Model">
               <summary>
               Gets the model being solved when the invoking callback is called,
               i.E. the active model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.OptimizationCallback.Nrows">
               <summary>
               Gets the number of rows of the matrix representation of the active
               model being solved when the invoking callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.OptimizationCallback.Ncols">
               <summary>
               Gets the number of columns of the matrix representation of the
               active model being solved when the invoking callback is called.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ContinuousCallback">
              <summary>
              The callback base class for user-written callbacks invoked at
              every iteration of the simplex or barrier optimizers when they
              are solving a continuous model.
              </summary>
             <remarks>  <p>Continuous callbacks are executed at every iteration of the simplex
              algorithm or the barrier algorithm during the solution of a continuous
              model.  Algorithm-specific callbacks are also available via the
              extensions <c>Cplex.SimplexCallback</c> and
              <c>Cplex.BarrierCallback</c>.  Note that by setting a continuous
              callback with the method <c>Cplex.Use</c>, you set the same
              callback for both the simplex and the barrier callback, thus potentially
              overriding other callbacks of these types previously installed.</p>
            
              <p>
              In the case of concurrent optimization, CPLEX calls the user-written
              callback only in the main thread, not in other concurrent threads.
              </p>
            
              <p>
              The constructor and methods of this class are protected to make sure that
              they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.BarrierCallback"/><see cref="T:ILOG.CPLEX.Cplex.SimplexCallback"/><see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.#ctor(System.Int32)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.#ctor">
             <summary>
             The user-written callback constructor.
             </summary>
            <remarks>  This constructor can be called only to construct objects of derived
             user-written callback classes, not to construct
             <c>Cplex.ContinuousCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.GetObjValue">
              <summary>
              Returns the current objective value.
              </summary>
             <remarks>  The current objective value is the objective value at the point when
              the callback is called. In the simplex method, this objective
              value may not reflect the objective function defined for the
              model being solved, but an artificial phase 1 objective function used
              to achieve primal or dual feasibility.  In the barrier method, where
              the objective functions can be computed using dual or primal vectors
              and both definitions are not equivalent (unless optimality is
              achieved), the primal objective function is returned.
            
              </remarks>
              <returns>The current objective value.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.GetInfeasibility">
              <summary>
              Returns a measure for the primal infeasibility of the current
              solution.
              </summary>
             <remarks>  If the current solution is primal feasible, a value of <c>0</c>
              will be returned. Otherwise a positive value will be returned.
            
              </remarks>
              <returns>A measure for the primal infeasibility of the current
                         solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.GetDualInfeasibility">
              <summary>
              Returns a measure for the dual infeasibility of the current
              solution.
              </summary>
             <remarks> If the current solution is dual feasible, a value of
              <c>0</c> will be  returned. Otherwise a positive value will
              be returned.
            
              </remarks>
              <returns>A measure for the dual infeasibility of the current solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.IsFeasible">
             <summary>
             Returns a Boolean value reporting whether
             the current solution is primal feasible.
             </summary>
            <returns>A Boolean value reporting whether the current solution
             is primal feasible.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.IsDualFeasible">
             <summary>
             Returns a Boolean value reporting whether the current solution is dual
             feasible.
             </summary>
            <returns>A Boolean value reporting whether the current solution is dual
                     feasible.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.GetNiterations">
             <summary>
             Returns the number of iterations performed so far.
             </summary>
            <returns>The number of iterations performed so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ContinuousCallback.GetNiterations64">
             <summary>
             Returns the number of iterations performed so far.
             </summary>
            <returns>The number of iterations performed so far.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ContinuousCallback.ObjValue">
               <summary>
               Returns the current objective value.
               The current objective value is the objective value at the point when
               the callback is called. In the simplex method, this objective
               value may not reflect the objective function defined for the
               model being solved, but an artificial phase 1 objective function used
               to achieve primal or dual feasibility.  In the barrier method, where
               the objective functions can be computed using dual or primal vectors
               and both definitions are not equivalent (unless optimality is
               achieved), the primal objective function is returned.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ContinuousCallback.Infeasibility">
               <summary>
               A measure for the primal infeasibility of the current solution.
               If the current solution is primal feasible, this value will be
               <c>0</c>. Otherwise it will be a positive value.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ContinuousCallback.DualInfeasibility">
               <summary>
               A measure for the dual infeasibility of the current solution.
               If the current solution is dual feasible, this value will be
               <c>0</c>. Otherwise it will be a positive value.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ContinuousCallback.Niterations">
               <summary>
               The number of iterations performed so far.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.SimplexCallback">
              <summary>
              This is the callback class to use when <c>Cplex</c> uses the
              simplex optimizer.
              </summary>
             <remarks>  <p>An instance of this class represents a user-written callback in an
              application that uses an instance of <c>Cplex</c> to solve a
              problem by means of the (primal or dual) simplex optimizer.  For more
              information on the simplex optimizers, see the
              <em>CPLEX User's Manual</em>.</p>
              <p><c>Cplex</c> calls the user-written callback at the end
              of each simplex iteration.</p>
              <p>
              The constructor and methods of this class are protected to make sure that
              they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ContinuousCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SimplexCallback.#ctor">
             <summary>
             Constructor for a user-written simplex callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of derived
             user-written callback classes, but not to construct
             <c>Cplex.SimplexCallback</c> objects directly.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BarrierCallback">
              <summary>
              This is the callback class to use when <c>Cplex</c> uses the
              barrier optimizer.
              </summary>
             <remarks>  <p>This class represents a user-written callback in an application that
              uses an instance of <c>Cplex</c> to solve a problem by means of
              the barrier optimizer. <c>Cplex</c> calls the user-written
              callback at the end of each barrier iteration. If an attempt is made to
              access information not available to an instance of this class, an
              exception is thrown.</p>
              <p>
              The constructor and methods of this class are protected to make sure that
              they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ContinuousCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BarrierCallback.#ctor">
             <summary>
             Constructor for user-written barrier callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of derived
             user-written callback classes. It cannot be used to construct
             <c>Cplex.BarrierCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BarrierCallback.GetDualObjValue">
             <summary>
             Returns the current dual objective value.
             </summary>
            <returns>The current dual objective value.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.BarrierCallback.DualObjValue">
               <summary>
               The current dual objective value.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.PresolveCallback">
              <summary>
              The callback class for user-written callbacks during presolve.
              </summary>
             <remarks>  An instance of the class <c>PresolveCallback</c> represents a
              user-written callback.  The callback is called periodically during
              presolve. This class enables you to access information about the effects
              of presolve on the active model for the instance of
              <c>Cplex</c>.  For example, you can query
              the number of rows or columns presolve removed from the model, the number
              of variables that have been aggregated, or the number of coefficients
              that have changed as a result of presolve.
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.#ctor">
             <summary>
             Constructor for user-written presolve callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of derived
             user-written callback classes, but not to construct
             <c>Cplex.PresolveCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNremovedRows">
             <summary>
             Returns the number of rows removed by presolve at the moment the
             callback is called.
             </summary>
            <returns>The number of rows removed by presolve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNremovedCols">
             <summary>
             Returns the number of columns removed by presolve at the moment the
             callback is called.
             </summary>
            <returns>The number of columns removed by presolve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNaggregations">
             <summary>
             Returns the number of aggregations performed by presolve at the moment
             the callback is called.
             </summary>
            <returns>The number of aggregations performed by presolve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNmodifiedCoeffs">
             <summary>
             Returns the number of coefficients modified by presolve at the moment
             the callback is called.
             </summary>
            <returns>The number of coefficients modified by presolve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNaggregations64">
             <summary>
             Returns the number of aggregations performed by presolve at the moment
             the callback is called.
             </summary>
            <returns>The number of aggregations performed by presolve.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.PresolveCallback.GetNmodifiedCoeffs64">
             <summary>
             Returns the number of coefficients modified by presolve at the moment
             the callback is called.
             </summary>
            <returns>The number of coefficients modified by presolve.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.PresolveCallback.NremovedRows">
               <summary>
               Gets the number of rows removed by presolve at the moment the
               callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.PresolveCallback.NremovedCols">
               <summary>
               Gets the number of columns removed by presolve at the moment the
               callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.PresolveCallback.Naggregations">
               <summary>
               Gets the number of aggregations performed by presolve at the
               moment the callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.PresolveCallback.NmodifiedCoeffs">
               <summary>
               Gets the number of coefficients modified by presolve at the
               moment the callback is called.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CrossoverCallback">
              <summary>
              The base class for user-written callbacks during crossover from a barrier
              solution to a simplex basis.
              </summary>
             <remarks>  <p>An instance of the class <c>CrossoverCallback</c> represents a
              user-written callback in an application that uses an instance of
              <c>Cplex</c> to solve a problem by means of the barrier
              optimizer, with the crossover option.  An instance of
              <c>Cplex</c> calls this callback regularly during crossover.
              For details about crossover, see the
              <em>CPLEX User's Manual</em>.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.#ctor">
             <summary>
             Constructor for user-written crossover callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of derived
             user-written callback classes, but not to construct
             <c>Cplex.CrossoverCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNprimalPushes">
             <summary>
             Returns the number of primal push operations at the moment
             the callback is called.
             </summary>
            <returns>The number of primal push operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNprimalExchanges">
             <summary>
             Returns the number of primal exchange operations at the moment
             the callback is called.
             </summary>
            <returns>The number of primal exchange operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNdualPushes">
             <summary>
             Returns the number of dual push operations at the moment
             the callback is called.
             </summary>
            <returns>The number of dual push operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNdualExchanges">
             <summary>
             Returns the number of dual exchange operations at the moment
             the callback is called.
             </summary>
            <returns>The number of dual exchange operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNprimalPushes64">
             <summary>
             Returns the number of primal push operations at the moment
             the callback is called.
             </summary>
            <returns>The number of primal push operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNprimalExchanges64">
             <summary>
             Returns the number of primal exchange operations at the moment
             the callback is called.
             </summary>
            <returns>The number of primal exchange operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNdualPushes64">
             <summary>
             Returns the number of dual push operations at the moment
             the callback is called.
             </summary>
            <returns>The number of dual push operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNdualExchanges64">
             <summary>
             Returns the number of dual exchange operations at the moment
             the callback is called.
             </summary>
            <returns>The number of dual exchange operations.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.CrossoverCallback.GetNsuperbasics">
             <summary>
             Returns the number of super basics created at the moment
             the callback is called.
             </summary>
            <returns>The number of super basics created.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CrossoverCallback.NprimalPushes">
               <summary>
               Gets the number of primal push operations at the moment
               the callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CrossoverCallback.NprimalExchanges">
               <summary>
               Gets the number of primal exchange operations at the moment
               the callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CrossoverCallback.NdualPushes">
               <summary>
               Gets the number of dual push operations at the moment
               the callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CrossoverCallback.NdualExchanges">
               <summary>
               Gets the number of dual exchange operations at the moment
               the callback is called.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.CrossoverCallback.Nsuperbasics">
               <summary>
               Gets the number of superbasics created at the moment
               the callback is called.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.NetworkCallback">
              <summary>
              This is the callback class to use when <c>Cplex</c> uses the
              network optimizer.
              </summary>
             <remarks>  <p>An instance of the class <c>NetCallback</c> represents a
              user-written callback in an application that uses an instance of
              <c>Cplex</c> with the network optimizer. The callback is
              executed each time the network optimizer issues a log file message.</p>
              <p>
              The constructor and methods of this class are protected to make sure
              that they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.#ctor">
             <summary>
             Constructor for user-written network callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of
             derived user-written callback classes. It cannot be used to construct
             <c>Cplex.NetworkCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.GetObjValue">
              <summary>
              Returns the current objective value.
              </summary>
             <remarks>  The current objective value is the objective value at the point when
              the callback is called. In the network simplex method, this objective
              value may not reflect the objective function defined for the
              model being solved, but an artificial phase 1 objective function used
              to achieve primal feasibility.  Also, since the network optimizer
              sees only the embedded network part of the full model,
              the objective value
              may not reflect the objective function of the full model.
            
              </remarks>
              <returns>The current objective function value.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.GetInfeasibility">
              <summary>
              Returns the primal infeasibility measure at the moment
              the callback is called.
              </summary>
             <remarks> If primal feasibility is
              obtained, the value <c>0</c> is returned.  Otherwise,
              this method returns a positive
              value.  Since the network optimizer sees only
              the embedded network part of the full model, a solution considered
              to be feasible for the network optimizer may not be so for the full
              model.
            
              </remarks>
              <returns>The measure of primal infeasibility.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.IsFeasible">
              <summary>
              Returns a Boolean value reporting whether the current solution is
              primal feasible at the moment
              the callback is called.
              </summary>
             <remarks> Since the network optimizer sees only
              the embedded network part of the full model, a solution considered
              to be feasible for the network optimizer may not be so for the full
              model.
            
              </remarks>
              <returns>A Boolean value reporting whether the current solution is
                      primal feasible.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.GetNiterations">
             <summary>
             Returns the number of iterations performed by the network optimizer
             at the moment the callback is called.
             </summary>
            <returns>The number of iterations performed by the network optimizer.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NetworkCallback.GetNiterations64">
             <summary>
             Returns the number of iterations performed by the network optimizer
             at the moment the callback is called.
             </summary>
            <returns>The number of iterations performed by the network optimizer.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NetworkCallback.ObjValue">
               <summary>
               Gets the current objective value.
               The current objective value is the objective value at the point when
               the callback is called. In the network simplex method, this objective
               value may not reflect the objective function defined for the
               model being solved, but an artificial phase 1 objective function used
               to achieve primal feasibility.  Also, since the network optimizer
               sees only the embedded network part of the full model,
               the objective value
               may not reflect the objective function of the full model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NetworkCallback.Infeasibility">
               <summary>
               Gets the primal infeasibility measure.  If primal feasibility is
               obtained, the value <c>0</c> is returned.  Otherwise,
               this method returns a positive
               value.  Since the network optimizer sees only
               the embedded network part of the full model, a solution considered
               to be feasible for the network optimizer may not be so
               for the full model.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NetworkCallback.Niterations">
               <summary>
               Gets the number of iterations performed by the network optimizer.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MIPInfoCallback">
              <summary>
              The base class for all MIP informational callbacks.
              </summary>
             <remarks>
              <p>An instance of the class <c>MIPInfoCallback</c> represents a
              user-written callback in an application that uses an instance of
              
               <c>Cplex</c>  
              to solve a mixed integer program (MIP).
              
               <c>Cplex</c>  
              calls the user-written callback prior to solving
              each node in the branch-and-cut search. </p>
            
              <p>User-written callbacks of this class are compatible
              with dynamic search.</p>
            
              <p>This class allows you to
              access an incumbent solution, an incumbent node, and an incumbent
              objective value from a user-written callback. It also allows you to
              access priority orders and statistical information, such as the number
              of cuts that have been generated. Methods are also available to query
              the number of generated cuts for each type of cut CPLEX generates.
              See the <em>CPLEX User's Manual</em> for more information about
              cuts.</p>
              <p>
              This class provides a common application programming interface
              (API) for these subclasses:</p>
              <ul>
              <li><c>Cplex.DisjunctiveCutInfoCallback</c></li>
              <li><c>Cplex.FractionalCutInfoCallback</c></li>
              <li><c>Cplex.FlowMIRCutInfoCallback</c></li>
              <li><c>Cplex.ProbingInfoCallback</c></li>
              <li><c>Cplex.MIPCallback</c> and its extensions.</li>
              </ul>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              <p>The user-written callback of this class is called by only
              one thread, even in the case of parallel execution. Consequently,
              it is <strong>not</strong> necessary for the user-written
              callback to manage synchronization.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.#ctor">
             <summary>
             <p>Constructor for user-written MIP informational callback.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>MIPInfoCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetMyThreadNum">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetBestObjValue">
              <summary>
              This method returns a bound on the optimal solution value
              of the active problem at the moment the callback is called.
              </summary>
             <remarks>  When a model has been solved to optimality,
              this value matches the optimal solution value.  Before optimality
              has been proven, this value is computed for a minimization
              (maximization) problem as the minimum (maximum) objective
              function value of all remaining unexplored nodes.
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>A bound on the optimal solution value.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetMIPRelativeGap">
              <summary>
              This method returns the relative objective gap
              of the active problem at the moment the callback is called.
              </summary>
             <remarks>  <p>
              For a minimization problem, this value is computed by
              <c>
              (bestinteger - bestobjective) / (1e-10 + |bestobjective|)
              </c>
              where <c>bestinteger</c> is the value returned by
              {@link Cplex#getObjValue Cplex.GetObjValue}
              and <c>bestobjective</c> is the value returned by
              {@link Cplex#getBestObjValue Cplex.GetBestObjValue}.
              For a maximization problem, the value is computed by:
              <c>
              (bestobjective - bestinteger) / (1e-10 + |bestobjective|)
              </c>
              </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The relative objective gap.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetCutoff">
              <summary>
              Returns the cutoff for the objective value when
              nodes are being solved during
              branch-and-cut search.
              </summary>
             <remarks>This value is typically computed from the
              objective value of an incumbent solution and the optimality gap.
              In the case of a minimization problem, for example, if the objective
              value of a node exceeds the cutoff value, the node can be pruned
              without the need to solve the node to optimality.
            
              </remarks>
              <returns>The objective value cutoff.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetIncumbentObjValue">
             <summary>
             <p>Returns the objective value of the current best integer solution
             at the moment the callback is called.</p>
             <p>This method returns the objective value for the current incumbent
             solution (that is, the best integer solution found so far).</p>
             </summary>
            <returns>The objective value for the current incumbent solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetIncumbentValue(ILOG.Concert.INumVar)">
             <summary>
             <p>Returns the value of the specified variable for the
             current best integer solution.</p>
             <p>This method returns the value of the variable in the
             current incumbent solution (that is, the best integer solution
             found so far).</p>
             </summary>
            <param name="var">The variable whose incumbent solution value is being queried.
             </param>
             <returns>The value of the variable in the current
                        incumbent solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetIncumbentValues(ILOG.Concert.INumVar[])">
             <summary>
             Returns incumbent solution values for an array of variables.
             </summary>
            <param name="vars">The array of variables whose
                         incumbent solution values are being queried.
             </param>
             <returns>The incumbent solution values for variables listed in
                         <c>var</c>.
                         The solution value for the variable <c>var[j]</c> is
                         returned as element <c>j</c> of the returned array.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetIncumbentValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Returns the incumbent solution values for a set of variables.
             </summary>
            <param name="vars">An array containing the variables whose
                             incumbent solution values are being queried.
             </param>
             <param name="start">The index of the first variable in <c>vars</c>
                             for which to return the incumbent solution value.
             </param>
             <param name="num">The number of variables in <c>vars</c> for which
                             to return the incumbent solution values.
             </param>
             <returns>The incumbent solution values for variables listed in
                             <c>var</c>.  The solution for the variable
                             <c>var[j+start]</c> is returned as element
                             <c>j</c> of the returned array.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetIncumbentValue(ILOG.Concert.INumExpr)">
             <summary>
             Returns the value <c>expr</c> takes for the current
             incumbent solution.
             </summary>
            <param name="expr">The expression for which to evaluate the current incumbent
                         solution.
             </param>
             <returns>The value <c>expr</c> takes for the current incumbent
                         solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.HasIncumbent">
             <summary>
             <p>Returns <c>true</c>
             if an incumbent solution has been found when
             the callback is called.</p>
             </summary>
            <returns><c>true</c> if an incumbent solution has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNcuts(System.Int32)">
             <summary>
             Returns the number of cuts of the specified type that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of cuts of the specified type added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNcliques">
             <summary>
             Returns the number of clique cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of clique cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNcovers">
             <summary>
             Returns the number of cover cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of cover cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNflowCovers">
             <summary>
             Returns the number of flow cover cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of flow cover cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNflowPaths">
             <summary>
             Returns the number of flow path cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of flow path cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNGUBcovers">
             <summary>
             Returns the number of GUB cover cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of GUB cover cuts added so far.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNfractionalCuts" -->
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNdisjunctiveCuts">
             <summary>
             Returns the number of disjunctive cuts that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of disjunctive cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNMIRs">
             <summary>
             Returns the number of mixed integer rounding (MIR) cuts that have
             been added to the node relaxation at the moment the callback is called.
             </summary>
            <returns>The number of MIR cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNimpliedBounds">
             <summary>
             Returns the number of implied bound cuts that have been added to
             the node relaxation at the moment the callback is called.
             </summary>
            <returns>The number of implied bound cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNzeroHalfCuts">
             <summary>
             Returns the number of zero-half cuts that have been added to
             the node relaxation at the moment the callback is called.
             </summary>
            <returns>The number of zero-half cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNMCFCuts">
             <summary>
             Returns the number of MCF cuts that have been added to
             the node relaxation at the moment the callback is called.
             </summary>
            <returns>The number of MCF cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNnodes">
             <summary>
             <p>Returns the number of nodes processed so far in the active
             branch-and-cut search.</p>
             </summary>
            <returns>The number of nodes processed so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNremainingNodes">
             <summary>
             <p>Returns the number of nodes remaining to be processed, or,
             equivalently, the number of active nodes in the tree.</p>
             </summary>
            <returns>The number of nodes remaining to be processed.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNiterations">
             <summary>
             <p>Returns the total number of iterations for solving node relaxations
             during the current optimization.</p>
             </summary>
            <returns>The total number of iterations for solving nodes</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNnodes64">
             <summary>
             <p>Returns the number of nodes processed so far in the active
             branch-and-cut search.</p>
             </summary>
            <returns>The number of nodes processed so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNremainingNodes64">
             <summary>
             <p>Returns the number of nodes remaining to be processed, or,
             equivalently, the number of active nodes in the tree.</p>
             </summary>
            <returns>The number of nodes remaining to be processed.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetNiterations64">
             <summary>
             <p>Returns the total number of iterations for solving node relaxations
             during the current optimization.</p>
             </summary>
            <returns>The total number of iterations for solving nodes</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetDirection(ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetPriority(ILOG.Concert.INumVar)">
             <summary>
             <p>Returns the branch priority for the specified variable.</p>
             </summary>
            <param name="var">The variable whose branch priority is being queried.
             </param>
             <returns>The branch priority for the variable <c>var</c></returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPInfoCallback.GetQuality(ILOG.CPLEX.Cplex.QualityType)">
             <summary>
             Returns an instance of <c>Cplex.Quality</c> that contains
             the requested quality measure.
             </summary>
            <param name="which">The <c>Cplex.QualityType</c> which should be
                               computed.
             </param>
             <returns>An instance of <c>Cplex.Quality</c>
                               for the requested quality measure.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.BestObjValue">
               <summary>
               Gets a bound on the optimal solution value
               of the active problem.  When a model has been solved to optimality,
               this value matches the optimal solution value.  Before optimality
               has been proven, this value is computed for a minimization
               (maximization) problem as the minimum (maximum) objective
               function value of all remaining unexplored nodes.
               </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ILOG.CPLEX.Cplex.MIPInfoCallback.MIPRelativeGap" -->
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.Cutoff">
               <summary>
               Gets the cutoff for the objective value when nodes
               are being solved during
               branch-and-cut search. This value is typically computed from the
               objective value of an incumbent solution and the optimality gap.
               In the case of a minimization problem, for example, if the objective
               value of a node exceeds the cutoff value, the node can be pruned
               without the need to solve the node to optimality.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.IncumbentObjValue">
               <summary>
               Gets the objective value of the current best integer solution.
               This method returns the objective value for the current incumbent
               solution (that is, the best integer solution found so far).
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.Nnodes">
               <summary>
               Gets the number of nodes processed so far in the active
               branch-and-cut search.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NremainingNodes">
               <summary>
               Gets the number of nodes remaining to be processed, or,
               equivalently, the number of active nodes in the tree.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.Niterations">
               <summary>
               Gets the total number of iterations for solving node problems
               during the current optimization.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.Ncliques">
               <summary>
               Gets the number of clique cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.Ncovers">
               <summary>
               Gets the number of cover cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NflowCovers">
               <summary>
               Gets the number of flow cover cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NflowPaths">
               <summary>
               Gets the number of flow path cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NGUBcovers">
               <summary>
               Gets the number of GUB cover cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NfractionalCuts">
               <summary>
               Gets the number of fractional cuts that have been added to the model
               during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NdisjunctiveCuts">
               <summary>
               Gets the number of disjunctive cuts that have been added to the
               model during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NMIRs">
               <summary>
               Gets the number of MIR cuts that have been added to the model during
               the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NimpliedBounds">
               <summary>
               Gets the number of implied bound cuts that have been added to the
               model during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NzeroHalfCuts">
               <summary>
               Gets the number of zero-half cuts that have been added to the
               model during the current optimization.
               problem.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.MIPInfoCallback.NMCFCuts">
               <summary>
               Gets the number of MCF cuts that have been added to the
               model during the current optimization.
               problem.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MIPCallback">
              <summary>
              The base class for MIP control and query callbacks.
              </summary>
             <remarks>  <p>An instance of the class <c>MIPCallback</c> represents a
              user-written callback in an application that uses an instance of
              
               <c>Cplex</c>  
              to solve a mixed integer program (MIP).
              
               <c>Cplex</c>  
              calls the user-written callback prior to solving
              each node in the branch-and-cut search. This class allows you to
              access an incumbent solution, an incumbent node, and an incumbent
              objective value from a user-written callback. It also allows you to
              access priority orders and statistical information, such as the number
              of cuts that have been generated. Methods are also available to query
              the number of generated cuts for each type of cut CPLEX generates.
              See the <em>CPLEX User's Manual</em> for more information about
              cuts.</p>
              <p>
              This class also provides a common application programming interface
              (API) for these subclasses of control and query callbacks:</p>
              <ul>
              <li><c>Cplex.DisjunctiveCutCallback</c></li>
              <li><c>Cplex.FractionalCutCallback</c></li>
              <li><c>Cplex.FlowMIRCutCallback</c></li>
              <li><c>Cplex.ProbingCallback</c></li>
              <li><c>Cplex.IncumbentCallback</c></li>
              <li><c>Cplex.NodeCallback</c></li>
              <li><c>Cplex.SolveCallback</c></li>
              <li><c>Cplex.ControlCallback</c> with its extensions:
                 <ul>
                 <li><c>Cplex.CutCallback</c></li>
                 <li><c>Cplex.BranchCallback</c></li>
                 <li><c>Cplex.HeuristicCallback</c></li>
                 </ul></li>
              </ul>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPCallback.#ctor">
             <summary>
             Constructor for user-written MIP callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>Cplex.MIPCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPCallback.GetUserThreads">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPCallback.GetObjCoef(ILOG.Concert.INumVar)">
             <summary>
             Returns the linear objective function coefficient for the variable
             <c>var</c> in the model being solved.
             </summary>
            <param name="var">The variable whose linear objective
                        coefficient is being queried.
             </param>
             <returns>The linear objective coefficient for the variable
                        <c>var</c> in the model being solved.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPCallback.GetObjCoefs(ILOG.Concert.INumVar[])">
             <summary>
             Returns the linear objective function coefficients for an array of
             variables in the model being solved.
             </summary>
            <param name="vars">An array of variables whose linear
                        objective function coefficients are being queried.
             </param>
             <returns>An array of double values containing the linear
                        objective function coefficients for the specified
                        variables in the problem being solved.  If the returned
                        array is called <c>obj</c>, <c>obj[j]</c>
                        is the linear objective function coefficient for
                        variable <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.MIPCallback.GetObjCoefs(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Returns the linear objective function coefficients for a set of
             variables in the model being solved.
             </summary>
            <param name="vars">An array containing the variables whose linear
                          objective function coefficients are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the linear objective function coefficients.
             </param>
             <param name="num">The number of consecutive variables in <c>var</c>
                          for which to
                          query the linear objective function coefficients.
             </param>
             <returns>An array of double values containing the linear
                          objective function coefficients for the specified
                          variables in the problem being solved.  If <c>obj</c>
                          is the returned array, <c>obj[j]</c> is the
                          linear objective function coefficient for the variable
                          <c>var[j+start]</c>, for
                          <c>j = 0, ..., num-1</c>.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MIPCallback.NodeData">
            <summary>
            Interface for user-objects attached to nodes.
            </summary>
            <remarks>
            <p>
            When you attach a user-object to a node by means of the argument
            <c>data</c> of the method <c>makeBranch</c>,
            you can ask CPLEX to notify your application when the node is deleted.
            To do so, you must implement the
            <c>NodeData</c> interface for the node data
            objects passed to CPLEX.  CPLEX will then call the method
            <c>delete</c> for this object. </p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.MIPCallback.NodeData.Delete" -->
        <!-- Badly formed XML comment ignored for member "T:ILOG.CPLEX.Cplex.SolutionSource" -->
        <member name="F:ILOG.CPLEX.Cplex.SolutionSource.NodeSolution">
             <summary>
             <p>The integral solution was found as the solution to an
             LP-relaxation of a node in the search tree.</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.SolutionSource.HeuristicSolution">
             <summary>
             <p>The integral solution was found by a CPLEX internal heuristic.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ILOG.CPLEX.Cplex.SolutionSource.UserSolution" -->
        <member name="T:ILOG.CPLEX.Cplex.IncumbentCallback">
              <summary>
              Class of callbacks called when a new incumbent is found.
              </summary>
             <remarks>  <p>This is an advanced class.</p>
              <p><b>Important:</b></p>
              <p>
              Advanced classes typically demand a profound understanding
              of the algorithms used by CPLEX. Thus they incur a higher risk of
              incorrect behavior in your application, behavior that can be difficult
              to debug. Therefore, the team encourages you to consider carefully whether
              you can accomplish the same task by means of other classes instead.
              </p>
              <p>An instance of
              this callback class is called whenever a new potential incumbent is found
              during the branch-and-cut search. It allows you to analyze the proposed
              incumbent and optionally reject it. In this case, CPLEX
              will continue the branch-and-cut search.  However, since CPLEX considers
              the current node solution to be integer feasible, it will not be able to
              determine a reasonable way to branch.  Thus, when this callback is
              implemented in such a way that it may reject an incumbent, it is
              typically paired with a branch callback to perform the branching after an
              incumbent has been rejected. </p>
            
             <p>When you use this callback to reject an incumbent, the callback
             implicitly enforces a lazy constraint. Therefore, the parameter to
             control type of primal and dual reductions,
             <c>Cplex.IntParam.Reduce</c>
             must be set either to 1 (one) in order to restrict presolve to
             primal reductions only, or to 0 (zero) in order to disable all
             presolve reductions.  This setting of the reduction parameter is not
             necessary if the incumbent callback is used for other purposes that
             do not implicitly add lazy constraints to the model. </p>
            
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.#ctor">
             <summary>
             Constructor for user-written incumbent callback.
             </summary>
            <remarks>  <p>
             This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>Cplex.IncumbentCallback</c> objects directly.
             </p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.IncumbentCallback.GetSolutionSource" -->
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetObjValue">
             <summary>
             Returns the objective value of the potential incumbent.
             </summary>
            <returns>The objective value of the potential incumbent.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetValue(ILOG.Concert.INumVar)">
             <summary>
             Returns the value of the variable <c>var</c> in the potential
             incumbent solution.
             </summary>
            <param name="var">The variable whose value is to be returned.
             </param>
             <returns>The value of <c>var</c> in the potential incumbent
                     solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetValues(ILOG.Concert.INumVar[])">
             <summary>
             Returns the values of variables in the array <c>var</c>
             in the potential incumbent solution.
             </summary>
            <param name="var">The array of variables whose values are required.
             </param>
             <returns>An array containing the values of the proposed incumbent
                        for the variables in the array <c>var</c>.  If the
                        the returned array is <c>val</c>, <c>val[j]</c>
                        is the proposed incumbent value for the variable
                        <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Returns the values of <c>num</c> consecutive variables,
             starting from the index specified by <c>start</c>, in the array
             <c>var</c> of variables in the potential incumbent solution.
             </summary>
            <param name="var">The array containing the variables whose proposed
                          incumbent values are being queried.
             </param>
             <param name="start">The index of the first variable in
                          the array <c>var</c>
                          for which the proposed incumbent value is requested.
             </param>
             <param name="num">The number of consecutive variables in
                          the array <c>var</c>
                          for which the proposed incumbent value is requested.
             </param>
             <returns>An array containing the values of the proposed incumbent
                          for the specified variables in the array <c>var</c>.
                          If the returned array is <c>val</c>,
                          <c>val[j]</c> is the proposed incumbent value for
                          variable <c>var[j+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetValue(ILOG.Concert.INumExpr)">
             <summary>
             Returns the value <c>expr</c> takes for the
             proposed incumbent solution.
             </summary>
            <param name="expr">The expression for which to evaluate the proposed
                             incumbent solution.
             </param>
             <returns>The value <c>expr</c> takes for the solution
                             of the proposed incumbent solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetSlack(ILOG.Concert.IRange)">
             <summary>
             Returns the slack value of a constraint for the proposed incumbent
             solution.
             </summary>
            <param name="rng">The constraint whose slack value is being queried.
             </param>
             <returns>The slack value of constraint <c>rng</c> for the
                        proposed incumbent solution.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetSlacks(ILOG.Concert.IRange[])">
             <summary>
             Returns the slack values for an array of constraints for the proposed
             incumbent solution.
             </summary>
            <param name="rng">An array of constraints whose slack values
                             are being queried.
             </param>
             <returns>An array of double values containing the slack
                             values for the proposed incumbent solution for the
                             specified constraints.  If the returned array is called
                             <c>s</c>, <c>s[i]</c> contains the
                             slack value for constraint <c>rng[i]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetSlacks(ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             Returns the slack values for <c>num</c> consecutive
             constraints, starting from the index specified by <c>start</c>,
             in the array <c>rng</c>
             for the proposed incumbent solution.
             </summary>
            <param name="rng">An array containing the constraints whose
                             slack values are being queried.
             </param>
             <param name="start">The index of the first constraint in <c>rng</c>
                             for which to query the slack values.
             </param>
             <param name="num">The number of consecutive constraints
                             in <c>rng</c> for which
                             to query the slack values.
             </param>
             <returns>An array of double values containing the slack
                             values for the proposed incumbent solution for the
                             specified constraints.  If the returned array is called
                             <c>s</c>, <c>s[i]</c> contains the
                             slack value for constraint <c>rng[i+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetNodeId">
            <summary>
            Returns the node identifier of the current node.
            </summary>
            <returns>the node identifier of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.GetNodeData">
              <summary>
              Returns the user object attached to the current node.
              </summary>
             <remarks> User objects can
              be attached to a node when the node is created with the method
              <c>Cplex.BranchCallback.MakeBranch</c> in a branch callback.
            
              </remarks>
              <returns>The user object attached to the current node.  If no user
                      object is attached to the current node, <c>null</c> will
                      be returned.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.SetNodeData(System.Object)">
             <summary>
             Sets the user object attached to the current node.
             </summary>
            <param name="data">The user object to be attached to the current node.
             </param>
             <returns>The user object that was previously attached to the current
                     node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.IncumbentCallback.Reject">
            <summary>
            Rejects the proposed incumbent solution.
            </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.IncumbentCallback.Source">
               <summary>
               Gets an indicator about where the potential incument was found.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.IncumbentCallback.ObjValue">
               <summary>
               Gets the objective value of the potential incumbent.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.IncumbentCallback.NodeData">
               <summary>
               Accesses the user object attached to the current node.  User objects
               can be attached to a node when the node is created with the method
               <c>Cplex.BranchCallback.MakeBranch</c> in a branch callback.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.SolveCallback">
              <summary>
              The base class for user-written solve callbacks to control how
              subproblems (for example, node and heuristic subproblems)
              are solved within branch and cut.
              </summary>
             <remarks>  <p>An instance of this class can be used to solve subproblems during a
              branch-and-cut search. It allows you to set a starting point when a node
              is being solved
              or to select the solution algorithm on a per-node basis.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ControlCallback">
              <summary>
              Base class for all callback classes querying or taking control of
              the MIP branch-and-cut search.
              </summary>
             <remarks> <p>This is an advanced class.</p>
             <p><b>Important:</b></p>
             <p>
             Advanced classes typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other classes instead.
             </p>
              <p>This is the base class for all callback classes
              that allow you to query or take control of the MIP branch-and-cut
              search.  These classes are: </p>
              <ul>
              <li>Cplex.BranchCallback</li>
              <li>Cplex.CutCallback</li>
              <li>Cplex.HeuristicCallback</li>
              </ul>
              <p>An instance of <c>ControlCallback</c> is not a callback
              for implementing user
              functionality itself, but rather provides the common interface for those
              listed callback classes. Those callbacks share the property that
              they are called at every node in the branch-and-cut search tree, and
              allow you to access node-related data. For each branch-and-cut node,
              those callbacks are called in the following order:</p>
              <ol>
              <li>      <c>Cplex.CutCallback</c>: Once the node problem has
                        been solved and <c>Cplex</c> has added all its cuts,
                        the user cut callback is called. In case new cuts are added
                        to the problem, the node problem is solved again.  This is
                        iterated until no more cuts are added to the problem.</li>
              <li>      <c>Cplex.HeuristicCallback</c>: Once the node has
                        been fully solved (that is including all the cuts that may have
                        been added), the heuristic callback is called in an attempt
                        to generate an integer feasible solution from the current
                        relaxation solution at that node.</li>
              <li>      <c>Cplex.BranchCallback</c>: Finally, if the relaxation
                        solution at the current node is either integer infeasible or
                        rejected by the <c>Cplex.IncumbentCallback</c>, the
                        problem is split into subproblems. At that point the
                        <c>Cplex.BranchCallback</c> can
                        be used to control how to create the subproblems.</li>
              </ol>
              <p>
              The methods of this class are protected to make sure that they are
              used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              <strong>Unbounded ray</strong>
            
             <p>In the case where the node LP is unbounded, the methods
             <c>getValue</c> return a vector that corresponds to an
             unbounded direction. The vector is scaled in such a way that the
             maximum absolute value of one of its elements is
             <c>CPX_INFBOUND</c>.  Thus, often the vector
             can be used directly, for example to separate lazy constraints.  However,
             due to the large values, care must be taken to deal with potential
             numerical errors.  If in doubt, rescale the vector, and use it as an
             unbounded ray rather than as a primal vector.</p>
            
            
              
              
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.HeuristicCallback"/><see cref="T:ILOG.CPLEX.Cplex.CutCallback"/><see cref="T:ILOG.CPLEX.Cplex.BranchCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/><see cref="T:ILOG.CPLEX.Cplex.Callback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetLB(ILOG.Concert.INumVar)">
              <summary>
              Returns the current lower bound for the variable <c>var</c>.
              </summary>
             <remarks>  This bound
              may be different from the bound the variable has in the active model,
              since branching or bound strengthening may have been applied to it.
              The corresponding solution value from <c>getValue</c> may
              violate this bound at a node where a new incumbent has been found
              because the bound is tightened when an incumbent is found.
            
              
             </remarks>
             <param name="var">The variable whose current lower bound is being queried.
              </param>
              <returns>The lower bound for the variable <c>var</c> at the
                          current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetLBs(ILOG.Concert.INumVar[])">
              <summary>
              Returns the current lower bounds for an array of variables.
              </summary>
             <remarks> The bounds
              may be different from the bounds the variables have in the active model,
              since branching or bound strengthening may have been applied to them.
              The corresponding solution values from <c>getValues</c> may
              violate these bounds at a node where a new incumbent has been found
              because the bounds are tightened when an incumbent is found.
            
              
             </remarks>
             <param name="var">An array of variables whose current
                         lower bounds are being queried.
              </param>
              <returns>An array of double values containing the current lower
                         bounds for the specified variables.  If the returned
                         array is called <c>lb</c>, <c>lb[j]</c>
                         contains the
                         lower bound of variable <c>var[j]</c> at the
                         current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetLBs(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns the current lower bounds for a set of variables.
              </summary>
             <remarks> The bounds
              may be different from the bounds the variables have in the active model,
              since branching or bound strengthening may have been applied to them.
              The corresponding solution values from <c>getValues</c> may
              violate these bounds at a node where a new incumbent has been found
              because the bounds are tightened when an incumbent is found.
            
              
            
            
             </remarks>
             <param name="var">An array containing the variables whose
                           current lower bounds are being queried.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                           which to query the current lower bound.
              </param>
              <param name="num">The number of consecutive variables
                           in <c>var</c> for which
                           to query the current lower bounds.
              </param>
              <returns>An array of double values containing the current lower
                           bounds for the specified variables.  If the returned
                           array is called <c>lb</c>, <c>lb[j]</c>
                           contains the lower bound of
                           variable <c>var[j+start]</c> at the
                           current node, for <c>j = 0, ..., num-1</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetUB(ILOG.Concert.INumVar)">
              <summary>
              Returns the current upper bound for the variable <c>var</c>.
              </summary>
             <remarks>  This bound
              may be different from the bound the variable has in the active model,
              since branching or bound strengthening may have been applied to it.
              The corresponding solution value from <c>getValue</c> may
              violate this bound at a node where a new incumbent has been found
              because the bound is tightened when an incumbent is found.
            
              
             </remarks>
             <param name="var">The variable whose current upper bound is being queried.
              </param>
              <returns>The upper bound for the variable <c>var</c> at the
                          current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetUBs(ILOG.Concert.INumVar[])">
              <summary>
              Returns the current upper bounds for an array of variables.
              </summary>
             <remarks> The bounds
              may be different from the bounds the variables have in the active model,
              since branching or bound strengthening may have been applied to them.
              The corresponding solution values from <c>getValues</c> may
              violate these bounds at a node where a new incumbent has been found
              because the bounds are tightened when an incumbent is found.
            
              
             </remarks>
             <param name="var">An array of variables whose current
                         upper bounds are being queried.
              </param>
              <returns>An array of double values containing the current upper
                         bounds for the specified variables.  If the returned
                         array is called <c>ub</c>, <c>ub[j]</c>
                         contains the
                         upper bound of variable <c>var[j]</c> at the
                         current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetUBs(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Returns the current upper bounds for a set of variables.
              </summary>
             <remarks> The bounds
              may be different from the bounds the variables have in the active model,
              since branching or bound strengthening may have been applied to them.
              The corresponding solution values from <c>getValues</c> may
              violate these bounds at a node where a new incumbent has been found
              because the bounds are tightened when an incumbent is found.
            
              
            
            
             </remarks>
             <param name="var">An array containing the variables whose
                           current upper bounds are being queried.
              </param>
              <param name="start">The index of the first variable in <c>var</c> for
                           which to query the current upper bound.
              </param>
              <param name="num">The number of consecutive variables
                           in <c>var</c> for which
                           to query the current upper bounds.
              </param>
              <returns>An array of double values containing the current upper
                           bounds for the specified variables.  If the returned
                           array is called <c>ub</c>, <c>ub[j]</c>
                           contains the upper bound of
                           variable <c>var[j+start]</c> at the
                           current node, for <c>j = 0, ..., num-1</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetObjValue">
             <summary>
             Returns the objective function value of the solution of the continuous
             relaxation of the current node.
             </summary>
            <returns>The objective function value of the solution of the continuous
             relaxation of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetValue(ILOG.Concert.INumVar)">
             <summary>
             Returns the solution value of a variable at the current node.
             </summary>
            <param name="var">The variable whose current solution value is being
                         queried.
             </param>
             <returns>The solution value of variable <c>var</c> at
                         the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetValues(ILOG.Concert.INumVar[])">
             <summary>
             Returns the solution values for an array of variables at the
             current node.
             </summary>
            <param name="var">An array of variables whose current
                        solution values are being queried.
             </param>
             <returns>An array of double values containing the solution
                        values of the specified variables at the current node.
                        If the returned array is called <c>x</c>,
                        <c>x[j]</c> contains the current solution value
                        for the variable <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             Returns the solution values for a set of variables at the
             current node.
             </summary>
            <param name="var">An array containing the variables whose
                          current solution values are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the current solution values.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> for which to
                          query the current solution values.
             </param>
             <returns>An array of double values containing the solution
                          values of the specified variables at the current node.
                          If the returned array is called <c>x</c>,
                          <c>x[j]</c> contains the current solution value
                          for the variable <c>var[j+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetSlack(ILOG.Concert.IRange)">
             <summary>
             Returns the slack value of a constraint for the solution of the
             continuous relaxation of the current node.
             </summary>
            <param name="rng">The constraint whose current slack
                         value is being queried.
             </param>
             <returns>The slack value of constraint <c>rng</c> for
                         the solution of the continuous relaxation of the current
                         node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetSlacks(ILOG.Concert.IRange[])">
             <summary>
             Returns the slack values of an array of constraints for the solution
             of the current node.
             </summary>
            <param name="rng">An array of constraints whose current
                             slack values are being queried.
             </param>
             <returns>An array of double values containing the slack values of
                             the specified constraints for the solution of the
                             continuous relaxation of the current
                             node.  If the returned array is called <c>s</c>,
                             <c>s[i]</c> contains the current slack value
                             for constraint <c>rng[i]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetSlacks(ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             Returns the slack values of a set of constraints for the solution
             of the current node.
             </summary>
            <param name="rng">An array containing the constraints whose
                             current slack values are being queried.
             </param>
             <param name="start">The index of the first constraint in <c>rng</c>
                             for which to query the current slack values.
             </param>
             <param name="num">The number of consecutive constraints
                             in <c>rng</c> for which
                             to query the current slack values.
             </param>
             <returns>An array of double values containing the slack values of
                             the specified constraints for the solution of the
                             continuous relaxation of the current
                             node. If the returned array is called <c>s</c>,
                             <c>s[i]</c> contains the current slack value
                             for constraint <c>rng[i+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetValue(ILOG.Concert.INumExpr)">
             <summary>
             Returns the value <c>expr</c> takes for the solution of the
             continuous relaxation of the current node.
             </summary>
            <param name="expr">The expression for which to evaluate the current solution.
             </param>
             <returns>The value <c>expr</c> takes for the solution of the
                         continuous relaxation of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetDownPseudoCost(ILOG.Concert.INumVar)">
             <summary>
             Returns the pseudo cost for branching down on variable <c>var</c>.
             </summary>
            <param name="var">The variable whose down pseudo cost is being queried.
             </param>
             <returns>The pseudo cost for branching down on variable
                        <c>var</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetUpPseudoCost(ILOG.Concert.INumVar)">
             <summary>
             Returns the pseudo cost for branching up on variable <c>var</c>.
             </summary>
            <param name="var">The variable whose up pseudo cost is being queried.
             </param>
             <returns>The pseudo cost for branching up on variable
                        <c>var</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetFeasibility(ILOG.Concert.INumVar)">
              <summary>
              States whether the variable <c>var</c> is integer feasible,
              integer infeasible, or implied integer feasible in the current node
              solution.
              </summary>
             <remarks>
              <p>Before you query the feasibility of a solution from an
              instance of <c>SolveCallback</c>,
              a solution must exist. That is,
              you must first create the solution by calling the CPLEX
              optimization method <c>solve</c>, and then you
              must verify that the method <c>solve</c>
              generated a solution by checking its return value
              <strong>before</strong> you invoke the method
              <c>getFeasibility</c>.</p>
            
            
              
             </remarks>
             <param name="var">The variable whose integer feasibility status is
                         being queried.
              </param>
              <returns>The integer feasibility status.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ControlCallback.GetFeasibilities(ILOG.Concert.INumVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.ControlCallback.GetFeasibilities(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetSOSFeasibility(ILOG.Concert.ISOS1)">
              <summary>
              States whether the special ordered set of type 1 is integer feasible,
              integer infeasible, or implied integer feasible in the current node
              solution.
              </summary>
             <remarks>
              <p>Before you query the feasibility of a solution from an
              instance of <c>SolveCallback</c>,
              a solution must exist. That is,
              you must first create the solution by calling the CPLEX
              optimization method <c>solve</c>, and then you
              must verify that the method <c>solve</c>
              generated a solution by checking its return value
              <strong>before</strong> you invoke the method
              <c>getSOSFeasibility</c>.</p>
            
            
              
             </remarks>
             <param name="sos">The SOS1 for which the integer feasibility status is
                         queried.
              </param>
              <returns>The integer feasibility status for <c>sos</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetSOSFeasibility(ILOG.Concert.ISOS2)">
              <summary>
              States whether the special ordered set of type 2 is integer feasible,
              integer infeasible, or implied integer feasible in the current node
              solution.
              </summary>
             <remarks>
              <p>Before you query the feasibility of a solution from an
              instance of <c>SolveCallback</c>,
              a solution must exist. That is,
              you must first create the solution by calling the CPLEX
              optimization method <c>solve</c>, and then you
              must verify that the method <c>solve</c>
              generated a solution by checking its return value
              <strong>before</strong> you invoke the method
              <c>getSOSFeasibility</c>.</p>
            
            
              
             </remarks>
             <param name="sos">The SOS2 for which the integer feasibility status is
                         queried.
              </param>
              <returns>The integer feasibility status for <c>sos</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.GetNodeData">
              <summary>
              Returns the user object attached to the current node.
              </summary>
             <remarks> User objects can
              be attached to a node when the node is created with the method
              <c>Cplex.BranchCallback.MakeBranch</c> in a branch callback.
            
              </remarks>
              <returns>The user object attached to the current node.  If no user
                      object is attached to the current node, <c>null</c> will
                      be returned.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ControlCallback.SetNodeData(System.Object)">
             <summary>
             Sets the user object attached to the current node.
             </summary>
            <param name="data">The user object to be attached to the current node.
             </param>
             <returns>The user object that was previously attached to the current
                     node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ControlCallback.ObjValue">
               <summary>
               Gets the objective function value of the solution of the continuous
               relaxation of the current node.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ControlCallback.NodeData">
               <summary>
               Accesses the user object attached to the current node.  User objects can
               be attached to a node when the node is created with the method
               <c>Cplex.BranchCallback.MakeBranch</c> in a branch callback.
               </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.#ctor">
             <summary>
             Constructor for user-written solve callback.
             </summary>
            <remarks>  This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>Cplex.SolveCallback</c> objects directly.</remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.Solve(System.Int32)">
              <summary>
              Solves the current node using the algorithm <c>alg</c>.
              </summary>
             <remarks>  <p>
              See
              
               Cplex.Algorithm 
              for a choice of algorithms to use.
              </p>
            
              
             </remarks>
             <param name="alg">The <c>Cplex.Algorithm</c> to use to solve the
                         current node.
              </param>
              <returns>A Boolean value reporting whether a feasible solution
                         has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.Solve">
             <summary>
             Solves the current node using the default algorithm
             (<c>Cplex.Algorithm.Auto</c>).
             </summary>
            <returns>A Boolean value reporting whether a feasible solution
                        has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.GetStatus">
            <summary>
            Returns the solution status of the last <c>solve</c> call.
            </summary>
            <returns>The solution status of the last <c>solve</c> call.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.GetCplexStatus">
            <summary>
            Returns the <c>Cplex.CplexStatus</c> of the last
            <c>solve</c> call.
            </summary>
            <returns>The <c>Cplex.CplexStatus</c> of the last
                    <c>solve</c> call.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.IsDualFeasible">
            <summary>
            Returns <c>true</c> if a dual feasible solution is available for
             the current node.
             </summary>
            <remarks><p>If <c>false</c> is returned, the solution may
             still be dual feasible, but the algorithm has not determined the
             feasibility before it terminated. </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.IsPrimalFeasible">
             <summary>
             Returns <c>true</c> if a primal feasible solution is
             available for the current node.
             </summary>
            <remarks>  <p>If <c>false</c> is returned, the solution may
             still be primal feasible, but the algorithm did not determine the
             feasibility before it terminated.
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.UseSolution">
             <summary>
             Instructs <c>Cplex</c> to use a solution.
             </summary>
            <remarks>  <p>This method instructs <c>Cplex</c>
             to use the solution generated with
             this callback instead of solving the node itself.</p>
             <p>
             If <c>useSolution</c> is not called, <c>Cplex</c>
             uses the algorithm selected with the parameter
             <c>Cplex.IntParam.RootAlg</c> or
             <c>Cplex.IntParam.NodeAlg</c> to solve the node.</p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SolveCallback.SetVectors(System.Double[],ILOG.Concert.INumVar[],System.Double[],ILOG.Concert.IRange[])" -->
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.SetVectors(System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
            
             <remarks>@proof-read
             @deprecated: As of release 12.5, replaced by {@link #setStart()}.
              Specifies a starting point for the next invocation of the method
              <c>solve</c>.
              <p>Starting point information is exploited at the next call of
              <c>solve</c>.  In particular, if the node is being solved with
              the simplex optimizer, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex optimizer.</p>
              <p>
              The starting point information is provided in the arguments of this
              method.  NULL can be passed for any of
              the arguments.  However, if <c>x</c> is not
              NULL, <c>var</c> must not be NULL.
              Similarly, if <c>pi</c> is not
              NULL, <c>rng</c> must not be NULL.</p>
            
              <p>
              <c>x[j]</c> specifies the starting primal value for the variable
              <c>var[j]</c>.
              Similarly, <c>pi[i]</c> specifies the starting dual value for
              <c>rng[i]</c>.</p>
              <p>
              When values are not specified for all integer and continuous
              variables, CPLEX tries to extend this partial solution to a
              complete solution by solving a MIP over the variables whose
              values have <b>not</b> been specified by any previous calls to
              <c>setVectors</c>.  The parameter <c>SubMIPNodeLim</c>
              controls the amount of effort CPLEX  expends in
              trying to solve this secondary MIP.  If CPLEX finds a
             complete feasible solution, that solution becomes the incumbent.  If the
             specified values are infeasible, they are retained for use in a
             subsequent solution repair heuristic.  The amount of effort
             spent in this heuristic
             can be controlled by the parameter <c>RepairTries</c>.
             </p>
            
              
            
            
            
            
            
            
             </remarks>
             <param name="x">An array containing the primal starting values for the
                            variables specified in <c>var</c>.
              </param>
              <param name="var">An array containing the variables for which to specify
                            primal starting values.
              </param>
              <param name="xstart">The first element in <c>x</c> and <c>var</c>
                            to be used.
              </param>
              <param name="xnum">The number of consecutive elements in <c>x</c> and
                            <c>var</c> to be used.
              </param>
              <param name="pi">An array containing the dual starting values for the
                            constraints specified in <c>rng</c>.
              </param>
              <param name="rng">An array containing the constraints for which to specify
                            dual starting values.
              </param>
              <param name="cstart">The first element in <c>pi</c> and <c>rng</c>
                            to be used.
              </param>
              <param name="cnum">The number of consecutive elements in <c>pi</c> and
                            <c>rng</c> to be used.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.SetStart(System.Double[],ILOG.Concert.INumVar[],System.Double[],ILOG.Concert.IRange[])">
            
             <remarks>@proof-read
            
              Specifies a starting point for the next invocation of the method
              <c>solve</c> during the current SolveCallback.
              <p>Starting point information is exploited at the next call
              of the method <c>solve</c> before the termination of the
              SolveCallback.Main() function being currently executed.
              In particular, if the node is being solved with
              the simplex optimizer, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex optimizer.</p>
              <p>
              The starting point information is provided in the arguments of this
              method.  NULL can be passed for any of
              the arguments.  However, if <c>x</c> is not
              NULL, <c>var</c> must not be NULL.
              Similarly, if <c>pi</c> is not
              NULL, <c>rng</c> must not be NULL.</p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SolveCallback.SetStart(System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32,System.Double[],ILOG.Concert.IRange[],System.Int32,System.Int32)">
            
             <remarks>@proof-read
              Specifies a starting point for the next invocation of the method
              <c>solve</c> during the current SolveCallback.
              <p>Starting point information is exploited at the next call
              of the method <c>solve</c> before the termination of the
              SolveCallback.Main() function being currently executed.
              In particular, if the node is being solved with
              the simplex optimizer, the starting point information
              provided with this method is used to construct a starting basis for
              the simplex optimizer.</p>
              <p>
              The starting point information is provided in the arguments of this
              method.  NULL can be passed for any of
              the arguments.  However, if <c>x</c> is not
              NULL, <c>var</c> must not be NULL.
              Similarly, if <c>pi</c> is not
              NULL, <c>rng</c> must not be NULL.</p>
            
              
            
            
            
            
            
            
             </remarks>
             <param name="x">An array containing the primal starting values for the
                            variables specified in <c>var</c>.
              </param>
              <param name="var">An array containing the variables for which to specify
                            primal starting values.
              </param>
              <param name="xstart">The first element in <c>x</c> and <c>var</c>
                            to be used.
              </param>
              <param name="xnum">The number of consecutive elements in <c>x</c> and
                            <c>var</c> to be used.
              </param>
              <param name="pi">An array containing the dual starting values for the
                            constraints specified in <c>rng</c>.
              </param>
              <param name="rng">An array containing the constraints for which to specify
                            dual starting values.
              </param>
              <param name="cstart">The first element in <c>pi</c> and <c>rng</c>
                            to be used.
              </param>
              <param name="cnum">The number of consecutive elements in <c>pi</c> and
                            <c>rng</c> to be used.</param>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.IntegerFeasibilityStatus">
             <summary>
             Objects of this class report the integer feasibility status of
             a variable.
             </summary>
            <remarks>  <p>
             This class represents an integer feasibility status reporting whether
             <c>Cplex</c> considers a variable to be integer feasible or not
             with respect to the solution of a node relaxation.
             </p>
             </remarks>
             <see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.IntegerFeasibilityStatus.Feasible">
             <summary>
             States that a variable or SOS is considered to be
             integer feasible in the current node solution.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.IntegerFeasibilityStatus.Implied">
             <summary>
             States that a variable has been taken out by presolve, but will
             be integer feasible when all the remaining integer variables are
             integer feasible.
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.IntegerFeasibilityStatus.Infeasible">
             <summary>
             States that a variable or SOS is considered to be integer
             infeasible in the current node solution.
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CutManagement">
             <summary>
             Enumeration of possible values to specify where a 
             lazy constraint o cut callback is called from.
             </summary>
            <remarks>
             <p>
             These values can be used in the method
             <c>UserCutCallback.Add</c> or in the method
             <c>LazyConstraintCallback.Add</c>.
             </p></remarks>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutManagement.UseCutForce">
                <summary>
                The cut is added to the relaxation and remains there.
                </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutManagement.UseCutPurge">
                <summary>
                The cut is added to the relaxation, but can be purged later if
                CPLEX determines that the cut is ineffective.
                </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.CutManagement.UseCutFilter">
                <summary>
                The cut is treated exactly as cuts generated by CPLEX.
                </summary>
            <remarks>     <p>
                In other words, the cut is filtered through the CPLEX process;
                it may not even be added to the relaxation;
                for example, if other cuts are deemed more
                effective, or if the cut is too dense,
                or for other similar reasons.
                </p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CutCallback">
            
             <remarks>
             @deprecated Use LazyConstraintCallback or UserCutCallback instead.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.LazyConstraintCallback">
              <summary>
              Callback class for lazy constraints.
              </summary>
             <remarks>  <p>This is an advanced class.</p>
              <p><b>Important:</b></p>
              <p>
              Advanced classes typically demand a profound understanding
              of the algorithms used by CPLEX. Thus they incur a higher risk of
              incorrect behavior in your application, behavior that can be difficult
              to debug. Therefore, the team encourages you to consider carefully whether
              you can accomplish the same task by means of other classes instead.
              </p>
              <p>This is the lazy constraint callback class.
              Extensions of this class implement user-written lazy constraint
              callbacks.  These allow you to add lazy constraints to the problem while
              the problem is being solved with branch-and-cut search.  These lazy
              constraints may contribute to the model formulation and restrict the
              feasible region of the problem.  By contrast, if a constraint to be added
              during branch-and-cut search does not change the feasible region of the
              active model but only strengthens the formulation, it is referred to
              as a <em>user cut</em>.  Such constraints should better be added through
              <c>Cplex.UserCutCallback</c> because this distinction allows
              <c>Cplex</c> potentially
              to perform more presolve reductions.  It is an error,
              however, to add lazy constraints by means of a user cut callback.</p>
              <p>
              The idea behind lazy constraints is that the LPs that are solved when
              the MIP is being solved can be kept smaller when these constraints are not
              included.  <c>Cplex</c> will, however, include a lazy constraint
              in the LP as soon as it becomes violated. In other words, the solution
              computed by <c>Cplex</c> makes sure
              that all the lazy constraints that have been added are satisfied.</p>
              <p>
              If you use <c>LazyConstraintCallback</c>, you are free to add
              cuts that may chop off solutions that are otherwise feasible with
              respect to the model, in contrast to <c>UserCutCallback</c>.
              In the case of <c>UserCutCallback</c>, you effectively promise
              CPLEX that you are not adding cuts that reduce the solution space by
              the callback.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.UserCutCallback"/><see cref="T:ILOG.CPLEX.Cplex.CutCallback"/><see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.LazyConstraintCallback.Add(ILOG.Concert.IRange)">
              <summary>
              Adds <c>cut</c> as a global lazy constraint to the 
              problem being solved.
              </summary>
             <remarks>As a lazy constraint, 
              this cut must be globally valid. It will not be removed by backtracking
              or any other means during the search.
            
              
             </remarks>
             <param name="cut">The constraint to be added as a global lazy constraint.
                              The constraint must be linear.
              </param>
              <returns>The lazy constraint that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.LazyConstraintCallback.Add(ILOG.Concert.IRange,System.Int32)">
              <summary>
              Adds <c>cut</c> as a global lazy constraint to the problem being solved.
              </summary>
             <remarks>
              <p>As a lazy constraint, this cut must be globally valid.
              It will not be removed by backtracking
              or any other means during the search.
              </p>
            
              
            
             </remarks>
             <param name="cut">The constraint to be added as a global lazy constraint.
                              The constraint must be linear.
              </param>
              <param name="cutmanagement">An integer indicating how the 
                              lazy constraint should be
                              managed by CPLEX.  Possible values are listed in
                              <c>Cplex.CutManagement.</c>
              </param>
              <returns>The lazy constraint that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.LazyConstraintCallback.Add(ILOG.Concert.IRange,System.Boolean)">
            
             <remarks>
             @deprecated Use an appropriate value of CutManagement instead.
            
              Adds <c>cut</c> as a global user cut to the problem being solved.
              <p>
              This cut must be globally valid. The cut must also not cut off
              any solution.  The cut will not be removed by backtracking. If
              you designate the cut as purgeable, then CPLEX may remove the cut
              under certain conditions. </p>
            
            
              
            
             </remarks>
             <param name="cut">The constraint to be added as a global cut.
                              The constraint must be linear.
              </param>
              <param name="purgeable">A value specifying whether the cut can be
                                purged by CPLEX during branch and cut.
              </param>
              <returns>The cut that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.LazyConstraintCallback.AddLocal(ILOG.Concert.IRange)">
              <summary>
              Adds <c>cut</c> as a local lazy constraint to the problem being solved.
              </summary>
             <remarks>  <p>
              This lazy constraint will not be removed when the search backtracks.  In
              other words, it is active only for the subtree rooted at the invoking
              node.
              </p>
            
              
             </remarks>
             <param name="cut">The constraint to be added as a local lazy constraint.
                              The constraint must be linear.
              </param>
              <returns>The lazy constraint that has been added.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.LazyConstraintCallback.IsUnboundedNode" -->
        <member name="M:ILOG.CPLEX.Cplex.LazyConstraintCallback.#ctor">
             <summary>
             This is the constructor for user-written lazy constraint callbacks.
             </summary>
            <remarks>  <p>
             This constructor can be called only to construct objects of derived
             user-written callback classes; it cannot be called to construct
             <c>Cplex.LazyConstraintCallback</c> objects directly.
             </p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.UserCutCallback">
             <summary>
             This is the callback class to use to add user-written
             cuts during the branch-and-cut search.
             </summary>
             <remarks>
             <p>This is an advanced class.</p>
             <p><b>Important:</b></p>
             <p>
             Advanced classes typically demand a profound understanding
             of the algorithms used by CPLEX. Thus they incur a higher risk of
             incorrect behavior in your application, behavior that can be difficult
             to debug. Therefore, the team encourages you to consider carefully whether
             you can accomplish the same task by means of other classes instead.
             </p>
              <p>This is the user cut callback class.
              Extensions of this class implement user-written user cut
              callbacks.  They allow you to add user cuts to the problem while
              the problem is being solved with branch-and-cut search.  User cuts
              may not contribute to the model formulation; user cuts must
              not restrict the feasible
              region of the problem, but only strengthen the formulation.  If
              constraints that do restrict the feasible region of the problem
              are to be added during the optimization, an instance of
              <c>Cplex.LazyConstraintCallback</c> must be used instead.
              Cuts are added from this callback by a call to the
              method <c>add</c>.
              The added cuts must be globally valid because they are not removed
              automatically during backtracking.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
              <p>When you use <c>UserCutCallback</c>, you effectively promise
              CPLEX that you are not adding cuts that reduce the solution space by
              the callback, in contrast to <c>LazyConstraintCallback</c>.
              By using <c>UserCutCallback</c>, you allow CPLEX to pursue
              presolve more aggressively.
              In the case of <c>LazyConstraintCallback</c>, you are free
              to add cuts that may chop off solutions that are otherwise feasible
              with respect to the the model.</p>
            
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.CutCallback"/><see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.Add(ILOG.Concert.IRange)">
              <summary>
              Adds <c>cut</c> as a global user cut to the problem being solved.
              </summary>
             <remarks>  <p>
              This cut must be globally valid. It will not be removed by backtracking
              or any other means during the search.  The cut must also not cut off
              any solution. </p>
            
              
             </remarks>
             <param name="cut">The constraint to be added as a global cut.
                              The constraint must be linear.
              </param>
              <returns>The cut that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.Add(ILOG.Concert.IRange,System.Int32)">
              <summary>
              Adds <c>cut</c> as a global user cut to the problem being solved.
              </summary>
             <remarks>  <p>
              This cut must be globally valid. The cut must also not cut off
              any solution.  The cut will not be removed by backtracking. If
              you designate the cut as purgeable, then CPLEX may remove the cut
              under certain conditions. </p>
            
            
              
            
             </remarks>
             <param name="cut">The constraint to be added as a global cut.
                              The constraint must be linear.
              </param>
              <param name="cutmanagement">An integer indicating how the cut should be
                              managed by CPLEX.  Possible values are listed in
                              Cplex.CutManagement.
              </param>
              <returns>The cut that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.Add(ILOG.Concert.IRange,System.Boolean)">
            
             <remarks>
             @deprecated Use CutManagement instead.
            
              Adds <c>cut</c> as a global user cut to the problem being solved.
              <p>
              This cut must be globally valid. The cut must also not cut off
              any solution.  The cut will not be removed by backtracking. If
              you designate the cut as purgeable, then CPLEX may remove the cut
              under certain conditions. </p>
            
            
              
            
             </remarks>
             <param name="cut">The constraint to be added as a global cut.
                              The constraint must be linear.
              </param>
              <param name="purgeable">A value specifying whether the cut can be
                                purged by CPLEX during branch and cut.
              </param>
              <returns>The cut that has been added.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.AddLocal(ILOG.Concert.IRange)">
              <summary>
              Adds its argument as a local cut to the problem being solved.
              </summary>
             <remarks>  <p>
              This cut will not be removed when the search backtracks.  In
              other words, it is active only for the subtree rooted at the invoking
              node.
              </p>
            
              
             </remarks>
             <param name="cut">The constraint to be added as a local cut.
                              The constraint must be linear.
              </param>
              <returns>The cut that has been added.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.UserCutCallback.IsAfterCutLoop" -->
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.AbortCutLoop">
            <summary>
            <p>Exit the cut loop and move on to branching.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UserCutCallback.#ctor">
             <summary>
             This is the constructor for user-written user cut callbacks.
             </summary>
            <remarks>  <p>
             This constructor can be called only to construct objects of derived
             user-written callback classes; it cannot be called to construct
             <c>Cplex.UserCutCallback</c> objects directly.
             </p></remarks>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ProbingInfoCallback">
              <summary>
              Monitors probing progress for user-written callbacks in
              a mixed integer program (MIP).
              </summary>
             <remarks>
              <p>User-written callbacks of this class are compatible
              with dynamic search.</p>
            
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              <p>The user-written callback of this class is called by only
              one thread, even in the case of parallel execution. Consequently,
              it is <strong>not</strong> necessary for the user-written
              callback to manage synchronization.</p>
            
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingInfoCallback.#ctor">
             <summary>
             <p>Constructor for user-written probing callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>ProbingInfoCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingInfoCallback.GetPhase">
             <summary>
             <p>Returns the current phase of probing.</p>
             </summary>
            <returns>The current probing phase.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingInfoCallback.GetProgress">
              <summary>
              <p>Returns the fraction of completion of the current probing phase.</p>
            
              <p>This value is between 0.0 and 1.0.</p>
              </summary>
             <returns>The fraction of the completion of the current probing phase.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ProbingInfoCallback.Phase">
               <summary>
               Gets the current phase of probing.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ProbingInfoCallback.Progress">
               <summary>
               Gets the fraction of completion of the probing phase.  This value is
               between 0.0 and 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.ProbingCallback">
              <summary>
              Base class for user-written control and query callbacks
              that control probing progress.
              </summary>
             <remarks>  <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ProbingInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingCallback.#ctor">
             <summary>
             <p>Constructor for user-written probing callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>ProbingCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingCallback.GetPhase">
             <summary>
             <p>Returns the current phase of probing.</p>
             </summary>
            <returns>The current probing phase.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.ProbingCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of the current probing phase.</p>
            
             <p>This value is between 0.0 and 1.0.</p>
             </summary>
             <returns>The fraction of the completion of the current probing phase.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ProbingCallback.Phase">
               <summary>
               Gets the current phase of probing.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.ProbingCallback.Progress">
               <summary>
               Gets the fraction of completion of the probing phase.  This value is
               between 0.0 and 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FractionalCutInfoCallback">
              <summary>
              Monitors the progress
              of the generation of fractional cuts when a mixed integer
              programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of this class represents a user-written callback in an
              application that uses an instance of
              
               <c>Cplex</c>  
              to solve a
              mixed integer programming problem (a MIP).  It allows you to
              monitor the progress of the generation of fractional cuts.</p>
            
              <p>User-written callbacks of this class are compatible
              with dynamic search.</p>
            
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              <p>The user-written callback of this class is called by only
              one thread, even in the case of parallel execution. Consequently,
              it is <strong>not</strong> necessary for the user-written
              callback to manage synchronization.</p>
            
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FractionalCutInfoCallback.#ctor">
             <summary>
             <p>Constructor for user-written fractional cut callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>FractionalCutInfoCallback</c> objects directly.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.FractionalCutInfoCallback.GetProgress" -->
        <member name="P:ILOG.CPLEX.Cplex.FractionalCutInfoCallback.Progress">
               <summary>
               Gets the fraction of completion of the fractional cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FractionalCutCallback">
              <summary>
              This is the callback class to use to control or query the progress
              of the generation of fractional cuts when a mixed integer
              programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of this class represents a user-written control
              or query callback in an application that uses an instance of
              
               <c>Cplex</c>  
              to solve a
              mixed integer programming problem (a MIP).  It allows you to
              control the progress of the generation of fractional cuts.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to implement
              the <c>main</c> method in it.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.FractionalCutInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FractionalCutCallback.#ctor">
             <summary>
             <p>Constructor for user-written fractional cut callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>FractionalCutCallback</c> objects directly.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.FractionalCutCallback.GetProgress" -->
        <member name="P:ILOG.CPLEX.Cplex.FractionalCutCallback.Progress">
               <summary>
               Gets the fraction of completion of the fractional cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FlowMIRCutInfoCallback">
              <summary>
              Monitors the progress
              of the generation of flow cover and mixed integer rounding (MIR)
              cuts when a mixed integer programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of the class <c>FlowMIRCutInfoCallback</c>
              represents a
              user-written callback in an application that uses an instance of
              
               <c>Cplex</c>  
              to solve a mixed integer programming problem (a
              MIP). This class offers a method to monitor the progress of the
              generation of flow cover and mixed integer rounding (MIR) cuts.</p>
            
             <p>User-written callbacks of this class are compatible
             with dynamic search.</p>
            
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.
              This is the callback class to use when
              
               <c>Cplex</c>  
              is solving a MIP.</p>
            
              <p>The user-written callback of this class is called by only
              one thread, even in the case of parallel execution. Consequently,
              it is <strong>not</strong> necessary for the user-written
              callback to manage synchronization.</p>
            
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FlowMIRCutInfoCallback.#ctor">
             <summary>
             <p>Constructor for user-written flow cover and MIR cut callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>FlowMIRCutInfoCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.FlowMIRCutInfoCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of the cut generation.</p>
             <p>The returned values are in the range of 0.0 to 1.0.</p>
             </summary>
            <returns>The fraction of completion of the cut generation.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.FlowMIRCutInfoCallback.Progress">
               <summary>
               Gets the fraction of completion of the flow MIR cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FlowMIRCutCallback">
              <summary>
              This is the callback class to use to control the progress
              of the generation of flow cover and mixed integer rounding (MIR)
              cuts when a mixed integer programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of the class <c>FlowMIRCutCallback</c> represents a
              user-written control or query callback in an application
              that uses an instance of
              
               <c>Cplex</c>  
              to solve a mixed integer programming problem (a
              MIP). This class offers a method to control the progress of the
              generation of flow cover and mixed integer rounding (MIR) cuts.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.
              This is the callback class to use when
              
               <c>Cplex</c>  
              is solving a MIP and you intend to intervene in the search.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.FlowMIRCutInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.FlowMIRCutCallback.#ctor" -->
        <member name="M:ILOG.CPLEX.Cplex.FlowMIRCutCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of the cut generation.</p>
             <p>The returned values are in the range of 0.0 to 1.0.</p>
             </summary>
            <returns>The fraction of completion of the cut generation.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.FlowMIRCutCallback.Progress">
               <summary>
               Gets the fraction of completion of the flow MIR cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DisjunctiveCutInfoCallback">
              <summary>
              Monitors the progress
              of the generation of disjunctive cuts when a mixed integer
              programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of the class
              <c>DisjunctiveCutInfoCallback</c> represents
              a user-written callback in an application that uses an instance of
              
               <c>Cplex</c>  
              to solve a mixed integer programming problem (a
              MIP). This class allows you to monitor the progress of the
              generation of disjunctive cuts.</p>
            
             <p>User-written callbacks of this class are compatible
             with dynamic search.</p>
            
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              <p>The user-written callback of this class is called by only
              one thread, even in the case of parallel execution. Consequently,
              it is <strong>not</strong> necessary for the user-written
              callback to manage synchronization.</p>
            
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DisjunctiveCutInfoCallback.#ctor">
             <summary>
             <p>Constructor for user-written disjunctive cut callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>DisjunctiveCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DisjunctiveCutInfoCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of the
             disjunctive cut generation.</p>
             <p>The returned values are in the range of 0.0 to 1.0.</p>
             </summary>
            <returns>The fraction of completion of the disjunctive cut generation.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.DisjunctiveCutInfoCallback.Progress">
               <summary>
               Gets the fraction of completion of the disjunctive cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.DisjunctiveCutCallback">
              <summary>
              This is the callback class to use to control the progress
              of the generation of disjunctive cuts when a mixed integer
              programming problem (MIP) is being solved.
              </summary>
             <remarks>
              <p>An instance of the class <c>DisjunctiveCutCallback</c> represents
              a user-written callback in an application that uses an instance of
              <c>Cplex</c> to solve a mixed integer programming problem (a
              MIP). This class allows you to control the progress of the
              generation of disjunctive cuts.</p>
              <p>
              This is a user-written callback class.
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.DisjunctiveCutInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DisjunctiveCutCallback.#ctor">
             <summary>
             <p>Constructor for user-written disjunctive cut callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>DisjunctiveCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.DisjunctiveCutCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of
             the disjunctive cut generation.</p>
             <p>The returned values are in the range of 0.0 to 1.0.</p>
             </summary>
            <returns>The fraction of completion of the disjunctive cut generation.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.DisjunctiveCutCallback.Progress">
               <summary>
               Gets the fraction of completion of the disjunctive cut generation.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.NodeId">
              <summary>
              A class for uniquely identifying a MIP node
              in a branch-and-cut tree.
              </summary>
             <remarks>
              <p>
              
               <c>Cplex</c>  
              assigns a node identifier, <c>NodeId</c>,
              to every node it creates.  In
              fact, the <c>NodeId</c> of a node created with one of the methods
              <c>BranchCallback.MakeBranch</c> is returned by
              these methods.</p>
            
              <p>The <c>NodeId</c> of the current node can be queried from a goal
              or from a callback that is called at a node.  The object
              <c>NodeCallback</c> allows you to access the
              <c>NodeId</c> of all remaining nodes.</p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeId.Equals(System.Object)">
             <summary>
             <p>Tests whether two node identifiers are equal.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeId.ToString">
            <summary>
            <p>Returns a string with the numeric value
            of the invoking node identifier.</p>
            </summary>
            <returns>A string with the numeric value of the invoking node identifier.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.NodeCallback">
              <summary>
              Base class for user-written callbacks
              selecting the next node to process
              during the branch-and-cut search.
              </summary>
             <remarks>
              <p>This is an advanced class.</p>
              <p><b>Important:</b></p>
              <p>
              Advanced classes typically demand a profound understanding
              of the algorithms used by CPLEX. Thus they incur a higher risk of
              incorrect behavior in your application, behavior that can be difficult
              to debug. Therefore, the team encourages you to consider carefully whether
              you can accomplish the same task by means of other classes instead.
              </p>
              <p>
              This is the base class for user-written callbacks that allow the user to
              select the node to process next during the branch-and-cut search.
              Node callbacks allow you to determine which node from among the
              unexplored nodes <c>Cplex</c> will chose to explore next in the
              branch-and-cut search.  They also give you the option to override this
              selection. </p>
              <p>
              When an instance of this callback class executes, the invoking instance of
              <c>Cplex</c> still has <c>n = getNremainingNodes</c>
              (inherited from <c>MIPCallback</c>) nodes left to process. These
              remaining nodes are numbered from <c>0</c> (zero) to
              <c>n-1</c>. For that reason, the same node may have a different
              number each time an instance of <c>NodeCallback</c> is called. To
              identify a node uniquely, an instance of <c>Cplex</c> also
              assigns a unique identifier
              (<c>Cplex.NodeId</c>) to each node. That unique
              identifier remains unchanged throughout the search. The method
              <c>getNodeId(int i)</c> allows you to access the
              <c>Cplex.NodeId</c> for each of the remaining
              nodes <c>0</c>
              to <c>n-1</c>. Similarly, the method <c>getNodeNumber</c>
              returns the number of a node specified by its
              <c>Cplex.NodeId</c>.</p>
              <p>
              The constructor and methods of this class are protected to make sure that
              they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.MIPInfoCallback"/><see cref="T:ILOG.CPLEX.Cplex.MIPCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.#ctor">
             <summary>
             <p>This is the constructor for user-written node callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes; it cannot be used to construct
             <c>NodeCallback</c> objects directly.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.GetNodeId(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.GetObjValue(System.Int64)" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetEstimatedObjValue(System.Int64)">
             <summary>
             <p>Returns the estimated objective value for the node specified by the
             node number.</p>
             </summary>
            <param name="node">The number of the node for which the estimated
                             objective value is requested.
             </param>
             <returns>The estimated object value for the node with node
                             number <c>node</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetDepth(System.Int64)">
             <summary>
             <p>Returns the depth of the node in the search tree.</p>
             <p>The root node is
             defined to have depth <c>0</c> (zero); the depth of other nodes
             is their distance from the root or, equivalently, the number of
             branches needed to reach that node from the root.</p>
             </summary>
            <param name="node">The node number of the node whose depth is being queried.
             </param>
             <returns>The depth of the node with number <c>node</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetInfeasibilitySum(System.Int64)">
             <summary>
             <p>Returns the sum of integer infeasibilities of the
             node specified by the node number.</p>
             </summary>
            <param name="node">The node number of the node whose infeasibility sum
                         is being queried.
             </param>
             <returns>The sum of integer infeasibility of the node with number
                         <c>node</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.GetNinfeasibilities(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.SelectNode(System.Int64)" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetBranchVar(System.Int64)">
             <summary>
             <p>Returns the variable that was branched upon to create the node
             specified by number <c>node</c>.</p> <p>If that node has
             been created by branching on a constraint or on multiple
             variables, <c>null</c> will be returned.</p>
             </summary>
            <param name="node">The number of the node from which you want to
                             obtain the variable.
             </param>
             <returns>The branch variable of the node with number
                             <c>node</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetNodeData(System.Int64)">
             <summary>
             <p>Returns the user object attached to the node with the
             specified number.</p>
             <p>User objects can be attached to a node when the
             node is created with the method
             <c>Cplex.BranchCallback.MakeBranch</c> in a branch
             callback.</p>
             </summary>
            <returns>The user object attached to the node with number
                     <c>node</c>.  If no user object is attached to the
                     node, <c>null</c> will be returned.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.SetNodeData(System.Int64,System.Object)">
             <summary>
             <p>Sets the user object attached to the node with the
             specified number.</p>
             </summary>
            <param name="node">Number of node for which user data shall be changed.
             </param>
             <param name="data">New user data for the specified node.
             </param>
             <returns>The old user object attached to the node with number
                     <c>node</c>.  If no user object was attached to the
                     node, <c>null</c> will be returned.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.GetNodeNumber(ILOG.CPLEX.Cplex.NodeId)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeCallback.GetNodeNumber64(ILOG.CPLEX.Cplex.NodeId)" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetObjValue(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetEstimatedObjValue(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetDepth(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetInfeasibilitySum(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetNinfeasibilities(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.SelectNode(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetBranchVar(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeCallback.GetNodeData(ILOG.CPLEX.Cplex.NodeId)">
              <exclude />
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BranchType">
              <summary>
              Identifies a branch type for a user-written callback.
              </summary>
             <remarks>
              <p>This class identifies the branch type for <c>BranchCallback</c>.
              </p>
              <p>The branch type reports what type of branch <c>Cplex</c> is
              about to make when the <c>BranchCallback</c> is called.
              Possible types include:</p>
              <ul>
              <li><c>BranchOnVariable</c> reports branching on a single
              variable.</li>
              <li><c>BranchOnSOS1</c> reports branching on an SOS of type 1.</li>
              <li><c>BranchOnSOS2</c> reports branching on an SOS of type 2.</li>
              <li><c>BranchOnAny</c>  reports a more complex branching.</li>
              </ul>
            
             </remarks>
             <see cref="T:ILOG.CPLEX.Cplex.BranchCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchType.Equals(System.Object)">
             <summary>
             <p>This method tests whether two branch types are equal.</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchType.BranchOnVariable">
             <summary>
             <p>An instance of <c>Cplex.BranchType</c> reporting a
             branch on a single variable.</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchType.BranchOnAny">
             <summary>
             <p>An instance of <c>Cplex.BranchType</c> reporting a
             complex branching.</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchType.BranchOnSOS1">
             <summary>
             <p>An instance of <c>Cplex.BranchType</c> reporting a
             branch on a special ordered set (SOS) of type 1 (one).</p>
             </summary>
        </member>
        <member name="F:ILOG.CPLEX.Cplex.BranchType.BranchOnSOS2">
             <summary>
             <p>An instance of <c>Cplex.BranchType</c> reporting a
             branch on a special ordered set (SOS) of type 2.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchType.ToString">
            <summary>
            <p>Returns a string representing the invoking branch type.</p>
            </summary>
            <returns>A string representing the invoking branch type.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.BranchCallback">
              <summary>
              Base class for user-written callbacks that control branching.
              </summary>
             <remarks>
              <p>This is an advanced class.</p>
              <p><b>Important:</b></p>
              <p>
              Advanced classes typically demand a profound understanding
              of the algorithms used by CPLEX. Thus they incur a higher risk of
              incorrect behavior in your application, behavior that can be difficult
              to debug. Therefore, the team encourages you to consider carefully whether
              you can accomplish the same task by means of other classes instead.
              </p>
              <p>This is the base class for user-written callbacks that
              control branching during the branch-and-cut search.
              This callback will be called prior to the creation of the children
              of the current node.
              It allows you to query how the invoking instance of
              
               <c>Cplex</c>  
              is about to create the children,
              and gives you the opportunity to override creation of this branch.</p>
              <p>
              You can create one or two branches by calling one of the
              <c>makeBranch</c> methods once or twice. It is an error to call
              <c>makeBranch</c> more than twice.</p>
              <p>
              By calling method <c>prune</c>, you remove the current node from
              the search tree. In other words, no subnodes from the current node will
              be added to the search tree. Calling both <c>prune</c> and
              <c>makeBranch</c> in one invocation of a branch callback is an
              error and yields unspecified behavior.</p>
              <p>
              If you call neither <c>prune</c> nor <c>makeBranch</c>,
              the instance of <c>Cplex</c> proceeds with its own
              branching.</p>
              <p>
              The constructor and methods of this class are protected to make sure that
              they are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.#ctor">
             <summary>
             <p>Constructor for user-written branch callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>BranchCallback</c> objects directly.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.GetNodeId">
            <summary>
            <p>Returns the node identifier of the current node.</p>
            </summary>
            <returns>the <c>Cplex.NodeId</c> of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.GetNbranches">
             <summary>
             <p>Returns the number of branches CPLEX
             is going to create
             at the current node unless overridden by the invoking callback.</p>
             </summary>
            <returns>The number of branches <c>Cplex</c> is going to create
                     at the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.GetBranchType">
             <summary>
             <p>Returns the type of branching CPLEX
             is going to do at
             the current node unless overridden by the invoking callback.</p>
             </summary>
            <returns>The type of branching CPLEX is going to do at
                     the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.GetBranches(ILOG.Concert.INumVar[][],System.Double[][],ILOG.CPLEX.Cplex.BranchDirection[][])">
              <summary>
              <p>Queries the branches CPLEX would create at the current
              node if not overridden by the invoking callback.</p>
              <p>The returned branch
              will be performed if the callback does not call the method
              <c>makeBranch</c> or <c>prune</c>.</p>
              </summary>
             <param name="vars">An array of length at least <c>getNbranches</c>
                              of arrays. Upon completion, <c>vars[i]</c>
                              will contain the list of variables whose bounds will
                              be changed in child <c>i</c> of the current node.
              </param>
              <param name="bounds">An array of length at least <c>getNbranches</c>
                              of arrays.  Upon completion, <c>bounds[i]</c>
                              will contain the list of new bounds used for
                              child <c>i</c>.
                              One bound of variable
                              <c>vars[i][j]</c> will be set to
                              <c>bounds[i][j]</c> for all possible
                              pairs <c>i, j</c>.
              </param>
              <param name="dirs">An array of length at least <c>getNbranches</c>
                              of arrays.  Upon completion of this method
                              dirs[i] will contain the list of branch
                              directions used for child <c>i</c>.  If
                              <c>dirs[i][j]</c> is
                              <c>Cplex.BranchDirection.Up</c> the lower
                              bound of variable <c>vars[i][j]</c> will be set
                              to <c>bounds[i][j]</c> for all possible pairs
                              <c>i, j</c>.
                              Similarly, if <c>dirs[i][j]</c>
                              is <c>Cplex.BranchDirection.Down</c> the upper
                              bound of variable <c>vars[i][j]</c> will be set
                              to <c>bounds[i][j]</c> for all possible pairs
                              <c>i, j</c>.
            
              </param>
              <returns>An array of double values containing the node estimates for the
                      branches.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.BranchCallback.GetBranches(ILOG.Concert.IRange[][])">
              <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.IsIntegerFeasible" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.INumVar[],System.Double[],ILOG.CPLEX.Cplex.BranchDirection[],System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(System.Int32,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.INumVar[],System.Double[],ILOG.CPLEX.Cplex.BranchDirection[],System.Double,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.INumVar,System.Double,ILOG.CPLEX.Cplex.BranchDirection,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.INumVar,System.Double,ILOG.CPLEX.Cplex.BranchDirection,System.Double,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.IRange[],System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.IRange[],System.Double,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.IRange,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.MakeBranch(ILOG.Concert.IRange,System.Double,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.BranchCallback.Prune" -->
        <member name="P:ILOG.CPLEX.Cplex.BranchCallback.Nbranches">
               <summary>
               Gets the number of branches CPLEX will create at the current node
               unless overridden by the user-written callback.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.HeuristicCallback">
              <summary>
              Base class for user-written callbacks injecting integer-feasible
              solutions during search.
              </summary>
             <remarks>
              <p>This is an advanced class.</p>
              <p><b>Important:</b></p>
              <p>
              Advanced classes typically demand a profound understanding
              of the algorithms used by CPLEX. Thus they incur a higher risk of
              incorrect behavior in your application, behavior that can be difficult
              to debug. Therefore, the team encourages you to consider carefully whether
              you can accomplish the same task by means of other classes instead.
              </p><p>
              This is the base class for user-written callbacks allowing you to inject
              integer-feasible solutions during the branch-and-cut search.
              During branching, the heuristic callback is called after
              each node subproblem has been solved, including any cuts that
              may have been newly generated.  Before branching, at the root node,
              the heuristic callback is also called before each round of cuts is
              added to the problem and re-solved.
              </p>
              <p>This callback class also provides support for
              implementing simplex-based heuristics for constructing solutions, by
              allowing you to change the bounds of variables and re-solve the node
              relaxation.  Changing the bounds in the heuristic callback has no
              effect on the search after the callback has completed.
              This callback will be called after the node relaxation
              (including all cuts generated at that node) has been solved.</p>
              <p>
              The constructor and methods of this class are protected to
              make sure that they
              are used only to derive a user-written callback class or to
              implement the <c>main</c> method in it.</p>
            
              </remarks>
              <see cref="T:ILOG.CPLEX.Cplex.ControlCallback"/>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.HeuristicCallback.#ctor">
             <summary>
             <p>Constructor for user-written heuristic callbacks.</p>
             <p>This constructor can be called only to construct objects of
             derived user-written callback classes, but not to construct
             <c>HeuristicCallback</c> objects directly.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.SetBounds(ILOG.Concert.INumVar,System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.SetBounds(ILOG.Concert.INumVar[],System.Double[],System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.SetBounds(ILOG.Concert.INumVar[],System.Double[],System.Double[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.Solve(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.Solve" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.GetStatus" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.GetCplexStatus" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.IsDualFeasible" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.HeuristicCallback.IsPrimalFeasible" -->
        <member name="M:ILOG.CPLEX.Cplex.HeuristicCallback.SetSolution(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)">
              <summary>
              Injects a solution to be used as the potential new incumbent
              from an array that may possibly contain other elements.
              </summary>
             <remarks>  <p>
              The injected solution is specified by providing solution values for
              all variables in the model. The array used to specify the values
              may contain more elements; in that case, use the argument
              <c>start</c> to specify the starting element and the
              argument <c>num</c> to specify the number of consecutive
              elements to use.
              </p>
              <p>
              If a user heuristic is successful in finding a new candidate for an
              incumbent, it can be passed to <c>Cplex</c> by the method
              <c>setSolution</c>. <c>Cplex</c> analyzes the solution
              and, if it is both feasible and better than the current incumbent,
              <c>Cplex</c>
              uses it as the new incumbent. A solution is specified using arrays
              <c>vars</c> and <c>vals</c>, where <c>vals[i]</c>
              specifies the solution value for <c>vars[i]</c>.</p>
              <p>
              Do not call this method multiple times. Calling it again overwrites
              any previously specified solution.
              </p>
            
            
              
            
            
             </remarks>
             <param name="vars">An array containing variables whose solution
                           values are specified.
              </param>
              <param name="vals">An array containing the solution values for the variables
                           specified in <c>vars</c>. <c>vals[j]</c>
                           specifies the solution value for <c>vars[j]</c>
                           for <c>j</c> in <c>start</c> through
                           <c>start+num-1</c>.
              </param>
              <param name="start">The index of the first element to consider in arrays
                           <c>vars</c> and <c>vals</c>.
              </param>
              <param name="num">The number of consecutive elements to consider in arrays
                           <c>vars</c> and <c>vals</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.HeuristicCallback.SetSolution(ILOG.Concert.INumVar[],System.Double[])">
              <summary>
              Injects a solution to be used as the potential new incumbent.
              </summary>
             <remarks>  <p>
              The injected solution is specified by providing solution values for
              all variables.
              If a user heuristic is successful in finding a new candidate for an
              incumbent, it can be passed to <c>Cplex</c> by the method
              <c>setSolution</c>. <c>Cplex</c> analyzes the
              solution and, if it is both feasible and better than the current
              incumbent,
              uses it as the new incumbent. A solution is specified using arrays
              <c>vars</c> and <c>vals</c>, where <c>vals[i]</c>
              specifies the solution value for <c>vars[i]</c>.</p>
              <p>
              Do not call this method multiple times. Calling it again overwrites
              any previously specified solution.
              </p>
            
              
             </remarks>
             <param name="vars">An array of variables whose solution
                           values are specified.
              </param>
              <param name="vals">An array containing the solution values for the variables
                           specified in <c>vars</c>.  <c>vals[j]</c>
                           specifies the solution value for <c>vars[j]</c>.</param>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.HeuristicCallback.SetSolution(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32,System.Double)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.HeuristicCallback.SetSolution(ILOG.Concert.INumVar[],System.Double[],System.Double)">
              <summary>
              Injects a solution to be used as the potential new incumbent.
              </summary>
             <remarks>  <p>
              The injected solution is specified by providing solution values for
              all variables.
              If a user heuristic is successful in finding a new candidate for an
              incumbent, it can be passed to <c>Cplex</c> by the method
              <c>setSolution</c>. <c>Cplex</c> analyzes the solution
              and, if it is both feasible and better than the current incumbent,
              uses it as the new incumbent. A solution is specified using arrays
              <c>vars</c> and <c>vals</c>, where <c>vals[i]</c>
              specifies the solution value for <c>vars[i]</c>.</p>
              <p>
              Do not call this method multiple times. Calling it again overwrites
              any previously specified solution.
              </p>
            
              
            
             </remarks>
             <param name="vars">An array of variables whose solution
                           values are specified.
              </param>
              <param name="vals">An array containing the solution values for the variables
                           specified in <c>vars</c>. <c>vals[j]</c>
                           specifies the solution value for <c>vars[j]</c>.
              </param>
              <param name="obj">The objective function value of the injected solution.
                           The value must be accurate because <c>Cplex</c>
                           does not verify the solution value but uses it as is. If
                           there is any uncertainty about its accuracy, use the
                           corresponding method without the <c>obj</c> argument
                           instead.  This argument  allows you to avoid the
                           computational overhead of having <c>Cplex</c>
                           recompute the objective function value for the injected
                           solution.</param>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.TuningCallback">
             <summary>
             <p>Base class for callbacks to use in a tuning session.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.TuningCallback.GetProgress">
             <summary>
             <p>Returns the fraction of completion of the tuning process.</p>
             <p>The returned values are in the range of 0.0 to 1.0.</p>
             </summary>
            <returns>The fraction of the tuning process already completed.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.TuningCallback.Progress">
               <summary>
               Gets the fraction of completion of the tuning process.
               The returned values are in the range of 0.0 to 1.0.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.UnknownObjectException">
             <summary>
             <p>Exceptions of this class are thrown if operations are attempted for
             modeling objects that not part of the active model.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UnknownObjectException.#ctor(System.Object)">
             <summary>
             <p>Constructor for unknown object exceptions.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UnknownObjectException.GetObject">
             <summary>
             <p>Returns the modeling object that triggered this exception.</p>
             </summary>
            <returns>The modeling object that triggered the
                        <c>UnknownObjectException</c> exception.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.UnsupportedObjectException">
             <summary>
             <p>Exceptions of this class are thrown when a modeling object that
             cannot be extracted is added to
             the invoking <c>Cplex</c> object.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UnsupportedObjectException.#ctor(System.Object)">
             <summary>
             <p>Constructor for unsupported object exceptions.</p>
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.UnsupportedObjectException.GetObject">
             <summary>
             <p>Returns the modeling object that triggered this exception.</p>
             </summary>
            <returns>The modeling object that triggered the
                     <c>UnsupportedObjectException</c> exception.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.MultipleUseException">
             <summary>
             <p>Exceptions of this class are thrown when a modeling object that is used
             by one instance of <c>Cplex</c> is attempted to be used
             by another<c>Cplex</c> object at the same time.</p>
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.CplexEndedException">
             <summary>
             <p>Exceptions of this class are thrown when a method is called for an
             <c>Cplex</c> object or any object that has been created with it
             after the <c>end</c> method has been called.</p>
             </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Goal">
            <summary>
            Base class of user-written implmentation classes of goals.
            </summary>
            <remarks>
            <p>This is an advanced class.</p>
            <p><b>Important:</b></p>
            <p>
            Advanced classes typically demand a profound understanding
            of the algorithms used by CPLEX. Thus they incur a higher risk of
            incorrect behavior in your application, behavior that can be difficult
            to debug. Therefore, the team encourages you to consider carefully whether
            you can accomplish the same task by means of other classes instead.
            </p>
            <p>Goals can be used to control the branch-and-cut search in
            <c>Cplex</c>.  In some respects, goals are an alternative
            to callbacks for controlling branch-and-cut search.
            Goals are implemented in subclasses of class
            <c>Cplex.Goal</c>.  Thus, this is the base class for
            user-written implementation classes of CPLEX goals.
            To implement your own goal, you need to create a subclass of
            <c>Cplex.Goal</c> and implement its pure virtual method
            <c>execute</c>.  After implementing your goal class, you use it
            by calling the method <c>Cplex.Solve(goal)</c> instead of
            the standard <c>Cplex.Solve</c> without an argument.</p>
            <p>
            The <c>execute</c> method is called by <c>Cplex</c>
            at each branch-and-cut node (referred to as the current node) after the
            node relaxation has been solved.
            Every node maintains a stack of goals, and the top goal from this
            stack is popped and executed until the stack becomes empty or some
            special goal is encountered as described below.  When the goal stack of
            a node becomes empty, CPLEX continues with its built-in search for that
            subtree.  When <c>Cplex.Solve(goal)</c> is called,
             <c>goal</c> is simply pushed on the goal stack of the root node
             before the branch-and-cut search begins.</p>
             <p>
             The method <c>Cplex.Goal.Execute</c> is where you
             can control the branch-and-cut search of <c>Cplex</c>.  Class
             <c>Cplex.Goal</c> provides several methods for querying
             information about the current node. It is, however, the goal returned
             by the <c>execute</c> method that determines how to proceed with
             the search.  CPLEX provides several methods that create
             special goals that can be used to define the ongoing search in addition
             to any user-written goal:</p>
             <ul>
             <li> <c>Cplex.Or</c> creates a goal that will create child
                  nodes when executed.  One child will be created for every
                  argument passed to the method <c>Cplex.Or</c>.  Each
                  child node will be initialized with a copy of the goal stack of
                  the current node.  Goals provided to the method
                  <c>Cplex.Or</c> as arguments are then
                  pushed onto the goal stack of the
                  corresponding child.  Finally, the current node will be
                  deleted and a new node will be picked from the tree for evaluation.
                  </li>
             <li> Constraint goals are created with, for example, the method
                  <c>Cplex.ConstraintGoal</c> with a constraint as its
                  argument as a local cut.  When executed, the constraint will be
                  added to the node problem for all nodes in that subtree.  It will
                  not, however, be added to nodes outside the subtree; use the method
                  <c>Cplex.GlobalCutGoal</c> for doing this.
                  Other methods for creating
                  constraint goals more conveniently are <c>Cplex.LeGoal</c>,
                  <c>Cplex.GeGoal</c>, and <c>Cplex.EqGoal</c>.</li>
             <li> As we just discussed, global cut goals are created with the method
                  <c>Cplex.GlobalCutGoal</c>.  When executed, they add a
                  global cut to the model being solved.</li>
             <li> The method <c>Cplex.And</c> takes several goals as
                  arguments.
                  When executed, it simply pushes these goals on the goal stack in
                  reverse order so that they will be executed in the order they have
                  been provided as arguments.</li>
             <li> The method <c>Cplex.SolutionGoal</c> returns a goal that
                  attempts to inject a solution into the branch-and-cut search.</li>
             <li> Executing the goal returned by the method
                  <c>Cplex.BranchAsCplex</c> will cause CPLEX to
                  continue with its own branching decision.  This is different from
                  continuing with an empty goal stack in that goals can still be
                  executed at every node, thus maintaining the possibility of
                  taking control at any time.</li>
             <li> When the goal created with the method <c>Cplex.FailGoal</c>
                  is executed, the current node will be pruned.  That is, the search
                  will be discontinued below the current node.  If available, one of
                  the remaining nodes from the branch-and-cut tree will be chosen for
                  evaluation.</li>
             <li> When executing any other goal, the returned goal is simply pushed on
                  the goal stack, unless the returned goal is <c>null</c>, which
                  will simply be ignored.</li>
             </ul>
             <p>Goals returned by <c>Cplex.Or</c> and
             <c>Cplex.And</c> allow you to combine goals.
             <c>Cplex.And</c> allows you to execute different goals at
             one node, while <c>Cplex.Or</c> allows you to execute
             different goals on different newly, created nodes.  A typical use of
             these two goals in a return statement of a user written goal is:</p>
             <p>
                <c>return cplex.And ( cplex.Or (branch1, branch2), this);</c>
              </p><p>
              The <c>Cplex.And</c> goal first pushes <c>this</c>,
              that is, the goal currently being executed, on the goal stack and then it
              pushes the <c>Cplex.Or</c> goal.  Thus the
              <c>Cplex.Or</c> goal is on top of the stack and will be
              executed next.  When the <c>Cplex.Or</c> is executed, it
              creates two new nodes and copies the remaining goal stack to both of
              them.  Thus both new nodes will have <c>this</c>
              goal on top of the goal
              stack at this point.  Then the <c>Cplex.Or</c> proceeds to
              push <c>branch1</c> on the goal stack of the first child node and
              <c>branch2</c> on the goal stack of the second goal child node.
              Typically, <c>branch1</c> and <c>branch2</c> would
              eventually contain constraint goals so by executing <c>branch1</c>
              and <c>branch2</c> at the respective child nodes, the child nodes
              will be restricted to represent smaller subproblems than their parent.
              After <c>branch1</c> and <c>branch2</c> have been executed
              <c>this</c> is on top of the node stack of both child nodes, that
              is, both child nodes will continue branching according to the same rule.
              In summary, the above example creates branches described
              <c>branch1</c> and <c>branch2</c> and continues in both
              branches to control the same search strategy <c>this</c>.</p>
              <p>
              If the default implementation of method <c>clone</c> is not
              adequate and the goal is to be used for parallel optimization,
              this method also needs to be implemented by the user.  Recall that the
              default <c>clone</c> method performs a shallow copy, so
              typically a user implementation would perform a deep copy for
              objects that should be local to threads or use the
              <c>synchronize</c> keyword where synchronization is required.
              </p>
              <p>
              For more information about goals see that topic in the
              <em>CPLEX User's Manual</em>.</p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.Execute(ILOG.CPLEX.Cplex)" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetBestObjValue">
             <summary>
             Accesses the currently best known bound
             of all the remaining open nodes in a branch-and-cut tree.
             </summary>
             <remarks> <p>
             It is computed for a minimization problem as the minimum
             objective function value of all remaining unexplored nodes.
             Similarly, it is computed for a maximization problem as the maximum
             objective function value of all remaining unexplored nodes.
             </p><p>
             For a regular MIP optimization,
             this value is also the best known bound on the optimal solution
             value of the MIP problem. In fact,
             when a problem has been solved to optimality, this value matches the
             optimal solution value.
             </p><p>
             However, for the method <c>populate</c>, the value can also exceed
             the optimal solution value if CPLEX has already solved the model
             to optimality but continues to search for additional solutions.
             </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>A bound on the optimal solution value.
              </returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetMIPRelativeGap">
              <summary>
              This method returns the relative objective gap
              of the active problem at the moment the callback is called.
              </summary>
             <remarks>  <p>
              For a minimization problem, this value is computed by
              <c>
              (bestinteger - bestobjective) / (1e-10 + |bestobjective|)
              </c>
              where <c>bestinteger</c> is the value returned by
              {@link Cplex#getObjValue Cplex.GetObjValue}
              and <c>bestobjective</c> is the value returned by
              {@link Cplex#getBestObjValue Cplex.GetBestObjValue}.
              For a maximization problem, the value is computed by:
              <c>
              (bestobjective - bestinteger) / (1e-10 + |bestobjective|)
              </c>
              </p>
            
              
             <exception>ILOG.Concert.Exception    If the method fails, an exception
                                            of type <c>ILOG.Concert.Exception</c>, or
                                            one of its derived classes, is thrown.</exception></remarks>
                                            <returns>The relative objective gap.
              </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetCutoff" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetIncumbentObjValue">
             <summary>
             <p>Returns the objective value of the current best integer solution.</p>
             <p>This method returns the objective value for the current incumbent
             solution (that is, the best integer solution found so far).</p>
             </summary>
            <returns>The objective value for the current incumbent solution.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetIncumbentValue(ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetIncumbentValues(ILOG.Concert.INumVar[])">
             <summary>
             <p>Returns incumbent solution values for an array of variables.</p>
             </summary>
            <param name="vars">The array of variables whose
                         incumbent solution values are being queried.
             </param>
             <returns>The incumbent solution values for the variables listed in
                         <c>var</c>.
                         The solution value for the variable <c>var[j]</c> is
                         returned as element <c>j</c> of the returned array.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetIncumbentValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             <p>Returns the incumbent solution values for a set of
             variables.</p>
             </summary>
            <param name="vars">An array containing the variables whose
                             incumbent solution values are being queried.
             </param>
             <param name="start">The index of the first variable in <c>vars</c>
                             for which to return the incumbent solution value.
             </param>
             <param name="num">The number of variables in <c>vars</c> for which
                             to return the incumbent solution values.
             </param>
             <returns>The incumbent solution values for
                             the variables listed in
                             <c>var</c>.  The solution for the variable
                             <c>var[j+start]</c> is returned as element
                             <c>j</c> of the returned array.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.IsIntegerFeasible">
             <summary>
             <p>Returns true if the current solution is integer feasible.</p>
             </summary>
            <returns><c>true</c> if the current solution is integer feasible</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.HasIncumbent">
             <summary>
             <p>Returns true if an incumbent solution has been found.</p>
             </summary>
            <returns><c>true</c> if an incumbent solution has been found.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNnodes">
             <summary>
             <p>Returns the number of nodes processed so far in the active
             branch-and-cut search.</p>
             </summary>
            <returns>The number of nodes processed so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNremainingNodes">
             <summary>
             <p>Returns the number of nodes remaining to be processed, or,
             equivalently, the number of active nodes in the tree.</p>
             </summary>
            <returns>The number of nodes remaining to be processed.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNiterations">
             <summary>
             <p>Returns the total number of iterations for solving node problems
             during the current optimization.</p>
             </summary>
            <returns>The total number of iterations for solving node problems.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNnodes64">
             <summary>
             <p>Returns the number of nodes processed so far in the active
             branch-and-cut search.</p>
             </summary>
            <returns>The number of nodes processed so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNremainingNodes64">
             <summary>
             <p>Returns the number of nodes remaining to be processed, or,
             equivalently, the number of active nodes in the tree.</p>
             </summary>
            <returns>The number of nodes remaining to be processed.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNiterations64">
             <summary>
             <p>Returns the total number of iterations for solving node problems
             during the current optimization.</p>
             </summary>
            <returns>The total number of iterations for solving node problems.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNcuts(System.Int32)">
             <summary>
             Returns the number of cuts of the specified type that have been added to the node
             relaxation at the moment the callback is called.
             </summary>
            <returns>The number of cuts of the specified type added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNcliques">
             <summary>
             <p>Returns the number of clique cuts that have been added to the model
             during the current optimization.</p>
             </summary>
            <returns>The number of clique cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNcovers">
             <summary>
             <p>Returns the number of cover cuts that have been added to the model
             during the current optimization.</p>
             </summary>
            <returns>The number of cover cuts added so far.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetNflowCovers" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNflowPaths">
             <summary>
             <p>Returns the number of flow path cuts
             that have been added to the model
             during the current optimization.</p>
             </summary>
            <returns>The number of flow path cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNGUBcovers">
             <summary>
             <p>Returns the number of GUB cover cuts
             that have been added to the model
             during the current optimization.</p>
             </summary>
            <returns>The number of GUB cover cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNfractionalCuts">
             <summary>
             <p>Returns the number of fractional cuts
             that have been added to the model
             during the current optimization.</p>
             </summary>
            <returns>The number of fractional cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNdisjunctiveCuts">
             <summary>
             <p>Returns the number of disjunctive cuts that have been added to the
             model during the current optimization.</p>
             </summary>
            <returns>The number of disjunctive cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNMIRs">
             <summary>
             <p>Returns the number of mixed integer rounding (MIR) cuts that have
             been added to the model during the current optimization.</p>
             </summary>
            <returns>The number of MIR cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNimpliedBounds">
             <summary>
             <p>Returns the number of implied bound cuts that have been added to
             the model during the current optimization.</p>
             </summary>
            <returns>The number of implied bound cuts added so far.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNzeroHalfCuts">
             <summary>
             <p>Returns the number of zero-half cuts that have been added to
             the model during the current optimization.</p>
             </summary>
            <returns>The number of zero-half cuts added so far.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetDirection(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetPriority(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetLB(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetLBs(ILOG.Concert.INumVar[])" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetLBs(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             <p>Returns the current lower bounds for a number of variables,
             starting from a specified index in an array.</p>
             <p>The bounds may be different from the bounds
             the variables have in the active model,
             since branching or bound strengthening
             may have been applied to them.</p>
             </summary>
            <param name="var">An array containing the variables whose
                          current lower bounds are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the current lower bound.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> for which
                          to query the current lower bounds.
             </param>
             <returns>An array of double values containing the current lower
                          bounds for the specified variables.  If the returned
                          array is called <c>lb</c>, <c>lb[j]</c>
                          contains the lower bound of variable
                          <c>var[j+start]</c> at the current node,
                          for <c>j = 0, ..., num-1</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetUB(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetUBs(ILOG.Concert.INumVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetUBs(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetObjValue">
             <summary>
             <p>Returns the objective function value
             of the solution of the continuous
             relaxation of the current node.</p>
             </summary>
            <returns>The objective function value of the solution of the continuous
             relaxation of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetValue(ILOG.Concert.INumVar)">
             <summary>
             <p>Returns the solution value of a variable at the current node.</p>
             </summary>
            <param name="var">The variable whose current solution
                         value is being queried.
             </param>
             <returns>The solution value of variable <c>var</c> at
                         the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetValues(ILOG.Concert.INumVar[])">
             <summary>
             <p>Returns the solution values for an array of variables at the
             current node.</p>
             </summary>
            <param name="var">An array of variables whose current
                        solution values are being queried.
             </param>
             <returns>An array of double values containing the solution
                        values of the specified variables at the current node.
                        If the returned array is called <c>x</c>,
                        <c>x[j]</c> contains the current solution value
                        for the variable <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetValues(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             <p>Returns the solution values for a number of variables,
             starting at the specified index, in an array of variables at the
             current node.</p>
             </summary>
            <param name="var">An array containing the variables whose
                          current solution values are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the current solution values.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> for which to
                          query the current solution values.
             </param>
             <returns>An array of double values containing the solution
                          values of the specified variables at the current node.
                          If the returned array is called <c>x</c>,
                          <c>x[j]</c> is the current solution value
                          for the variable <c>var[j+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetSlack(ILOG.Concert.IRange)">
             <summary>
             <p>Returns the slack value of a constraint for the solution of the
             continuous relaxation of the current node.</p>
             </summary>
            <param name="rng">The constraint whose current slack
                         value is being queried.
             </param>
             <returns>The slack value of constraint <c>rng</c> for
                         the solution of the continuous relaxation of the
                         current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetSlacks(ILOG.Concert.IRange[])">
             <summary>
             <p>Returns the slack values for an array of constraints
             for the solution of the current node.</p>
             </summary>
            <param name="rng">An array of constraints whose current
                             slack values are being queried.
             </param>
             <returns>An array of double values containing the slack values
                             for the specified constraints for the solution of the
                             continuous relaxation of the current
                             node.  If the returned array is called <c>s</c>,
                             <c>s[i]</c> contains the current slack value
                             for constraint <c>rng[i]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetSlacks(ILOG.Concert.IRange[],System.Int32,System.Int32)">
             <summary>
             <p>Returns the slack values for a number of constraints,
             starting at the specified index, in an array of constraints
             for the solution of the current node.</p>
             </summary>
            <param name="rng">An array containing the constraints whose
                             current slack values are being queried.
             </param>
             <param name="start">The index of the first constraint in <c>rng</c>
                             for which to query the current slack values.
             </param>
             <param name="num">The number of consecutive constraints
                             in <c>rng</c> for which
                             to query the current slack values.
             </param>
             <returns>An array of double values containing the slack values of
                             the specified constraints for the solution of the
                             continuous relaxation of the current
                             node.  If <c>s</c> is the returned array,
                             <c>s[i]</c> contains the current slack value
                             for constraint <c>rng[i+start]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetValue(ILOG.Concert.INumExpr)">
             <summary>
             <p>Returns the value that a specified expression
             takes for the solution of the current node relaxation.</p>
             </summary>
            <param name="expr">The expression for which to evaluate the current solution.
             </param>
             <returns>The value <c>expr</c> takes for the solution of the
                         continuous relaxation of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetObjCoef(ILOG.Concert.INumVar)">
             <summary>
             <p>Returns the linear objective function coefficient for the
             specified variable in the model being solved.</p>
             </summary>
            <param name="var">The variable whose linear objective
                        coefficient is being queried.
             </param>
             <returns>The linear objective coefficient for the variable
                        <c>var</c> in the model being solved.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetObjCoefs(ILOG.Concert.INumVar[])">
             <summary>
             <p>Returns the linear objective function coefficients for an array of
             variables in the model being solved.</p>
             </summary>
            <param name="vars">An array of variables whose linear
                         objective function coefficients are being queried.
             </param>
             <returns>An array of double values containing the linear
                         objective function coefficients for the specified
                         variables in the problem being solved.  If the returned
                         array is called <c>obj</c>, <c>obj[j]</c>
                         is the linear objective function coefficient for
                         variable <c>var[j]</c>.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetObjCoefs(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
             <summary>
             <p>Returns the linear objective function coefficients for a
             number of variables, starting from the specified index in
             an array of variables in the model being solved.</p>
             </summary>
            <param name="vars">An array containing the variables whose
                          linear objective function coefficients are being queried.
             </param>
             <param name="start">The index of the first variable in <c>var</c> for
                          which to query the linear objective function coefficients.
             </param>
             <param name="num">The number of consecutive variables
                          in <c>var</c> for which to
                          query the linear objective function coefficients.
             </param>
             <returns>An array of double values containing the linear
                          objective function coefficients for the specified
                          variables in the problem being solved.  If <c>obj</c>
                          is the returned array, <c>obj[j]</c> is the
                          linear objective function coefficient for the variable
                          <c>var[j+start]</c>, for
                          <c>j = 0, ..., num-1</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetDownPseudoCost(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetUpPseudoCost(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetFeasibility(ILOG.Concert.INumVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetFeasibilities(ILOG.Concert.INumVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetFeasibilities(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetSOSFeasibility(ILOG.Concert.ISOS1)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetSOSFeasibility(ILOG.Concert.ISOS2)" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNodeId">
            <summary>
            <p>Returns the node identifier of the current node.</p>
            </summary>
            <returns>the node identifier of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetNbranches">
             <summary>
             <p>Returns the number of branches that <c>Cplex</c>
             is going to create
             at the current node unless overridden by the invoking goal.</p>
             </summary>
            <returns>The number of branches <c>Cplex</c> is going to create
                     at the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetBranchType">
             <summary>
             <p>Returns the type of branching <c>Cplex</c> is going to do at
             the current node unless overridden by the invoking goal.</p>
             </summary>
            <returns>The type of branching <c>Cplex</c> is going to do at
                     the current node.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.Goal.GetBranches(ILOG.Concert.INumVar[][],System.Double[][],ILOG.CPLEX.Cplex.BranchDirection[][])" -->
        <member name="M:ILOG.CPLEX.Cplex.Goal.GetBranches(ILOG.Concert.IRange[][])">
              <exclude />
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.BestObjValue">
               <summary>
               Gets a bound on the optimal solution value
               of the active problem.  When a model has been solved to optimality,
               this value matches the optimal solution value.  Before optimality
               has been proven, this value is computed for a minimization
               (maximization) problem as the minimum (maximum) objective
               function value of all remaining unexplored nodes.
               </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ILOG.CPLEX.Cplex.Goal.MIPRelativeGap" -->
        <member name="P:ILOG.CPLEX.Cplex.Goal.Cutoff">
               <summary>
               Gets the cutoff for the objective value when nodes
               are being solved during
               branch-and-cut search. This value is typically computed from the
               objective value of an incumbent solution and the optimality gap.
               In the case of a minimization problem, for example, if the objective
               value of a node exceeds the cutoff value, the node can be pruned
               without the need to solve the node to optimality.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.IncumbentObjValue">
               <summary>
               Gets the objective value of the current best integer solution.
               This property queries the objective value for the current incumbent
               solution (that is, the best integer solution found so far).  It
               cannot be set.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.Nnodes">
               <summary>
               Gets the number of nodes processed so far in the active
               branch-and-cut search.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.NremainingNodes">
               <summary>
               Gets the number of nodes remaining to be processed, or,
               equivalently, the number of active nodes in the tree.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.Niterations">
               <summary>
               Gets the number of iterations performed so far.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.ObjValue">
               <summary>
               Gets the objective function value of the solution of the continuous
               relaxation of the current model during the current optimization.
               </summary>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.Goal.Nbranches">
               <summary>
               Gets the number of branches CPLEX will create at the current node
               unless over-ridden by the goal.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.NodeEvaluator">
             <summary>
             Represents a node evaluator.
             </summary>
            <remarks>
             <p>Node evaluators can be used to control the node selection strategy
             during the branch-and-cut search.
             When <c>Cplex</c> finishes processing a node during
             branch-and-cut search it chooses a new active node from the tree to
             process.  Node evaluators allow
             you to implement your own node selection strategy
             within any subtree controlled by goals.</p>
             <p>
             Node evaluators are represented by objects of type
             <c>Cplex.NodeEvaluator</c>. To create your own node evaluator,
             you must subclass class <c>Cplex.NodeEvaluator</c> and implement
             the abstract method <c>evaluate</c>.</p>
             <p>
             The <c>evaluate</c> method is called by <c>Cplex</c> to
             compute a value for a given node.  Given two nodes being evaluated by the
             same evaluator, by default <c>Cplex</c> chooses the node with the
             lower value.  However, this default behavior can be changed by
             overriding the method <c>subsume</c>.</p>
             <p>
             If the default implementation of the method <c>clone</c> is not
             adequate and the goal is to be used for parallel optimization,
             this method also needs to be implemented by the user.  Recall that the
             default <c>clone</c> method performs a shallow copy, so
             typically a user implementation would perform a deep copy for
             objects that should be local to threads or use the
             <c>synchronize</c> keyword where synchronization is required.
             </p>
             <p>
             The method <c>Cplex.Apply</c> is used to impose a node selection
             strategy defined by a node evaluator on the search controlled by a goal,
             as shown in this example:</p>
             <p>
             <pre>
               Cplex.Goal evalGoal = cplex.Apply(goal, nodeEval);
             </pre>
             </p><p>
             In this example <c>nodeEval</c> is of type
             <c>Cplex.NodeEvaluator</c> and <c>goal</c> is of type
             <c>Cplex.Goal</c>.
             The method <c>apply</c> creates and
             returns a new goal that follows the node selection rule defined by
             <c>nodeEval</c> while performing branch-and-cut search as specified
             by <c>goal</c>.  In doing so, the node selection strategy defined by
             <c>nodeEval</c> is active only for the search subtree generated by
             <c>goal</c>.</p>
             <p>
             These conditions also mean that as soon as the goal stack
             becomes empty and <c>Cplex</c> proceeds with
             built-in search strategies, the node
             selection control via node evaluators is deactivated,
             and the built-in strategy controlled by the parameter
             <c>Cplex.IntParam.NodeSel</c> is
             used instead.  In order for you to maintain control
             over the node selection by means of
             node evaluators while using the <c>Cplex</c> branch strategy,
             you can use a goal such as this one:</p>
             <p>
             <c>
                  class DefaultSearchGoal extends Cplex.Goal {
                    public Cplex.Goal execute(Cplex cplex) throws ILOG.Concert.Exception {
                      if (!isIntegerFeasible())
                        return cplex.And(cplex.BranchAsCplex(), this);
                      return null;
                    }
                  }
             </c>
             </p><p>
             An interesting implication of the correspondence between node evaluators
             and goals is that you can specify different node selection strategies for
             different subtrees.  If <c>goal1</c> and <c>goal2</c> define
             the search in two subtrees of a branch-and-cut search tree, and
             <c>eval1</c> and <c>eval2</c> define two
             different node selection schemes, the following goal
             will put the subtree defined by <c>goal1</c> under the node
             selection strategy of <c>eval1</c> and the subtree defined by
             <c>goal2</c> under the node selection strategy
             of <c>eval2</c>.
             </p>
             <p><c>
              cplex.Or(cplex.Apply(goal1, eval1),
                       cplex.Apply(goal2, eval2));
             </c></p><p>
             To understand better how multiple node evaluators are handled, consider
             this additional information about the management of evaluators.  When an
             evaluator is applied to a goal, the evaluator is attached to every node
             that will be created by that goal.  This not only includes the nodes
             created by the <c>execute</c> method of the goal itself, but also
             those created by the goal returned by the <c>execute</c> method
             and so on.  Since the <c>execute</c> method of a goal may create
             and return goals with other evaluators applied to them, every node may
             have a list of evaluators attached to it.  The order of evaluators is the
             order in which the evaluators have been applied.</p>
             <p>
             Each evaluator computes a value for every node it is attached to by
             calling the method <c>evaluate</c>. This method is called only once
             for a node and the result is stored.  If a node evaluates to
             <c>Double.MAX_VALUE</c> (by means of an evaluator's method
             <c>evaluate</c>), the node is pruned from the tree, or, in other
             words, the node is removed from the tree along with the entire subtree
             that otherwise might have been generated from it.</p>
             <p>
             When <c>Cplex</c> chooses the next node to be processed it starts
             out with a candidate proposed by the built-in node selection strategy.
             There is a variety of such strategies that can be chosen with
             the parameter <c>Cplex.IntParam.NodeSel</c>.</p>
             <p>
             After choosing an initial candidate node, <c>Cplex</c> goes
             through the list of remaining nodes in the branch-and-cut tree to see if
             a node evaluator overrules this decision.  Thus, for each active node
             <c>Cplex</c> checks all the evaluators it has in common with the
             current candidate.  By default, if a common evaluator computed a lower
             number for a node than for the current candidate, that node is used as a
             new candidate.  However, by overriding the <c>subsume</c>
             method, a different overruling criterion can be implemented.  The
             evaluators are checked in the order they are listed in the candidate
             node. This operation is repeated
             until all nodes have been checked.  The candidate
             that survives this process will be chosen as the node to be processed
             for branch-and-cut search.</p></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.#ctor" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetId">
              <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.Evaluate" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.Subsume(System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.Init" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetNodeId">
             <summary>
             <p>Returns the node identifier of the current node.</p>
             <p>This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </summary>
            <returns>The <c>Cplex.NodeId</c> of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetObjValue">
             <summary>
             <p>Returns the objective value of the current node.</p>
             <p>This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </summary>
            <returns>The objective value of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetEstimatedObjValue">
             <summary>
             <p>Returns the estimated objective value of the current node.</p>
             <p>This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </summary>
            <returns>The estimated objective value of the current node.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.GetDepth" -->
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetInfeasibilitySum">
             <summary>
             <p>Returns the sum of integer infeasibility of the current node.</p>
             <p>This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </summary>
            <returns>The sum of integer infeasibility of the current node.</returns>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.NodeEvaluator.GetNinfeasibilities">
             <summary>
             <p>Returns the number of integer infeasible variables for the current
             node.</p> <p>This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </summary>
            <returns>The number of integer infeasibilities for the current node.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.GetBranchVar" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.GetLeftDepth" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.NodeEvaluator.GetRightDepth" -->
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.ObjValue">
              <summary>
              Gets the objective value of the current node.
              </summary>
              <remarks>  This method can be called only from the methods
              <c>init</c> and <c>evaluate</c>.
            
              </remarks>
              <returns>The objective value of the current node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.EstimatedObjValue">
              <summary>
              Gets the estimated objective value of the current node.
              </summary>
              <remarks>  This method can be called only from the methods
              <c>init</c> and <c>evaluate</c>.
            
              </remarks>
              <returns>The estimated objective value of the current node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.Depth">
             <summary>
             Gets the depth in the search tree of the current node.
             </summary>
             <remarks>  The root node is defined to have depth 0 (zero);
             the depth of other
             nodes is their distance from the root, or, equivalently, the number
             of branches taken to get from the root to that node.
             This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.
             </remarks>
             <returns>The depth of the current node in the branch-and-cut
             tree.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.InfeasibilitySum">
              <summary>
              Gets the sum of integer infeasibility of the current node.
              </summary>
              <remarks>  This method can be called only from the methods
              <c>init</c> and <c>evaluate</c>.
            
              </remarks>
              <returns>The sum of integer infeasibility of the current
              node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.Ninfeasibilities">
             <summary>
             Gets the number of integer infeasible variables for the current
             node.
             </summary>
             <remarks> This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.
             </remarks>
             <returns>The number of integer infeasibilities for the
             current node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.BranchVar">
             <summary>
             Gets the variable that was branched upon to create the current node.
             If a more complex branch was used to create the current node
             <code>null</code> is returned instead.
             </summary>
             <remarks>  This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.
             </remarks>
             <returns>The branch variable of the current node.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.LeftDepth">
             <summary>
             Gets the left depth of the current node in the search tree.
             </summary>
             <remarks>  The root node is depth <c>0</c> (zero);
             the left depth of other
             nodes is the number of times that the first goal in a call to
             <c>Cplex.or</c> has been taken when branching down from the
             root to the current node.
             <p>
             If <c>Cplex.or</c> is called with more than two arguments,
             this call is, in fact, translated into a sequence of
             or goals with two children each.
             For example, <c>Cplex.or(goal1, goal2, goal3);</c> is
             internally translated into <c>Cplex.or(goal1, Cplex.or(goal2,
             goal3));</c> to form a binary tree.  This transformation is accounted
             for when defining the left depth of a node.</p>
             <p>
             This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </remarks>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.NodeEvaluator.RightDepth">
             <summary>
             Gets the right depth of the current node in the search tree.
             </summary>
             <remarks>
             The root node is depth <c>0</c> (zero); the right depth of other
             nodes is the number of times that the second goal in a call to
             <c>Cplex.or</c> has been taken when branching down from the
             root to the current node.
             <p>
             If <c>Cplex.or</c> is called with more than two arguments,
             this call is, in fact, translated into a sequence of
             or goals with two children each.
             For example, <c>Cplex.or(goal1, goal2, goal3);</c> is
             internally translated into <c>Cplex.or(goal1, Cplex.or(goal2,
             goal3));</c> to form a binary tree.  This transformation is accounted
             for when defining the right depth of a node.</p>
             <p>
             This method can be called only from the methods
             <c>init</c> and <c>evaluate</c>.</p>
             </remarks>
             <returns>The right depth of the current node.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.SearchLimit">
             <summary>
             Represents a limit of the search to a specified subtree.
             </summary>
            <remarks>
             <p>This class allows you to limit the branch-and-cut search
             within certain subtrees.  For example, you may consider doing so in order
             to limit the number of branches or nodes to use when
             exploring a certain decision.  Such search limits can be implemented in
             the context of <c>Cplex</c> goals by means of
             <c>Cplex.SearchLimit</c> objects.</p>
             <p>
             To create your own search limit, you must subclass
             <c>Cplex.SearchLimit</c> and implement the method
             <c>check</c>.  You may optionally implement the method
             <c>init</c>.</p> <p>
             Also, if the default implementation of method <c>clone</c> is not
             adequate and the goal is to be used for parallel optimization,
             this method needs also be implemented by the user.  Recall that the
             default <c>clone</c> method performs a shallow copy, so
             typically a user implementation would perform a deep copy for
             objects that should be local to threads or use the
             <c>synchronize</c> keyword where synchronization is required.
             </p>
             <p>
             Prior to calling the methods <c>check</c> or <c>init</c>,
             <c>Cplex</c> initializes the search limit object as the node
             for which to determine whether a search limit
             has been encountered.  This node is referred to as the current node.</p>
             <p>
             The method <c>check</c> must be implemented in such a way that it
             returns <c>true</c> if the limit has been reached and
             <c>false</c> otherwise.  Information about the current node can
             be queried through the protected API of the class
             <c>Cplex.SearchLimit</c>.</p>
             <p>
             Before the method <c>check</c> is called for the first time, the
             virtual method <c>init</c> is called at that node.  This method is
             called only once and allows you to initialize the search limit.  As for
             the method <c>check</c>, information about the current node can
             be queried through the protected API of class
             <c>Cplex.SearchLimit</c>.</p>
             <p>
             The method <c>Cplex.LimitSearch</c> is used to create a goal
             that imposes a limit on a search controlled by a goal, as shown in this
             example:
             </p>
             <p>
             <pre>
               Cplex.Goal limitGoal = cplex.LimitSearch(goal1, limit);
             </pre>
             </p>
             <p>
             In this example <c>limit</c> is of type
             <c>Cplex.SearchLimit</c> and <c>goal1</c> is of type
             <c>Cplex.Goal</c>.
             The method <c>Cplex.LimitSearch</c>
             creates and returns a new goal that performs branch-and-cut search as
             specified by <c>goal1</c> until the limit specified by
             <c>limit</c> is reached.  In doing so, the search limit defined by
             <c>limit</c> is active only for the search subtree generated by
             <c>goal1</c>. For example, if you created two branches with the goal
             </p>
             <p>
             <pre>
               cplex.Or(limitGoal, goal2);
             </pre>
             </p><p>
             only the subtree defined by <c>goal1</c> is subjected to the
             search limit <c>limit</c>, while the subtree defined by
             <c>goal2</c> is not.
             </p><p>
             The possibility of specifying search limits for subtrees leads to the
             possible situation where certain branches are subject to more than one
             search limit. Nodes with multiple search limits attached to them are
             processed only if none of the search limits has been reached, or, in other
             words, if all the search limits return <c>false</c> when the
             <c>check</c> method is called by <c>Cplex</c>.
             </p><p>
             The fact that search limits are tied to goals implies that as soon as
             the goal stack becomes empty and <c>Cplex</c> proceeds with
             built-in search strategies, the search limit is deactivated. In order to
             impose a search limit while using a built-in <c>Cplex</c>
             branch strategy, a goal such as the following one can be used.
             </p><p>
             <pre>
               class DefaultSearchGoal extends Cplex.Goal {
                 public Cplex.Goal execute(Cplex cplex) throws ILOG.Concert.Exception {
                   if (!isIntegerFeasible())
                     return cplex.And(cplex.BranchAsCplex(), this);
                   return null;
                 }
               }
             </pre>
             </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SearchLimit.#ctor">
             <summary>
             <p>Creates a new search limit.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SearchLimit.Check" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SearchLimit.Init" -->
        <member name="M:ILOG.CPLEX.Cplex.SearchLimit.CheckNode(ILOG.CPLEX.CpxNode)">
              <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.SearchLimit.InitNode(ILOG.CPLEX.CpxNode)">
              <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SearchLimit.GetDepth" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SearchLimit.GetLeftDepth" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.CPLEX.Cplex.SearchLimit.GetRightDepth" -->
        <member name="P:ILOG.CPLEX.Cplex.SearchLimit.Depth">
              <summary>
              Gets the depth in the search tree of the current node.
              </summary>
              <remarks>  The root node is defined to have depth 0 (zero);
              the depth of other nodes is their distance from the root,
              or, equivalently, the number of
              branches taken to get from the root to the current node.
              <p>
              This method can be called only from the methods
              <c>Init</c> and <c>Check</c>.</p>
            
              </remarks>
              <returns>The depth of the current node in the branch-and-cut
              tree.</returns>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SearchLimit.LeftDepth">
              <summary>
              Gets the left depth of the current node in the search tree.
              </summary>
              <remarks>  The root node is depth <c>0</c> (zero); the left depth
              of other nodes is the number of times that the first
              goal in a call to
              <c>Cplex.or</c> has been taken when branching down from the
              root to the current node.
              <p>
              When <c>Cplex.or</c> is called with more than two arguments,
              this call is translated into a sequence of or goals with two
              children each.  For example, <c>Cplex.or(goal1, goal2, goal3);</c> is
              internally translated into <c>Cplex.or(goal1, Cplex.or(goal2,
              goal3));</c> to form a binary tree.  This transformation is accounted
              for when defining the left depth of a node.</p>
              <p>
              This method can be called only from the methods
              <c>Init</c> and <c>Check</c>.</p>
            
              </remarks>
        </member>
        <member name="P:ILOG.CPLEX.Cplex.SearchLimit.RightDepth">
              <summary>
              Gets the right depth of the current node in the search tree.
              </summary>
              <remarks>  The root node is depth <c>0</c> (zero); the right
              depth of other nodes is the number of times that the second
              goal in a call to
              <c>Cplex.or</c> has been taken when branching down from the
              root to the current node.
              <p>
              If <c>Cplex.or</c> is called with more than two arguments,
              this call is translated into a sequence of or goals with two
              children each. For example, <c>Cplex.or(goal1, goal2, goal3);</c> is
              internally translated into <c>Cplex.or(goal1, Cplex.or(goal2,
              goal3));</c> to form a binary tree.  This transformation is accounted
              for when defining the right depth of a node.</p>
              <p>
              This method can be called only from the methods
              <c>Init</c> and <c>Check</c>.</p>
            
              </remarks>
              <returns>The right depth of the current node.</returns>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FilterType">
            <summary>
            <p>An instance of this class represents the type of a filter
            associated with the solution pool.</p>
            <p>For details about the types of filters available, how to
            create and install them, see the topic solution pool filters
            in the <em>CPLEX User's Manual</em>.</p>
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.FilterIndex">
            <summary>
            An instance of this class represents an index of a filter
            associated with the solution pool.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.Cplex.Aborter">
            <summary>
            Gracefully terminates the solve and tuning methods of CPLEX.
            </summary>
            <remarks> <p>You can pass an instance of this class to one or more CPLEX objects.
            Calling the method
            
             Abort
            will then terminate the solve or tuning method of the CPLEX object,
            even in different threads.
            </p></remarks>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.#ctor">
            <summary>
            <p>Constructs an instance of the aborter class.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.GetImpl">
            <exclude />
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.Abort">
            <summary>
            <p>Aborts solving and tuning methods.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.Clear">
            <summary>
            <p>Clears the invoking aborter.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.IsAborted">
            <summary>
            <p>Returns true if the method to abort has been called.</p>
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.Cplex.Aborter.End">
            <summary>
            <p>Ends the invoking aborter.</p>
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.IntArray">
            <exclude />
        </member>
        <member name="T:ILOG.CPLEX.DoubleArray">
            <exclude />
        </member>
        <member name="T:ILOG.CPLEX.ByteArray">
            <exclude />
        </member>
        <member name="T:ILOG.CPLEX.CachedArray">
            <exclude />
        </member>
        <member name="T:ILOG.CPLEX.CplexI">
            <exclude />
        </member>
        <member name="T:ILOG.Concert.IConversion">
              <summary>
              <c>IConversion</c> objects allow you to locally change the type of
              one or more variables.
              </summary>
             <remarks>  <p>
              When a variable is created, its type is determined to be one of
              <c>Int</c>, <c>Float</c>, or <c>Bool</c>.  The
              type of a variable can be queried with the method
              <c>INumVar.GetType()</c>. It cannot be changed throughout the
              lifetime of the variable.</p>
              <p>
              However, it is sometimes necessary to consider a model where, for example,
              some integer variables are relaxed to be continuous.  This is achieved
              using objects of type <c>IConversion</c>. By adding an
              <c>IConversion</c> object to a model, you can change the types of
              the variables represented in the <c>IConversion</c> object for
              that model only. When solving the model, the changed types are
              used instead of the original types of the variables. Method
              <c>INumVar.GetType()</c> still returns the original variable
              types.</p>
              <p>
              The type of a variable can be changed only once per model. An attempt
              to add more than one <c>IConversion</c> object to a model
              containing the same variable will cause an exception to be thrown.</p>
              <p>
              To change the type of a variable more than once, you must remove the
              existing <c>IConversion</c> object before adding a new
              <c>IConversion</c> object. Removing the conversion object for a
              variable from the model will
              reinstantiate the original type of variable within that model.</p>
            
              
              </remarks>
              <see cref="M:ILOG.Concert.IMPModeler.Conversion(ILOG.Concert.INumVar,ILOG.Concert.NumVarType)"/><see cref="T:ILOG.Concert.NumVarType"/>
        </member>
        <member name="M:ILOG.Concert.IConversion.GetType(ILOG.Concert.INumVar)">
              <summary>
              Returns the variable type to which the invoking <c>IConversion</c>
              object converts variable <c>var</c>.
              </summary>
             <remarks>If the invoking
              <c>IConversion</c>
              object does not specify a type for that variable, <c>null</c> is
              returned instead.
            
              
            
             </remarks>
             <param name="var">The variable to be queried for type.
            
              </param>
              <returns>The type to which variable <c>var</c> is converted.
            
              </returns><see cref="T:ILOG.Concert.NumVarType"/>
        </member>
        <member name="T:ILOG.Concert.ILPMatrix">
              <summary>
              As a modeling object, an instance of <c>ILPMatrix</c> 
              allows you to treat a set of variables and 
              range constraints (instances of <c>IRange</c>) 
              as a matrix.
              </summary>
             <remarks>
              <p>Objects of this class represent a set of linear constraints
              of the form <c>L &lt;= A x &lt;= U</c>, where  <c>L</c>
              and <c>U</c> are vectors and <c>A</c> is a matrix.  
              This modeling object allows
              you to edit <c>A</c> directly as a sparse matrix.</p>
              <p>
              Every row of an instance of <c>ILPMatrix</c> 
              corresponds to an instance of
              <c>IRange</c> representing a linear constraint. Every column of
              this matrix is linked to
              an <c>INumVar</c> object. An <c>INumVar</c> object cannot
              be linked to more than one column of <c>A</c>. An
              <c>IRange</c> object cannot be linked to more than one row of an
              <c>ILPMatrix</c>. The rows of an LP matrix are referenced by
              integer values, called the row indices, ranging from <c>0</c> 
              (zero) to
              <c>getNrows-1</c>. Similarly, the columns of an LP matrix are
              referenced by integer values, called the column indices, ranging from
              <c>0</c> (zero) to <c>getNcols-1</c>. Nonzero values in the LP
              matrix correspond to linear coefficients in the range constraints
              corresponding to its rows. For example, a nonzero coefficient
              <c>A[i][j]</c> in row <c>i</c> and column <c>j</c> is
              equivalent to the linear coefficient for the variable corresponding to
              column <c>j</c> of the LP matrix in the expression of the range
              constraint corresponding to row <c>i</c> of the LP matrix.
              </p>
              <pre>
                              Column indices
                           0  1  2  ....  n-1
                          +--+--+--+--+--+--+
                r i   0   |  |  |  |  |  |  | -----&gt;   IRange ra;
                o n       +--+--+--+--+--+--+
                w d   1   |  |  |  |  |  |  | -----&gt;   IRange rb;
                  i       +--+--+--+--+--+--+
                  c   .   |  |  |  |  |  |  |   .
                  e   .   +--+--+--+--+--+--+   .
                  s   .   |  |  |  |  |  |  |   .
                          +--+--+--+--+--+--+
                      m-1 |  |  |  |  |  |  | -----&gt;   IRange rc;
                          +--+--+--+--+--+--+
                           |  |           |
                           |  |    ...    |
                           |  |           |
                           V  V           V
                INumVar  x, y,   ...    z;
              </pre>
              <p>
              Create an instance of <c>ILPMatrix</c> by calling the method
              
               IMPModeler.AddLPMatrix. 
              These methods create an empty instance of 
              <c>ILPMatrix</c>, that is, an LP matrix with 
              0 (zero) rows and 0 (zero) columns. 
              Populate the LP matrix by using the 
              methods <c>addRow</c>, <c>addRows</c>,
              <c>addColumn</c>, and <c>addCols</c>.</p>
            
              <p>
              Although you can add multiple ranges (that is, instances of 
              <c>IRange</c>) and multiple variables (that is, instances of
              <c>INumVar</c>) to an instance of <c>ILPMatrix</c>,
              it still remains a single modeling object. Any objects of 
              <c>IRange</c>  or <c>INumVar</c> added to an instance
              of <c>ILPMatrix</c> that is subsequently added to an instance
              of <c>Cplex</c>  are <b>not</b> directly accessible through
              the methods of <c>Cplex</c>. For example, consider 
              <c>r1</c>, an instance of
              <c>IRange</c> added to an instance of <c>ILPMatrix</c>
              subsequently added to an instance of <c>Cplex</c>, and
              <c>r2</c>,  an instance of <c>IRange</c> added directly 
              to the instance of <c>Cplex</c>. The range <c>r1</c>
              differs from the range <c>r2</c>; <c>r1</c> cannot be 
              modified directly by the methods of <c>Cplex</c>; in contrast,
              you can use methods of <c>Cplex</c> to modify <c>r2</c>.
              </p>
              
              </remarks>
              <see cref="M:ILOG.Concert.IMPModeler.AddLPMatrix"/><see cref="M:ILOG.Concert.IMPModeler.LPMatrix"/>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetCols(System.Int32,System.Int32,System.Int32[][],System.Double[][])">
              <summary>
              Returns columns in a sparse matrix representation.
              </summary>
             <remarks>  <p>For every column, an array of row
              indices and an array of values is returned, corresponding to the
              nonzeros in the specified columns. </p>
            
              
            
            
             </remarks>
             <param name="begin">The index of the first column being queried.
              </param>
              <param name="num">The number of consecutive columns being queried.
              </param>
              <param name="ind">An array of arrays of integers to where the row
                                indices of the queried columns will be copied. The
                                nonzero indices of column <c>begin+i</c> will be
                                copied into an array returned as <c>ind[i]</c>.
                                This array must be initialized at least to size
                                <c>num</c>.
              </param>
              <param name="val">An array of arrays of doubles to where the nonzero
                                coefficients of the queried columns will be copied.
                                The nonzero values of column <c>begin+i</c>
                                will be copied
                                into an array returned as <c>val[i]</c>. This
                                array must be initialized to at least size
                                <c>num</c>.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetRows(System.Int32,System.Int32,System.Double[],System.Double[],System.Int32[][],System.Double[][])">
              <summary>
              Returns rows in a sparse matrix representation.
              </summary>
             <remarks>  <p>For every row, an array of column indices and an array of
              values is returned, corresponding to the nonzeros in the specified rows,
              as well as the bounds of the constraints corresponding to the queried
              rows. This implies that the expression of the range constraint of
              a queried row can be expressed as the scalar product of the values
              returned for the queried row and the variables corresponding to the
              column indices returned for the queried row.</p>
            
              
            
            
            
            
             </remarks>
             <param name="start">The index of the first row being queried.
              </param>
              <param name="num">The number of consecutive rows being queried.
              </param>
              <param name="lb">An array where to copy the lower bound values for the
                                range constraints
                                corresponding to the queried rows. The lower bound of
                                the range corresponding to row <c>begin+i</c>
                                will be  returned as <c>lb[i]</c>. This array
                                must be allocated at least length <c>num</c>.
              </param>
              <param name="ub">An array where to copy the upper bound values for the
                                range constraints
                                corresponding to the queried rows. The upper bound of
                                the range corresponding to row <c>begin+i</c>
                                will be returned as <c>ub[i]</c>. This array
                                must be allocated at least length <c>num</c>.
              </param>
              <param name="ind">An array of arrays of integers to which the column
                                indices of the queried rows will be copied. The
                                nonzero indices of row <c>begin+i</c> will be
                                copied into an array returned as <c>ind[i]</c>.
                                This array must be initialized to at least size
                                <c>num</c>.
              </param>
              <param name="val">An array of arrays of doubles to which the nonzero
                                coefficients of the queried rows will be copied.
                                The nonzero values of row <c>begin+i</c> will be
                                copied into an array returned as <c>val[i]</c>.
                                This array must be initialized to at least size
                                <c>num</c>.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetNZ(System.Int32,System.Int32)">
             <summary>
             Returns the value of the matrix element <c>row</c> and
             <c>col</c> from the invoking LP matrix.
             </summary>
            <param name="row">The row index of the matrix element to query.
             </param>
             <param name="column">The column index of the matrix element to query.
             </param>
             <returns>The value of the matrix element.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetIndex(ILOG.Concert.IRange)">
              <summary>
              Returns the row index corresponding to a ranged constraint in the
              invoking LP matrix.
              </summary>
             <remarks>
              <p>If the constraint is not linked to any row of the
              invoking LP matrix, <c>-1</c> is returned. </p>
            
              
             </remarks>
             <param name="rng">Ranged constraint for which to query the row index.
              </param>
              <returns>The row index of a range constraint.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetRange(System.Int32)">
             <summary>
             Returns the ranged constraint corresponding to the <c>i</c>-th row
             of the LP matrix.
             </summary>
            <param name="i">The row index of the ranged constraint to be queried.
             </param>
             <returns>The ranged constraint corresponding to row <c>i</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetIndex(ILOG.Concert.INumVar)">
              <summary>
              Returns the column index corresponding to a variable in the
              invoking LP matrix.
              </summary>
             <remarks>
              <p>If the variable is not linked to any column of the
              invoking LP matrix, <c>-1</c> is returned. </p>
            
              
             </remarks>
             <param name="var">The variable whose column index is queried.
              </param>
              <returns>The column index of the variable <c>var</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.GetNumVar(System.Int32)">
             <summary>
             Returns the variable corresponding to the <c>i</c>-th column of 
             the LP matrix.
             </summary>
            <param name="i">The column index of the variable to be queried.
             </param>
             <returns>The variable corresponding to column <c>i</c>.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddRow(System.Double,System.Double,System.Int32[],System.Double[])">
              <summary>
              Adds a new row to the LP matrix.
              </summary>
             <remarks>  <p>The row being added is represented in
              sparse matrix notation. That is, the nonzero coefficients of the new row
              are given as an array <c>ind</c> of column indices, and an array of
              corresponding values <c>val</c>. These arrays must match in length.
              </p><p>
              A new range constraint is implicitly constructed for the added row.
              Its lower and upper bound values are provided as parameters
              <c>lb</c> and <c>ub</c>. The expression of the implicitly
              added range constraint is the scalar product of the values specified by
              parameter <c>val</c> and the variables corresponding to the columns
              specified by parameter <c>ind</c>.</p>
            
              
            
            
            
             </remarks>
             <param name="lb">The lower bound for the newly created range constraint
                                added as a new row to the invoking LP matrix.
              </param>
              <param name="ub">The upper bound for the newly created range constraint
                                added as a new row to the invoking LP matrix.
              </param>
              <param name="ind">An array of column indices for the nonzeros of the new
                                row.  An index must appear at most one time, and must be
                                in the range <c>0</c> through
                                <c>getNcols()-1</c>.
              </param>
              <param name="val">An array of the corresponding values of the nonzeros of
                                the row to be added.
              </param>
              <returns>The row index of the new row.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddRows(System.Double[],System.Double[],System.Int32[][],System.Double[][])">
              <summary>
              Adds a set of new rows to LP matrix.
              </summary>
             <remarks>  <p>The rows being added are represented
              in sparse matrix notation. That is, the nonzero coefficients of the new
              rows are given as arrays of column indices and corresponding arrays of
              values.  Each pair of corresponding arrays must match in length.
              </p><p>
              For each of the added rows, a new range constraint is implicitly
              constructed. The lower and upper bound value of the <c>i</c>-th
              newly created range constraint are provided in the arguments 
              <c>lb[i]</c> and <c>ub[i]</c>. Its expression is the scalar
              product of the values specified in the array <c>val[i]</c> and the
              variables corresponding to the columns specified in the array
              <c>ind[i]</c>.</p>
            
              
            
            
            
             </remarks>
             <param name="lb">An array of double values containing the
                                lower bounds for the range constraints to be
                                created and added as rows to the invoking LP matrix.
              </param>
              <param name="ub">An array of double values containing the
                                upper bounds for the range constraints to be
                                created and added as rows to the invoking LP matrix.
              </param>
              <param name="ind">An array or arrays of column indices for the nonzeros of
                                the new rows. An index must appear at most one time
                                for each new row and must be in the range
                                <c>0</c> through <c>getNcols()-1</c>.
              </param>
              <param name="val">An array or arrays of the corresponding values of the
                                nonzeros of the rows to be added.
              </param>
              <returns>The row index of the first new row.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILPMatrix.AddRow(ILOG.Concert.IRange)" -->
        <member name="M:ILOG.Concert.ILPMatrix.AddRows(ILOG.Concert.IRange[])">
              <summary>
              Adds range constraints as new rows to an LP matrix.
              </summary>
             <remarks>
              <p>The ranges to be
              added must all have linear expressions. The added rows of the LP matrix
              will contain the linear terms of the range expression as nonzeros.
              If the expression of a ranged constraint being added contains variables
              that do not correspond to columns of the invoking
              <c>ILPMatrix</c>, new columns are automatically added as
              needed. </p>
            
              
             </remarks>
             <param name="rng">The array of range constraints to be added as new rows.
              </param>
              <returns>The row index of the first added row.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddRows(ILOG.Concert.IRange[],System.Int32,System.Int32)">
              <summary>
              Adds a set of range constraints as new rows to an LP matrix.
              </summary>
             <remarks>
              <p>The ranges
              to be added must all have linear expressions. The added rows of the LP
              matrix will contain the linear terms of the range expression as
              nonzeros.  If the expression of a ranged constraint being added contains
              variables that do not correspond to columns of the invoking
              <c>ILPMatrix</c>, new columns are automatically added as
              needed. </p>
            
              
            
            
             </remarks>
             <param name="rng">An array containing the range constraints to be added
                                as new rows.
              </param>
              <param name="start">The index of the first range in <c>rng</c> to be
                                added as a new row.
              </param>
              <param name="num">The number of consecutive ranges in <c>rng</c> 
                                to be added as new rows.
              </param>
              <returns>The row index of the first added row.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveRow(System.Int32)">
              <summary>
              Removes one row from the LP matrix.
              </summary>
             <remarks>
              <p>The remaining rows will be
              kept in the same order. </p>
            
              </remarks>
              <param name="ind">The index of the row to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveRows(System.Int32,System.Int32)">
              <summary>
              Removes a range of rows from the LP matrix.
              </summary>
             <remarks>
              <p>The remaining rows
              will be kept in the same order. </p>
            
              
             </remarks>
             <param name="start">The index of the first row to be removed.
              </param>
              <param name="num">The number of consecutive rows to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveRows(System.Int32[])">
             <summary>
             Removes a set of rows from the invoking LP matrix.
             </summary>
            <remarks>
             <p>The indices of the
             rows to be removed are specified in the array <c>ind</c>.
             Rows that are not removed remain in their original order, but they
             are assigned new row indices from 0 to <c>getNrows()-1</c>.
             </p>
             </remarks>
             <param name="ind">An array containing row indices of the rows to be
                               removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveRows(System.Int32[],System.Int32,System.Int32)">
              <summary>
              Removes as set of rows from the invoking LP matrix.
              </summary>
             <remarks>
              <p>The indices of the
              rows to be removed are specified in the array
              <c>ind[start], &#46;&#46;&#46;, ind[start+num-1]</c>.
              Rows that are not removed remain in their original order, but they
              are assigned new row indices from 0 (zero) to <c>getNrows()-1</c>.
              </p>
              
            
             </remarks>
             <param name="ind">An array containing row indices of the rows to be
                                removed.
              </param>
              <param name="start">The first index in <c>ind</c> of the rows to be
                                removed.
              </param>
              <param name="num">The number of consecutive indices in <c>ind</c> 
                                of the rows to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddColumn(ILOG.Concert.INumVar,System.Int32[],System.Double[])">
              <summary>
              Adds a new column to an LP matrix.
              </summary>
             <remarks>  <p>The column being added is represented
              in sparse matrix notation.  The nonzero coefficients of the new
              column are given as an array <c>ind</c> of row indices, and an array
              of corresponding values <c>val</c>. These arrays must match in
              length.
              </p><p>
              The added column is linked to the variable provided as parameter
              <c>var</c>. This variable must not originally be linked to a column
              of the invoking LP matrix.</p>
            
              
            
            
             </remarks>
             <param name="var">The variable to be linked with the added column.
              </param>
              <param name="ind">An array of row indices of the nonzeros of the new
                                column.  An index must appear at most one time and must
                                be in the range <c>0</c> through
                                <c>getNrows()-1</c>.
              </param>
              <param name="val">An array of the corresponding values of the nonzeros of
                                the column to be added.
              </param>
              <returns>The column index of the added column.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddColumn(ILOG.Concert.INumVar)">
             <summary>
             Adds a new empty column to an LP matrix.
             </summary>
            <remarks>
             <p>All elements in an empty column
             are 0 (zero). The added column is linked to the variable provided as
             parameter <c>var</c>. This variable must not originally be linked
             to a column of the invoking LP matrix.
             </p>
             
            </remarks>
            <param name="var">The variable to be linked with the new column.
             </param>
             <returns>The column index of the added column.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddCols(ILOG.Concert.INumVar[],System.Int32[][],System.Double[][])">
              <summary>
              Adds new columns to the LP matrix.
              </summary>
             <remarks>  <p>The columns being added are represented
              in sparse matrix notation.  That is, the nonzero coefficients of the
              <c>j</c>-th new column to be added are provided by array
              <c>ind[j]</c> containing the row indices, and by array
              <c>val[j]</c> containing corresponding values.  Each pair of
              arrays <c>ind[j]</c> and <c>val[j]</c> must match in length.
              </p>
              <p>The added columns will be linked to the variables provided as parameter
              <c>var</c>.  
              These variables must not currently be linked to a column
              of the invoking LP matrix, nor may a variable be listed more than once in
              <c>var</c>.</p>
            
              
            
            
             </remarks>
             <param name="var">An array of variables to be linked to the new columns.
              </param>
              <param name="indices">An array or arrays of row indices of the nonzeros of
                                the new columns.  An index must appear at most one time
                                in each column and must be in the range
                                0(zero) through <c>getNrows()-1</c>.
              </param>
              <param name="values">An array or arrays containing the corresponding values
                                of the nonzeros of the columns to be added.
              </param>
              <returns>The column index of the first added column.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddCols(ILOG.Concert.INumVar[])">
              <summary>
              Adds new empty columns to the LP matrix.
              </summary>
             <remarks>
              <p>Empty columns have no nonzeros.
              The added columns will be linked to the variables provided as parameter
              <c>var</c>.  These variables must not currently be linked to a 
              column
              of the invoking LP matrix, nor may a variable be listed more than once in
              <c>var</c>. </p>
            
              
             </remarks>
             <param name="var">An array of variables to be linked to the new columns.
              </param>
              <returns>The column index of the first added column.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.AddCols(ILOG.Concert.INumVar[],System.Int32,System.Int32)">
              <summary>
              Adds new empty columns to the LP matrix.
              </summary>
             <remarks> 
              <p>Empty columns have no nonzeros.
              The added columns will be linked to the variables provided in parameter
              <c>var</c>.  These variables must not currently be linked to a 
              column
              of the invoking LP matrix, nor may a variable be listed more than once in
              <c>var[start], &#46;&#46;&#46; var[start+num-1]</c>.
              </p>
              
            
            
             </remarks>
             <param name="var">An array containing the variables to be added as columns.
              </param>
              <param name="start">The first variable in <c>var</c> to be added.
              </param>
              <param name="num">The number of variables in <c>var</c> to be added.
              </param>
              <returns>The column index of the first added column.</returns>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveColumn(System.Int32)">
              <summary>
              Removes one column from the LP matrix.
              </summary>
             <remarks>
              <p>The remaining columns will be
              kept in the same order. </p>
            
              </remarks>
              <param name="ind">The index of the column to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveCols(System.Int32,System.Int32)">
              <summary>
              Remove a range of columns from the LP matrix.
              </summary>
             <remarks> 
              <p>The remaining columns
              will be kept in the same order. </p>
            
              
             </remarks>
             <param name="begin">The index of the first column to be removed.
              </param>
              <param name="num">Number of columns to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveCols(System.Int32[])">
             <summary>
             Removes a set of columns from the invoking LP matrix.
             </summary>
            <remarks>
             <p>The indices of
             columns to be removed are specified in the array <c>ind</c>.
             Columns that are not removed remain in their original order but are
             assigned new column indices from 0 (zero) to <c>getNcols-1</c>.
             </p>
             </remarks>
             <param name="ind">An array containing the indices of the columns to
                               be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.RemoveCols(System.Int32[],System.Int32,System.Int32)">
              <summary>
              Removes a set of columns from the invoking LP matrix.
              </summary>
             <remarks>
              <p>The indices of
              columns to be removed are specified in the array
              <c>ind[start], &#46;&#46;&#46;, ind[start+num-1]</c>.
              Columns that are not removed remain in their original order but are
              assigned new column indices from 0 to <c>getNcols()-1</c>.
              </p>
              
            
             </remarks>
             <param name="ind">An array containing the indices of the columns to be
                                removed.
              </param>
              <param name="start">The first index in <c>ind</c> of the columns to
                                be removed.
              </param>
              <param name="num">The number of indices in <c>ind</c> of the
                                columns to be removed.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.Clear">
            <summary>
            Removes all rows and columns from the invoking LP matrix.
            </summary>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.SetNZ(System.Int32,System.Int32,System.Double)">
              <summary>
              Sets one nonzero of the coefficient matrix of the invoking LP matrix.
              </summary>
             <remarks>  <p>By doing this, you are implicitly changing the expression of
              the range constraint corresponding to the row index of the affected
              nonzero element. </p>
            
              
            
             </remarks>
             <param name="rowind">The row index of the matrix coefficient to be set.
              </param>
              <param name="colind">The column index of the matrix coefficient to be set.
              </param>
              <param name="val">The value of the matrix coefficient to be set.</param>
        </member>
        <member name="M:ILOG.Concert.ILPMatrix.SetNZs(System.Int32[],System.Int32[],System.Double[])">
              <summary>
              Sets nonzero elements of the coefficient matrix of the invoking LP matrix.
              </summary>
             <remarks>  <p>By doing this, you are implicitly changing the expressions of
              the range constraints corresponding to the row indices of the affected
              nonzero elements. </p>
            
              
            
             </remarks>
             <param name="rowind">An array containing the row indices of the matrix
                                coefficients to be set.
              </param>
              <param name="colind">An array containing the column indices of the matrix
                                coefficients to be set.
              </param>
              <param name="val">An array containing the values of the new matrix
                                coefficients to be set.</param>
        </member>
        <member name="P:ILOG.Concert.ILPMatrix.Nrows">
               <summary>
               Gets the number of rows in the invoking LP matrix.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ILPMatrix.Ncols">
               <summary>
               Gets the number of columns in the invoking LP matrix.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ILPMatrix.NNZs">
               <summary>
               Gets the number of nonzeros in the invoking LP matrix.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ILPMatrix.Ranges">
               <summary>
               Gets an array of range constraints corresponding to the rows of the
               LP matrix.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ILPMatrix.NumVars">
               <summary>
               Gets an array of variables corresponding to the columns of
               the LP matrix.
               </summary>
        </member>
        <member name="T:ILOG.Concert.Column">
             <summary>
             Objects of class <c>Column</c> create a variable
             to use in column-wise modeling.
             </summary>
            <remarks>
             <p>In column-wise modeling, newly
             constructed variables are inserted into existing
             modeling objects. The term column-wise comes from linear programming, where
             the constraints are typically represented as a matrix. Adding new
             variables to the optimization problem corresponds to adding columns to
             the constraint matrix.</p>
             <p>
             The procedure for column-wise modeling is as follows.
             Start from an existing set of modeling objects of these classes: </p>
             <ul>
             <li><c>IObjective</c>,</li>
             <li><c>IRange</c>, and</li>
             <li><c>ILPMatrix</c></li>
             </ul>
             <p>
             For each modeling object affected by the addition of the new variable,
             call the method <c>IMPModeler.Column</c> 
             with the object as an argument,
             along with the other arguments needed to install a new variable in the
             existing modeling objects.  See the documentation of the
             
              IMPModeler.Column 
             methods for the details of
             these arguments. Each of these methods returns an object of type
             
              Column 
             that contains information about how to add a new
             variable to the modeling object for which the
             
              IMPModeler.Column 
             method has been called.</p>
             <p>
             The column objects can then be linked to an aggregate
             column object by the method 
             
              Column.And. 
             This aggregate object contains information about how to add a new variable
             to all of the modeling objects represented by its parts. If the new
             variable is to be installed in only one modeling object, there is no need
             to use the method 
             
              Column.And. 
             </p>
             <p>
             The column object constructed this way is now ready to be
             used to create a new variable. This is done by passing the
             column object as an argument to the constructor methods for
             variables, for example 
             
              IMPModeler.NumVar or IMPModeler.IntVar. 
             The newly created variable will
             immediately be part of the existing modeling objects that have been used
             to construct the column object.</p>
             </remarks>
             <see cref="M:ILOG.Concert.IMPModeler.SemiContVar(ILOG.Concert.Column,System.Double,System.Double,ILOG.Concert.NumVarType)"/><see cref="M:ILOG.Concert.IMPModeler.BoolVar(ILOG.Concert.Column)"/><see cref="M:ILOG.Concert.IMPModeler.IntVar(ILOG.Concert.Column,System.Int32,System.Int32)"/><see cref="M:ILOG.Concert.IMPModeler.NumVar(ILOG.Concert.Column,System.Double,System.Double)"/><see cref="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.IRange,System.Double)"/><see cref="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.ILPMatrix)"/><see cref="M:ILOG.Concert.IMPModeler.Column(ILOG.Concert.IObjective,System.Double)"/>
        </member>
        <member name="M:ILOG.Concert.Column.Install(ILOG.Concert.INumVar)">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.Column.And(ILOG.Concert.Column)">
             <summary>
             Links two column objects.
             </summary>
            <remarks>
             <p>When you use the returned
             column object for constructing a new variable, the new
             variable will be installed in the modeling objects handled by the invoking
             column object as well as the modeling objects handled by the 
             column passed as the argument <c>column</c>.
             </p>
             
            </remarks>
            <param name="column">The column object to be linked with the invoking
                       column.</param>
                       <returns>A column object defining the addition of a
                       newly created variable to the modeling objects handled by the
                       invoking column and to the modeling objects
                       handled by the argument <c>column</c>.
             </returns>
        </member>
        <member name="T:ILOG.Concert.ColumnArray">
             <summary>
             Objects of the class <c>ColumnArray</c> are used to create an
             array of variables using column-wise modeling.
             </summary>
            <remarks>
             <p>In column-wise modeling,
             newly constructed variables are inserted into existing modeling
             objects. The term column-wise comes from linear programming, where
             the constraints are typically represented as a matrix. Adding new
             variables to the optimization problem corresponds to adding columns to
             the constraint matrix.</p>
             <p>
             This is the procedure for column-wise modeling:</p>
             <p>Start with the set of modeling objects of these classes
             <ul>
             <li><c>IObjective</c>,</li>
             <li><c>IRange</c>, and</li>
             <li><c>ILPMatrix</c></li>
             </ul>
             to which you want to add new variables.</p><p>
             For each of these objects call
             <c>IMPModeler.ColumnArray</c>, with the object as an argument,
             along with the other arguments needed to install an array of new
             variables in the existing modeling objects. See the documentation of 
             
              IMPModeler.ColumnArray 
             for details of these parameters.</p>
             <p>
             The column-array objects can then be linked to an
             aggregate column-array object with the method
             
              ColumnArray.And, 
             which will include all the individual
             objects. If the new variables are to be installed in only one modeling
             object, there is no need to use the method <c>and</c>.</p>
             <p>
             The column-array object constructed this way is now ready to
             be used to create an array of new variables and install them in the
             existing modeling objects, as defined by the column-array 
             object. This is done by passing the column-array object as an 
             argument to the constructor methods for arrays of variables, for example
             
              IMPModeler.NumVarArray or IMPModeler.IntVarArray. 
             The newly created variables will
             immediately be part of the existing modeling objects that have been used for
             constructing the column-array object.</p>
             </remarks>
             <see cref="M:ILOG.Concert.IMPModeler.SemiContVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[],ILOG.Concert.NumVarType[])"/><see cref="M:ILOG.Concert.IMPModeler.IntVarArray(ILOG.Concert.ColumnArray,System.Int32[],System.Int32[])"/><see cref="M:ILOG.Concert.IMPModeler.NumVarArray(ILOG.Concert.ColumnArray,System.Double[],System.Double[])"/><see cref="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IRange,System.Double[])"/><see cref="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.ILPMatrix,System.Int32,System.Int32[][],System.Double[][])"/><see cref="M:ILOG.Concert.IMPModeler.ColumnArray(ILOG.Concert.IObjective,System.Double[])"/>
        </member>
        <member name="M:ILOG.Concert.ColumnArray.Install(ILOG.Concert.INumVar[])">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.ColumnArray.GetSize">
              <summary>
              Returns the number of variables that are created by the invoking
              <c>ColumnArray</c> object.
              </summary>
             <remarks>Every <c>ColumnArray</c>
              object is suitable for constructing a variable array of a specific length.
              The length must be the same in each <c>ColumnArray</c> when
              combining <c>ColumnArray</c> objects
              with the method <c>and</c>.
            
              </remarks>
              <returns>The number of variables created by the
                        invoking <c>ColumnArray</c> object.</returns>
        </member>
        <member name="M:ILOG.Concert.ColumnArray.And(ILOG.Concert.ColumnArray)">
              <exclude />
        </member>
        <member name="P:ILOG.Concert.ColumnArray.Size">
             <summary>
             Returns the number of variables that are created by the invoking
             <code>ColumnArray</code> object. Every <code>ColumnArray</code>
             object is suitable for constructing a variable array of a specific
             length.  The length must be the same in each one of the 
             <code>ColumnArray</code> objects when you combine
             multiple <code>ColumnArray</code>
             objects with the method <code>And</code>.
             </summary>
        </member>
        <member name="T:ILOG.Concert.ColumnArray.SizeMismatchException">
              <summary>
              An exception that indicates a mismatched <em>number of variables</em>.
              </summary>
             <remarks>  This exception is thrown if you try to combine <c>ColumnArray</c>
              objects, using the method <c>ColumnArray.And</c> 
              for column-wise
              modeling, if the sizes of the objects do not match. The size of an
              <c>ColumnArray</c> object represents the number of variables
              created by it and can be queried with the method <c>getSize</c>.
            
              </remarks>
              <see cref="M:ILOG.Concert.ColumnArray.And(ILOG.Concert.ColumnArray)"/>
        </member>
        <member name="T:ILOG.Concert.INumVarBound">
             <summary>
             This interface defines the API for classes that represent the upper or
             lower bound of a variable as a constraint.
             </summary>
            <remarks> 
             <p>Such constraints cannot be used
             for modeling. The class <c>INumVar</c> 
             already provides methods for
             specifying and modifying bounds of a variable.  However, it is
             convenient to 
             identify bounds as constraints to consider when CPLEX computes a
             minimal set of conflicting constraints or bounds to analyze and repair 
             an infeasible model with <c>Cplex.RefineConflict</c>.
             </p></remarks>
        </member>
        <member name="P:ILOG.Concert.INumVarBound.Type">
               <summary>
               Returns the bound type represented by the invoking instance.
               </summary>
        </member>
        <member name="P:ILOG.Concert.INumVarBound.Var">
               <summary>
               Returns the variable for which the invoking instance represents a bound.
               </summary>
        </member>
        <member name="T:ILOG.Concert.IQuadNumExpr">
             <summary>
             A quadratic numeric expression.
             </summary>
            <remarks>  <p>A quadratic expression represents a sum of quadratic terms of the form
             <c>qexp = sum q_ij * x_i * x_j</c>. </p></remarks>
        </member>
        <member name="M:ILOG.Concert.IQuadNumExpr.Add(ILOG.Concert.IQuadNumExpr)">
             <summary>
             <p>Adds all terms found in <c>qexpr</c> to the invoking object.</p>
             </summary>
        </member>
        <member name="M:ILOG.Concert.IQuadNumExpr.AddTerm(System.Double,ILOG.Concert.INumVar,ILOG.Concert.INumVar)">
            <summary>
            <p>Adds the new term <c>coef * var1 * var2</c> to
            the invoking quadratic expression.</p>
            </summary>
        </member>
        <member name="M:ILOG.Concert.IQuadNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[],ILOG.Concert.INumVar[])">
            <summary>
            <p>Adds the terms <c>sum_i (coef[i] * var1[i] * var2[i])</c>
             to the invoking quadratic expression.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[],ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.IQuadNumExpr.Clear">
            <summary>
            Removes all quadratic terms from the invoking object.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IQuadNumExpr.GetQuadEnumerator">
            <summary>
            Returns an enumerator over the quadratic terms in the invoking quadratic 
            expression.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExpr.Remove(ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.Concert.IQuadNumExpr.Remove(ILOG.Concert.INumVar[])">
            <summary>
            Removes all terms that use a variable in the specified array 
            from the invoking quadratic expression.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExpr.Remove(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "T:ILOG.Concert.IQuadNumExprEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExprEnumerator.GetValue" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExprEnumerator.SetValue(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExprEnumerator.GetNumVar1" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadNumExprEnumerator.GetNumVar2" -->
        <member name="T:ILOG.Concert.IQuadIntExpr">
             <summary>
             A quadratic expression.
             </summary>
            <remarks>  <p>A quadratic expression represents a sum of quadratic terms of the form
             <c>qexp = sum q_ij * x_i * x_j</c>. </p></remarks>
        </member>
        <member name="M:ILOG.Concert.IQuadIntExpr.Add(ILOG.Concert.IQuadIntExpr)">
             <summary>
             Adds all terms found in the specified quadratic expression 
             to the invoking object.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExpr.AddTerm(System.Int32,ILOG.Concert.IIntVar,ILOG.Concert.IIntVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.IQuadIntExpr.Clear">
            <summary>
            Removes all quadratic terms from the invoking object.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IQuadIntExpr.GetQuadEnumerator">
            <summary>
            Returns an enumerator over the quadratic terms in the invoking quadratic 
            expression.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExpr.Remove(ILOG.Concert.IIntVar)" -->
        <member name="M:ILOG.Concert.IQuadIntExpr.Remove(ILOG.Concert.IIntVar[])">
             <summary>
             Removes all terms that use a variable of the specified array 
             from the invoking quadratic expression.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExpr.Remove(ILOG.Concert.IIntVar[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "T:ILOG.Concert.IQuadIntExprEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExprEnumerator.GetValue" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExprEnumerator.SetValue(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExprEnumerator.GetIntVar1" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.IQuadIntExprEnumerator.GetIntVar2" -->
        <member name="T:ILOG.Concert.ILQNumExpr">
             <summary>
             A general expression featuring both linear and quadratic terms.
             </summary>
            <remarks>  <p>A quadratic expression represents a sum of quadratic terms and linear
             terms of the form:
             <c>exp = sum a_i * x_i + sum q_ij * x_i * x_j + const</c>
             </p></remarks>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.Add(ILOG.Concert.ILinearNumExpr)">
             <summary>
             <p>Adds all terms found in <c>lexpr</c> to the invoking object.</p>
             </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerm(System.Double,ILOG.Concert.INumVar)">
            <summary>
            <p>Adds the new term <c>coef * var</c> to
            the invoking linear quadratic expression.</p>
            </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerm(ILOG.Concert.INumVar,System.Double)">
            <summary>
            <p>Adds the new term <c>coef * var</c> to
            the invoking linear quadratic expression.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQNumExpr.AddTerms(ILOG.Concert.INumVar[],System.Double[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[])">
            <summary>
            <p>Adds the terms <c>sum_i (coef[i] * var[i])</c>
             to the invoking linear quadratic expression.</p>
             </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerms(ILOG.Concert.INumVar[],System.Double[])">
            <summary>
            <p>Adds the terms <c>sum_i (coef[i] * var[i])</c>
             to the invoking linear quadratic expression.</p>
             </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.Add(ILOG.Concert.IQuadNumExpr)">
             <summary>
             <p>Adds all terms found in <c>qexpr</c> to the invoking object.</p>
             </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerm(System.Double,ILOG.Concert.INumVar,ILOG.Concert.INumVar)">
            <summary>
            <p>Adds the new term <c>coef * var1 * var2</c> to
            the invoking linear quadratic expression.</p>
            </summary>
        </member>
        <member name="M:ILOG.Concert.ILQNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[],ILOG.Concert.INumVar[])">
            <summary>
            <p>Adds the terms <c>sum_i (coef[i] * var1[i] * var2[i])</c>
             to the invoking linear quadratic expression.</p>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQNumExpr.AddTerms(System.Double[],ILOG.Concert.INumVar[],ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.ILQNumExpr.Clear">
            <summary>
            Removes all terms from the invoking object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQNumExpr.Remove(ILOG.Concert.INumVar)" -->
        <member name="M:ILOG.Concert.ILQNumExpr.Remove(ILOG.Concert.INumVar[])">
             <summary>
             Removes all terms that use a variable of the specified array 
             from the invoking expression.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQNumExpr.Remove(ILOG.Concert.INumVar[],System.Int32,System.Int32)" -->
        <member name="T:ILOG.Concert.ILQIntExpr">
             <summary>
             A general expression featuring both linear and quadratic terms.
             </summary>
            <remarks>  <p>A quadratic expression represents a sum of quadratic terms and linear
             terms of the form:
             <c>exp = sum a_i * x_i + sum q_ij * x_i * x_j + const</c>
             </p></remarks>
        </member>
        <member name="M:ILOG.Concert.ILQIntExpr.Add(ILOG.Concert.ILinearIntExpr)">
             <summary>
             Adds all terms found in the specified linear expression 
             to the invoking object.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerm(ILOG.Concert.IIntVar,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerm(System.Int32,ILOG.Concert.IIntVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(ILOG.Concert.IIntVar[],System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(ILOG.Concert.IIntVar[],System.Int32[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.ILQIntExpr.Add(ILOG.Concert.IQuadIntExpr)">
             <summary>
             Adds all terms found in the specified quadratic expression 
             to the invoking object.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerm(System.Int32,ILOG.Concert.IIntVar,ILOG.Concert.IIntVar)" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[])" -->
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.AddTerms(System.Int32[],ILOG.Concert.IIntVar[],ILOG.Concert.IIntVar[],System.Int32,System.Int32)" -->
        <member name="M:ILOG.Concert.ILQIntExpr.Clear">
            <summary>
            Removes all terms from the invoking object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.Remove(ILOG.Concert.IIntVar)" -->
        <member name="M:ILOG.Concert.ILQIntExpr.Remove(ILOG.Concert.IIntVar[])">
             <summary>
             Removes all terms that use a variable of the specified array 
             from the invoking expression.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ILOG.Concert.ILQIntExpr.Remove(ILOG.Concert.IIntVar[],System.Int32,System.Int32)" -->
        <member name="T:ILOG.Concert.ISOS1">
              <summary>
              A special ordered set of type 1.
              </summary>
             <remarks>  <p>A special ordered set of type 1 (SOS1) specifies an ordered
              set of variables. Only one of these variables may take a nonzero value in
              a feasible solution. The order of the variables is determined by weight
              values assigned to each variable in the set.</p>
            
              <p><c>ISOS1</c> objects are created with the method
              <c>IMPModeler.SOS1()</c>.</p>
            
              </remarks>
              <see cref="M:ILOG.Concert.IMPModeler.AddSOS1(ILOG.Concert.INumVar[],System.Double[])"/>
        </member>
        <member name="P:ILOG.Concert.ISOS1.NumVars">
               <summary>
               Gets the array of variables in the invoking <c>SOS1</c> object.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ISOS1.Values">
               <summary>
               Gets the array of weight values in the invoking <c>SOS1</c> object.
               </summary>
        </member>
        <member name="T:ILOG.Concert.ISOS2">
              <summary>
              A special ordered set of type 2.
              </summary>
             <remarks>  <p>A special ordered set of type 2 (SOS2) specifies an ordered set of
              variables. Only two of these variables may take a nonzero value in a
              feasible solution, and the two variables must be adjacent with respect to
              the order of the variables. 
              The order of the variables in the set is determined by 
              weighted values assigned to each
              variable in the set.</p>
            
              <p><c>ISOS2</c> objects are created with the method
              <c>IMPModeler.SOS2()</c>. </p>
            
              </remarks>
              <see cref="M:ILOG.Concert.IMPModeler.AddSOS2(ILOG.Concert.INumVar[],System.Double[])"/>
        </member>
        <member name="P:ILOG.Concert.ISOS2.NumVars">
               <summary>
               Gets the array of variables in the invoking <c>SOS2</c> object.
               </summary>
        </member>
        <member name="P:ILOG.Concert.ISOS2.Values">
               <summary>
               Gets the array of weight values in the invoking <c>SOS2</c> object.
               </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ILOG.Concert.ISemiContVar" -->
        <member name="P:ILOG.Concert.ISemiContVar.SemiContLB">
               <summary>
               Gets or sets the semi-continuous lower bound of the invoking
               <c>ISemiContVar</c>.
               </summary>
        </member>
        <member name="T:ILOG.CPLEX.MultipleConversionException">
            <summary>
            This exception is thrown by an attempt to change the type of a variable
            multiple times.
            </summary>
        </member>
        <member name="M:ILOG.CPLEX.MultipleConversionException.GetNumVars">
            <summary>
            Query the variable for which multiple changes to the type were attempted.
            </summary>
        </member>
        <member name="T:ILOG.CPLEX.MultipleObjectiveException">
            <summary>
            This exception is thrown by an attempt to add more than one objective
            to a model.
            </summary>
            <remarks>In this version of CPLEX, a model can contain only 
            one objective object. It is planned to remove this restriction, and thus
            this exception, in a
            future version, although it is likely that algorithms will still be unable
            to handle models with more than one objective.</remarks>
        </member>
        <member name="T:ILOG.CPLEX.NumVarAlreadyInLPMatrixException">
            <summary>
            This exception is thrown by an atttempt to use a variable multiple times
            in an LP matrix.
            </summary>
            <remarks>In the current version of CPLEX, this exception is also
            thrown when an attempt is made to use a variable in more than one LP
            matrix. The latter restriction will be removed in a later version.
            </remarks>
        </member>
        <member name="M:ILOG.CPLEX.NumVarAlreadyInLPMatrixException.GetNumVar">
            <summary>
            Get the variable that caused the
            <c>NumVarAlreadyInLPMatrixException</c> exception to be thrown.
            </summary>
            <returns>The variable for which multiple use attempts were made</returns>
        </member>
        <member name="T:ILOG.CPLEX.UnsupportedExpressionException">
             <summary>
             An instance of 
             <c>UnsupportedExpression</c> is thrown when there is an 
             attempt to create a 
             model with <c>Cplex</c> that does not use only linear expressions 
             for <c>IRanges</c> and linear or quadratic expressions for the 
             objective.
             </summary>
        </member>
        <member name="M:ILOG.CPLEX.UnsupportedExpressionException.#ctor(ILOG.Concert.INumExpr)">
              <summary>
              Class constructor.
              </summary>
             <remarks>Returns an error message.
            
              </remarks>
              <param name="expr">the unsupported <c>INumExpr</c> expression
              
             </param> 
        </member>
        <member name="M:ILOG.CPLEX.UnsupportedExpressionException.GetExpr">
              <summary>
              Query to get the expression that triggered the unsupported expression 
              exception.
              </summary>
            <returns>the unsupported expression </returns> 
        </member>
        <member name="T:ILOG.Concert.IloIntSetVar">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.IsPossible(System.Int32)">
            <summary>
            This methods returns an indication of whether or not the given 
            <c>element</c> is a possible member of the invoking set variable.
            </summary>
            <remarks> Conventionally, a set is defined by two other sets: its required
            elements and its possible elements.</remarks>
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.AddPossible(System.Int32)">
             <summary>
             Adds a possible element to the invoking set variable.
             </summary>
             <remarks> Conventionally, a set is defined by two other sets: its required
             elements and its possible elements.
            </remarks> 
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.RemovePossible(System.Int32)">
             <summary>
             Removes a possible element from the invoking set variable.
             </summary>
             <remarks> Conventionally, a set is defined by two other sets: its required
             elements and its possible elements.
            </remarks> 
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.IsRequired(System.Int32)">
            <summary>
            Returns true if the given element is required by 
            the invoking set variable and false if not.
            </summary>
            <remarks> Conventionally, a set is defined by two other sets: its required
            elements and its possible elements.</remarks>
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.AddRequired(System.Int32)">
             <summary>
             Adds a required element to the invoking set variable.
             </summary>
             <remarks> Conventionally, a set is defined by two other sets: its required
             elements and its possible elements.
            </remarks> 
        </member>
        <member name="M:ILOG.Concert.IloIntSetVar.RemoveRequired(System.Int32)">
             <summary>
             Removes a required element from the invoking set variable.
             </summary>
             <remarks> Conventionally, a set is defined by two other sets: its required
             elements and its possible elements.
            </remarks> 
        </member>
        <member name="T:ILOG.Concert.IloIntSet">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Add(System.Int32)">
            <summary>
            This method adds <c>element</c> to the invoking set.
            </summary>
            <param name="element">The element to be added to the invoking instance of 
                 <c>IloIntSet</c>.</param>
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Add(System.Int32[])">
             <summary>
             This method adds an array of elements to the involking set.
             </summary>
            <param name="elements">The array of elements to be added to the
                            invoking instance of <c>IloIntSet</c>.</param>
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Remove(System.Int32)">
             <summary>
             This method removes <c>element</c> from the invoking set
             Even if an element has been added multiple times, it is
             definitively removed by this method.
             </summary>
            <param name="element">The element to be removed from the invoking
                            instance of <c>IloIntSet</c>.</param>
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Remove(System.Int32[])">
             <summary>
             This method removes an array of elements
             from the invoking set.
             </summary>
            <param name="elements">The array of elements to be removed from the
                           invoking instance of <c>IloIntSet</c>.</param>
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Size">
            <summary>
            This method returns the size of the invoking set.
            </summary>
        </member>
        <member name="M:ILOG.Concert.IloIntSet.Contains(System.Int32)">
            <summary>
            This method returns true if the given element is contained in
            the invoking set and false if it is not in the set.
            </summary>
        </member>
        <member name="T:ILOG.Concert.NumVarBoundType">
             <summary>
             Objects of this class represent the bound-type for a modeling variable.
             </summary>
            <remarks>  <p>They are used to define <c>INumVarBound</c> objects for use with
             <c>Cplex.RefineConflict</c>.
             </p></remarks>
        </member>
        <member name="M:ILOG.Concert.NumVarBoundType.#ctor">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.NumVarBoundType.GetTypeValue">
            <exclude />
        </member>
        <member name="F:ILOG.Concert.NumVarBoundType.Upper">
            <summary>
            Upper bound type.
            </summary>
        </member>
        <member name="F:ILOG.Concert.NumVarBoundType.Lower">
             <summary>
             Lower bound type.
             </summary>
        </member>
        <member name="T:ILOG.Concert.IloIntToIntFunction">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.IloIntToIntFunction.Value(System.Int32)">
             <summary>
             This method must be overwritten in any implementation of this interface.
             </summary>
        </member>
        <member name="T:ILOG.Concert.IloIntToNumFunction">
            <exclude />
        </member>
        <member name="M:ILOG.Concert.IloIntToNumFunction.Value(System.Int32)">
             <summary>
             This method must be overwritten in any implementation of this interface.
             </summary>
        </member>
    </members>
</doc>
